[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyfia"
version = "0.2.0"
description = "High-performance Python implementation for Forest Inventory Analysis"
readme = "README.md"
authors = [
    {name = "Chris Mihiar", email = "28452317+mihiarc@users.noreply.github.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: GIS",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.11"
dependencies = [
    "polars>=1.31.0",
    "numpy>=2.3.0",
    "connectorx>=0.3.1",
    "rich>=13.7.0",
    "duckdb>=0.9.0",
    "pyarrow>=14.0.0",
    "pydantic>=2.11.0",
    "pydantic-settings>=2.7.0",
]

[project.optional-dependencies]
spatial = ["geopandas>=1.1.0", "shapely>=2.1.1"]
pandas = ["pandas>=2.3.0"]
langchain = [
    "langchain>=0.3.0",
    "langchain-openai>=0.3.0", 
    "langchain-community>=0.3.0",
    "langchain-core>=0.3.0",
    "langgraph>=0.2.0",
    "python-dotenv>=1.0.0"
]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.0",
    "mypy>=1.16.1",
    "ty>=0.0.1a11",
    "hypothesis>=6.130.0",
    "hypothesis[numpy]>=6.130.0",
]
all = ["pyfia[spatial,pandas,langchain,dev]"]

[project.urls]
Homepage = "https://github.com/mihiarc/pyfia"
Documentation = "https://github.com/mihiarc/pyfia"
Repository = "https://github.com/mihiarc/pyfia"
Issues = "https://github.com/mihiarc/pyfia/issues"

[project.scripts]
pyfia = "pyfia.cli.direct:main"
pyfia-ai = "pyfia.cli.ai_interface:main"
pyfia-typecheck = "scripts.typecheck:main"
pyfia-setup-precommit = "scripts.setup_precommit:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["pyfia*"]

[tool.setuptools.package-data]
"pyfia.database.memory_docs" = ["*.md"]
"pyfia.ai.prompts" = ["*.txt"]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W"]
ignore = [
    "E501",  # line too long
    "N803",  # argument name should be lowercase (keeping R/FIA conventions)
    "N815",  # mixed case variable in class scope (keeping R/FIA conventions)
    "E722",  # bare except (will fix these later)
    "E402",  # module import not at top (will fix these later)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
# Start with less strict settings for gradual adoption
strict = false
# Basic type checking
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = false  # Too noisy initially
# For now, allow imports without stubs
ignore_missing_imports = true
# Gradually enable these
no_implicit_optional = true
check_untyped_defs = true
disallow_untyped_defs = false  # Will enable module by module
disallow_any_generics = false  # Will enable later
disallow_incomplete_defs = false  # Start permissive
disallow_untyped_calls = false  # Will enable gradually
# Don't error on untyped decorators yet
disallow_untyped_decorators = false
# Ensure proper None handling
strict_optional = true
# Enable error codes for better diagnostics
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
# Show column numbers in errors
show_column_numbers = true
# Pretty output
pretty = true

# Per-module overrides for gradual adoption
[[tool.mypy.overrides]]
module = "pyfia.config"
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = "pyfia.models"
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = "pyfia.constants"
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.ty]
# Ty configuration for modern type checking
environment = { python-version = "3.11" }
# Source directory
src = ["pyfia"]

[tool.ty.rules]
# Enable all rules by default
all = true
# Disable specific rules we're not ready for
missing-return-type = false  # Will enable gradually
missing-parameter-type = false  # Will enable gradually

[tool.ty.terminal]
# Enable color output
color = true
# Show progress
progress = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]

[tool.pydocstyle]
# D100: Missing docstring in public module
# D104: Missing docstring in public package
# D213: Multi-line docstring summary should start at the second line
# D203: 1 blank line required before class docstring
ignore = ["D100", "D104", "D213", "D203"]
match = "(?!test_).*\\.py"
match-dir = "(?!tests).*"

[dependency-groups]
dev = [
    "pytest-cov>=6.2.1",
    "pre-commit>=3.6.0",
]
