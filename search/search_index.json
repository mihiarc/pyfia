{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-._]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyFIA - Forest Inventory Analysis Tools","text":"<p>PyFIA is a modern Python toolkit for analyzing USDA Forest Service Forest Inventory and Analysis (FIA) data using DuckDB as the backend database engine. It provides efficient, Pythonic access to the comprehensive FIA database with a focus on performance, ease of use, and statistical accuracy.</p>"},{"location":"#key-features","title":"\ud83c\udf1f Key Features","text":"<ul> <li>\ud83d\ude80 High Performance: Powered by DuckDB for lightning-fast analytical queries</li> <li>\ud83d\udcca Statistical Accuracy: Implements official EVALIDator methodology for valid estimates</li> <li>\ud83d\udc0d Pythonic Interface: Clean, intuitive API for forest data analysis</li> <li>\ud83d\udd0d Comprehensive Queries: Pre-built query library covering all major FIA analyses</li> <li>\ud83e\udd16 AI-Powered: Integrated AI agents for intelligent query assistance</li> <li>\ud83d\udcda Rich Documentation: Extensive guides, examples, and FIA database reference</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/your-username/pyfia.git\ncd pyfia\n\n# Install dependencies\npip install -r requirements.txt\n\n# Install in development mode\npip install -e .\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>import pyfia\n\n# Initialize FIA database connection\nfia = pyfia.FIA(database_path=\"path/to/fia.duckdb\")\n\n# Get total live trees in Oregon (2021)\noregon_trees = fia.tree_count(\n    evalid=412101,  # Oregon 2021 evaluation\n    status=\"live\"\n)\n\nprint(f\"Oregon has {oregon_trees:,.0f} live trees\")\n# Output: Oregon has 10,481,113,490 live trees\n\n# Get biomass by species group in Colorado\ncolorado_biomass = fia.biomass_by_species_group(\n    evalid=82101,  # Colorado 2021 evaluation\n    component=\"above_ground\"\n)\n\nprint(colorado_biomass.head())\n</code></pre>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<p>This documentation is organized into several key sections:</p>"},{"location":"#getting-started","title":"\ud83c\udfc1 Getting Started","text":"<ul> <li>AI Agent Documentation - Natural language interface for FIA queries</li> <li>Architecture - System design and components</li> </ul>"},{"location":"#ai-agent","title":"\ud83e\udd16 AI Agent","text":"<p>Complete documentation for the natural language AI interface: - Quick Start - Get started with AI-powered queries - User Guide - Comprehensive feature guide - Examples - Real-world usage scenarios - Architecture - Technical architecture details - Developer Guide - Extend and customize the agent - Tools Reference - Available tools and functions - Result Formatting - Rich output formatting with statistics - Domain Filtering - Intelligent query filtering - Troubleshooting - Common issues and solutions</p>"},{"location":"#query-library","title":"\ud83d\udd0d Query Library","text":"<ul> <li>Query Overview - Complete guide to the query system</li> <li>EVALIDator Quick Reference - Essential patterns for Oracle translation</li> <li>EVALIDator Methodology - Comprehensive translation guide</li> <li>Working Query Bank - Reorganized query collection</li> </ul>"},{"location":"#query-examples","title":"\ud83c\udf32 Query Examples","text":"<p>Ready-to-use examples for common forest analysis tasks: - Basic Tree Queries - Tree counts, species analysis, diameter distributions - Biomass &amp; Carbon - Above/below-ground biomass, carbon storage calculations - Growth &amp; Mortality - Annual growth rates, mortality analysis, GRM methodology - Volume Analysis - Merchantable volume, board feet, cubic feet calculations - Forest Area - Timberland area, forest type distributions, ownership analysis</p>"},{"location":"#fia-database-reference","title":"\ud83d\udcd6 FIA Database Reference","text":"<p>Comprehensive documentation of all FIA database tables and fields: - Database Overview - Schema, relationships, and key concepts - Survey &amp; Project Tables - Plot location and measurement metadata - Tree Tables - Individual tree measurements and derived attributes - Vegetation Tables - Understory and ground cover measurements - Down Woody Material - Coarse and fine woody debris measurements - Population Tables - Statistical estimation framework and strata</p>"},{"location":"#core-analysis-capabilities","title":"\ud83c\udfaf Core Analysis Capabilities","text":""},{"location":"#tree-level-analysis","title":"Tree-Level Analysis","text":"<pre><code># Species composition analysis\nspecies_comp = fia.species_composition(evalid=412101, unit=\"trees_per_acre\")\n\n# Diameter distribution\ndiameter_dist = fia.diameter_distribution(\n    evalid=412101,\n    species_code=131,  # Loblolly pine\n    diameter_classes=[5, 10, 15, 20, 25, 30]\n)\n</code></pre>"},{"location":"#area-level-analysis","title":"Area-Level Analysis","text":"<pre><code># Forest area by ownership\nownership_area = fia.area_by_ownership(evalid=412100)\n\n# Forest type analysis\nforest_types = fia.forest_types(\n    evalid=412100,\n    group_level=\"forest_type_group\"\n)\n</code></pre>"},{"location":"#volume-and-biomass","title":"Volume and Biomass","text":"<pre><code># Net cubic volume by species\nvolume = fia.volume_by_species(\n    evalid=412101,\n    volume_type=\"net_cubic_feet\",\n    minimum_diameter=5.0\n)\n\n# Carbon storage estimates\ncarbon = fia.carbon_storage(\n    evalid=412101,\n    components=[\"above_ground\", \"below_ground\", \"dead_wood\"]\n)\n</code></pre>"},{"location":"#growth-removal-and-mortality-grm","title":"Growth, Removal, and Mortality (GRM)","text":"<pre><code># Annual mortality by species\nmortality = fia.mortality_by_species(\n    evalid=132303,  # Georgia GRM evaluation\n    volume_type=\"cubic_feet\"\n)\n\n# Harvest removals analysis\nharvest = fia.harvest_removals(\n    evalid=452303,  # South Carolina GRM evaluation\n    grouping=\"species\"\n)\n</code></pre>"},{"location":"#advanced-features","title":"\ud83d\udd27 Advanced Features","text":""},{"location":"#evalidator-compatibility","title":"EVALIDator Compatibility","text":"<p>PyFIA implements the exact statistical methodology used by the USDA Forest Service's EVALIDator web application:</p> <pre><code># Exact EVALIDator translation\nevaluator_query = fia.evaluator_query(\n    query_type=\"tree_count\",\n    evalid=412101,\n    filters={\"status_code\": 1, \"condition_status\": 1},\n    exact_translation=True\n)\n</code></pre>"},{"location":"#ai-powered-query-assistant","title":"AI-Powered Query Assistant","text":"<pre><code># Natural language query interface\nresult = fia.ai_query(\n    \"What is the total volume of loblolly pine in South Carolina?\"\n)\n\n# Query optimization suggestions\noptimized = fia.optimize_query(my_query)\n</code></pre>"},{"location":"#custom-analysis","title":"Custom Analysis","text":"<pre><code># Build custom queries with the query builder\ncustom_query = (fia.query_builder()\n    .select_trees()\n    .filter_by_species([131, 121])  # Loblolly and longleaf pine\n    .filter_by_diameter(min_dia=5.0)\n    .group_by(\"species_code\")\n    .aggregate(\"volume\", \"sum\")\n    .build()\n)\n</code></pre>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>PyFIA is built on modern data engineering principles:</p> <ul> <li>DuckDB Engine: Column-oriented analytics database for fast aggregations</li> <li>Pandas Integration: Seamless integration with the Python data science ecosystem</li> <li>Modular Design: Pluggable components for different analysis types</li> <li>Type Safety: Full type hints for better development experience</li> <li>Async Support: Non-blocking operations for large datasets</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Please see our contribution guidelines for details on:</p> <ul> <li>Setting up the development environment</li> <li>Running tests and validation</li> <li>Code style and documentation standards</li> <li>Submitting pull requests</li> </ul>"},{"location":"#performance-benchmarks","title":"\ud83d\udcca Performance Benchmarks","text":"<p>PyFIA is optimized for large-scale forest analysis:</p> Operation Dataset Size PyFIA Time Traditional Time Speedup Tree Count 100M records 0.8s 45s 56x Volume Calculation 50M records 1.2s 28s 23x Biomass Analysis 75M records 2.1s 67s 32x Species Composition 100M records 1.5s 52s 35x"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":"<ul> <li>USDA Forest Service for the comprehensive FIA database and methodology</li> <li>DuckDB Team for the high-performance analytical database engine</li> <li>Forest Inventory Community for feedback and validation</li> </ul>"},{"location":"#support","title":"\ud83d\udcde Support","text":"<ul> <li>Documentation: https://pyfia.readthedocs.io</li> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> </ul> <p>PyFIA: Making forest inventory analysis fast, accurate, and accessible for the modern data science era.</p>"},{"location":"ARCHITECTURE_DIAGRAMS/","title":"pyFIA Architecture","text":""},{"location":"ARCHITECTURE_DIAGRAMS/#what-is-pyfia","title":"What is pyFIA?","text":"<p>pyFIA is a Python library for analyzing USDA Forest Inventory and Analysis (FIA) data. It provides: - Statistical estimation functions for forest metrics (area, volume, biomass, etc.) - Two usage paths: Direct Python API or Natural Language AI interface - High performance using DuckDB and Polars - Proper FIA methodology with EVALID-based statistical validity</p>"},{"location":"ARCHITECTURE_DIAGRAMS/#two-ways-to-use-pyfia","title":"Two Ways to Use pyFIA","text":"<pre><code>graph TB\n    subgraph \"User Entry Points\"\n        U1[Python Scripts/&lt;br/&gt;Notebooks]\n        U2[Command Line]\n    end\n\n    subgraph \"Usage Paths\"\n        Direct[Direct API Path&lt;br/&gt;Statistical Functions]\n        AI[AI Agent Path&lt;br/&gt;Natural Language]\n    end\n\n    U1 --&gt; Direct\n    U2 --&gt; Direct\n    U2 --&gt; AI\n\n    Direct --&gt; R1[Statistical Results&lt;br/&gt;DataFrames]\n    AI --&gt; R2[Formatted Results&lt;br/&gt;Tables &amp; Explanations]\n\n    style Direct fill:#2ecc71\n    style AI fill:#9b59b6</code></pre>"},{"location":"ARCHITECTURE_DIAGRAMS/#path-1-direct-api-green-path","title":"Path 1: Direct API (Green Path)","text":"<ul> <li>Import pyFIA functions directly</li> <li>Call estimation functions with parameters</li> <li>Get back Polars DataFrames with results</li> <li>Full control over analysis</li> </ul>"},{"location":"ARCHITECTURE_DIAGRAMS/#path-2-ai-agent-purple-path","title":"Path 2: AI Agent (Purple Path)","text":"<ul> <li>Ask questions in natural language</li> <li>Agent converts to appropriate queries</li> <li>Get formatted, explained results</li> <li>Interactive exploration</li> </ul>"},{"location":"ARCHITECTURE_DIAGRAMS/#core-architecture","title":"Core Architecture","text":"<pre><code>graph TB\n    %% Entry Points\n    subgraph \"Entry Layer\"\n        PY[Python API&lt;br/&gt;import pyfia]\n        CLI1[pyfia CLI&lt;br/&gt;Direct Functions]\n        CLI2[pyfia-ai CLI&lt;br/&gt;Natural Language]\n    end\n\n    %% Core Components\n    subgraph \"Core Layer\"\n        FIA[FIA Class&lt;br/&gt;Database Connection&lt;br/&gt;EVALID Management]\n        DR[Data Reader&lt;br/&gt;DuckDB Interface]\n    end\n\n    %% Processing\n    subgraph \"Processing Layer\"\n        EST[Estimation Functions&lt;br/&gt;area, volume, biomass&lt;br/&gt;tpa, mortality, growth]\n        FILT[Filters&lt;br/&gt;Domain, EVALID&lt;br/&gt;Grouping, Joins]\n        UTILS[Utilities&lt;br/&gt;Statistical Calculations&lt;br/&gt;Stratification]\n    end\n\n    %% AI Components\n    subgraph \"AI Layer\"\n        AGENT[FIA Agent&lt;br/&gt;Query Understanding]\n        TOOLS[Agent Tools&lt;br/&gt;SQL, Schema, Species]\n        FORMAT[Result Formatter&lt;br/&gt;Rich Output]\n    end\n\n    %% Data\n    subgraph \"Data Layer\"\n        DB[(DuckDB&lt;br/&gt;FIA Database)]\n    end\n\n    %% Direct Path\n    PY --&gt; FIA\n    CLI1 --&gt; FIA\n    FIA --&gt; EST\n    EST --&gt; FILT\n    EST --&gt; UTILS\n    FIA --&gt; DR\n    DR --&gt; DB\n\n    %% AI Path  \n    CLI2 --&gt; AGENT\n    AGENT --&gt; TOOLS\n    TOOLS --&gt; DR\n    AGENT --&gt; FORMAT\n\n    style FIA fill:#e74c3c\n    style EST fill:#2ecc71\n    style AGENT fill:#9b59b6\n    style DB fill:#34495e</code></pre>"},{"location":"ARCHITECTURE_DIAGRAMS/#data-flow","title":"Data Flow","text":""},{"location":"ARCHITECTURE_DIAGRAMS/#direct-api-flow","title":"Direct API Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant pyFIA\n    participant FIA Class\n    participant Estimator\n    participant Database\n\n    User-&gt;&gt;pyFIA: area(db, evalid=372301)\n    pyFIA-&gt;&gt;FIA Class: Get filtered data\n    FIA Class-&gt;&gt;Database: Query with EVALID\n    Database--&gt;&gt;FIA Class: Plot/Condition data\n    FIA Class--&gt;&gt;pyFIA: Filtered DataFrames\n    pyFIA-&gt;&gt;Estimator: Calculate estimates\n    Estimator--&gt;&gt;pyFIA: Results with SE\n    pyFIA--&gt;&gt;User: DataFrame with estimates</code></pre>"},{"location":"ARCHITECTURE_DIAGRAMS/#ai-agent-flow","title":"AI Agent Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Agent\n    participant Tools\n    participant Database\n    participant Formatter\n\n    User-&gt;&gt;Agent: \"How many oak trees in NC?\"\n    Agent-&gt;&gt;Agent: Understand query\n    Agent-&gt;&gt;Tools: find_species_codes(\"oak\")\n    Tools--&gt;&gt;Agent: Oak species codes\n    Agent-&gt;&gt;Tools: execute_query(SQL)\n    Tools-&gt;&gt;Database: Run query\n    Database--&gt;&gt;Tools: Raw results\n    Tools--&gt;&gt;Agent: Query results\n    Agent-&gt;&gt;Formatter: Format with context\n    Formatter--&gt;&gt;Agent: Rich formatted output\n    Agent--&gt;&gt;User: Explained results</code></pre>"},{"location":"ARCHITECTURE_DIAGRAMS/#key-components","title":"Key Components","text":""},{"location":"ARCHITECTURE_DIAGRAMS/#core-components","title":"Core Components","text":"Component Purpose Key Functions FIA Class Main interface to database <code>clipFIA()</code>, <code>readFIA()</code>, <code>findEvalid()</code> Data Reader Database abstraction Handles DuckDB connections and queries Settings Configuration management Database paths, default options"},{"location":"ARCHITECTURE_DIAGRAMS/#estimation-functions","title":"Estimation Functions","text":"Function Calculates Key Features <code>area()</code> Forest land area By forest type, ownership, size class <code>biomass()</code> Tree biomass Above/below ground, carbon content <code>volume()</code> Wood volume Net/gross, merch/sound, board feet <code>tpa()</code> Trees per acre By species, size, status <code>mortality()</code> Annual mortality Trees, volume, biomass <code>growth()</code> Annual growth Net growth accounting for mortality"},{"location":"ARCHITECTURE_DIAGRAMS/#filter-system","title":"Filter System","text":"Filter Type Purpose Example EVALID Statistical validity Only use data from one evaluation Domain Tree/area filtering \"DIA &gt;= 5\", \"OWNGRPCD == 10\" Grouping Result aggregation By species, size class, ownership Classification Tree categorization Live/dead, growing stock"},{"location":"ARCHITECTURE_DIAGRAMS/#ai-components","title":"AI Components","text":"Component Purpose Key Features Agent Natural language processing LangGraph ReAct pattern Tools Agent capabilities SQL execution, schema lookup Formatter Result presentation Rich tables, statistics, explanations Domain Knowledge FIA expertise Species codes, terminology"},{"location":"ARCHITECTURE_DIAGRAMS/#design-principles","title":"Design Principles","text":""},{"location":"ARCHITECTURE_DIAGRAMS/#1-statistical-validity-first","title":"1. Statistical Validity First","text":"<ul> <li>EVALID-based filtering ensures proper population estimates</li> <li>All estimators follow FIA statistical methodology</li> <li>Standard errors and confidence intervals included</li> </ul>"},{"location":"ARCHITECTURE_DIAGRAMS/#2-performance-optimized","title":"2. Performance Optimized","text":"<ul> <li>DuckDB for fast analytical queries</li> <li>Polars for efficient data manipulation</li> <li>Lazy evaluation where possible</li> </ul>"},{"location":"ARCHITECTURE_DIAGRAMS/#3-two-clear-paths","title":"3. Two Clear Paths","text":"<ul> <li>Direct API for programmatic control</li> <li>AI Agent for exploration and learning</li> <li>No mixing of concerns between paths</li> </ul>"},{"location":"ARCHITECTURE_DIAGRAMS/#4-modular-design","title":"4. Modular Design","text":"<ul> <li>Estimation functions are independent</li> <li>Filters can be composed</li> <li>Easy to add new estimators</li> </ul>"},{"location":"ARCHITECTURE_DIAGRAMS/#5-user-friendly","title":"5. User Friendly","text":"<ul> <li>Consistent function signatures</li> <li>Clear parameter names</li> <li>Rich documentation and examples</li> </ul>"},{"location":"ARCHITECTURE_DIAGRAMS/#file-organization","title":"File Organization","text":"<pre><code>src/pyfia/\n\u251c\u2500\u2500 core/           # Database connection, EVALID management\n\u251c\u2500\u2500 estimation/     # Statistical estimation functions\n\u251c\u2500\u2500 filters/        # Data filtering and processing\n\u251c\u2500\u2500 ai/            # AI agent components\n\u251c\u2500\u2500 cli/           # Command-line interfaces\n\u251c\u2500\u2500 database/      # Database utilities and schema\n\u251c\u2500\u2500 models/        # Data models (Pydantic)\n\u2514\u2500\u2500 locations/     # Geographic parsing utilities\n</code></pre>"},{"location":"ARCHITECTURE_DIAGRAMS/#key-concepts","title":"Key Concepts","text":""},{"location":"ARCHITECTURE_DIAGRAMS/#evalid-system","title":"EVALID System","text":"<p>The heart of FIA's statistical design: - Groups plots into valid populations - Ensures proper expansion factors - Links to specific time periods - Required for all population estimates</p>"},{"location":"ARCHITECTURE_DIAGRAMS/#stratification","title":"Stratification","text":"<p>FIA uses post-stratified estimation: 1. Plots assigned to strata 2. Strata have expansion factors 3. Estimates calculated by stratum 4. Combined for population totals</p>"},{"location":"ARCHITECTURE_DIAGRAMS/#dual-interface-design","title":"Dual Interface Design","text":"<ul> <li>Direct path: Maximum control, pure functions</li> <li>AI path: Natural language, guided exploration</li> <li>Clean separation prevents complexity</li> </ul> <p>This architecture provides a solid foundation for forest inventory analysis while remaining accessible to both programmers and domain experts.</p>"},{"location":"PRE_COMMIT_GUIDE/","title":"Pre-commit Quick Reference for pyFIA","text":""},{"location":"PRE_COMMIT_GUIDE/#essential-commands","title":"\ud83d\ude80 Essential Commands","text":"Command Purpose <code>uv run pyfia-setup-precommit</code> Install pre-commit hooks <code>uv run pre-commit run --all-files</code> Run all hooks on all files <code>uv run pre-commit run ruff</code> Run specific hook <code>git commit --no-verify</code> Skip hooks (emergency only!) <code>SKIP=mypy git commit</code> Skip specific hooks"},{"location":"PRE_COMMIT_GUIDE/#hook-categories","title":"\ud83d\udd27 Hook Categories","text":""},{"location":"PRE_COMMIT_GUIDE/#formatting-cleanup","title":"\ud83e\uddf9 Formatting &amp; Cleanup","text":"<ul> <li>ruff-format: Auto-formats Python code</li> <li>trailing-whitespace: Removes trailing spaces</li> <li>end-of-file-fixer: Adds missing newlines</li> <li>mixed-line-ending: Converts to LF line endings</li> </ul>"},{"location":"PRE_COMMIT_GUIDE/#linting-validation","title":"\ud83d\udd0d Linting &amp; Validation","text":"<ul> <li>ruff: Python linting with auto-fixes</li> <li>check-yaml/json/toml: Syntax validation</li> <li>check-merge-conflict: Detects merge markers</li> <li>check-case-conflict: Prevents case conflicts</li> </ul>"},{"location":"PRE_COMMIT_GUIDE/#type-checking","title":"\ud83c\udfaf Type Checking","text":"<ul> <li>mypy: Static type checking for Python</li> <li>Configured in <code>pyproject.toml</code></li> <li>Checks <code>pyfia/</code> directory only</li> </ul>"},{"location":"PRE_COMMIT_GUIDE/#security","title":"\ud83d\udee1\ufe0f Security","text":"<ul> <li>bandit: Security vulnerability scanner</li> <li>detect-secrets: Prevents credential commits</li> <li>detect-private-key: Blocks private keys</li> </ul>"},{"location":"PRE_COMMIT_GUIDE/#documentation","title":"\ud83d\udcdd Documentation","text":"<ul> <li>pydocstyle: Docstring convention checker</li> <li>check-docstring-first: Docstring placement</li> <li>prettier: Markdown/YAML/JSON formatting</li> </ul>"},{"location":"PRE_COMMIT_GUIDE/#quick-fixes","title":"\ud83d\udd25 Quick Fixes","text":"Error Type Fix Command Formatting <code>uv run ruff format pyfia/</code> Linting <code>uv run ruff check --fix pyfia/</code> Type errors <code>uv run mypy pyfia/specific_file.py</code> Large files Add to <code>.gitignore</code> or use Git LFS Docstrings Add <code>\"\"\"Description.\"\"\"</code> at top"},{"location":"PRE_COMMIT_GUIDE/#common-error-patterns","title":"\ud83d\udea8 Common Error Patterns","text":""},{"location":"PRE_COMMIT_GUIDE/#ruff-formatting","title":"Ruff Formatting","text":"<p><pre><code>Would reformat: pyfia/core/fia.py\n</code></pre> Fix: <code>uv run ruff format pyfia/core/fia.py</code></p>"},{"location":"PRE_COMMIT_GUIDE/#mypy-type-errors","title":"Mypy Type Errors","text":"<p><pre><code>error: Argument 1 to \"func\" has incompatible type \"str\"; expected \"int\"\n</code></pre> Fix: Update type annotations or fix the code</p>"},{"location":"PRE_COMMIT_GUIDE/#bandit-security","title":"Bandit Security","text":"<p><pre><code>B101 assert_used\n</code></pre> Fix: Replace <code>assert</code> with proper error handling</p>"},{"location":"PRE_COMMIT_GUIDE/#missing-docstring","title":"Missing Docstring","text":"<p><pre><code>D100 Missing docstring in public module\n</code></pre> Fix: Add module docstring at file top</p>"},{"location":"PRE_COMMIT_GUIDE/#configuration-files","title":"\u2699\ufe0f Configuration Files","text":"File Purpose <code>.pre-commit-config.yaml</code> Hook definitions and versions <code>pyproject.toml</code> Tool configs (ruff, mypy, pydocstyle) <code>.bandit</code> Security scan exclusions <code>.secrets.baseline</code> Known false positive secrets"},{"location":"PRE_COMMIT_GUIDE/#when-to-use-pre-commit","title":"\ud83c\udfaf When to Use Pre-commit","text":"<ol> <li>ALWAYS before commits - Catches issues early</li> <li>After major changes - Ensures consistency</li> <li>Before PR submission - Avoids CI failures</li> <li>Weekly maintenance - Run <code>autoupdate</code></li> </ol>"},{"location":"PRE_COMMIT_GUIDE/#advanced-usage","title":"\ud83d\udee0\ufe0f Advanced Usage","text":""},{"location":"PRE_COMMIT_GUIDE/#update-all-hooks","title":"Update All Hooks","text":"<pre><code>uv run pre-commit autoupdate\nuv run pre-commit run --all-files\n</code></pre>"},{"location":"PRE_COMMIT_GUIDE/#debug-specific-hook","title":"Debug Specific Hook","text":"<pre><code>uv run pre-commit run mypy --verbose --all-files\n</code></pre>"},{"location":"PRE_COMMIT_GUIDE/#performance-mode","title":"Performance Mode","text":"<pre><code># Skip slow hooks during development\nSKIP=mypy,bandit uv run pre-commit run --all-files\n</code></pre>"},{"location":"PRE_COMMIT_GUIDE/#ci-integration","title":"CI Integration","text":"<pre><code># Already configured in .github/workflows/\nname: pre-commit\non: [push, pull_request]\n</code></pre>"},{"location":"PRE_COMMIT_GUIDE/#hook-reference","title":"\ud83d\udccb Hook Reference","text":"Hook Auto-fix Speed Importance ruff-format \u2705 Fast High ruff \u2705 Fast High trailing-whitespace \u2705 Fast Medium mypy \u274c Slow High bandit \u274c Medium High detect-secrets \u274c Medium Critical prettier \u2705 Fast Low"},{"location":"PRE_COMMIT_GUIDE/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":"<pre><code># Reset everything\nuv run pre-commit clean\nuv run pre-commit uninstall\nuv run pre-commit install\n\n# Update baseline for secrets\nuv run detect-secrets scan --baseline .secrets.baseline\n\n# Check hook versions\nuv run pre-commit autoupdate --freeze\n</code></pre>"},{"location":"PROPERTY_TESTING_GUIDE/","title":"Property-Based Testing Guide for pyFIA","text":""},{"location":"PROPERTY_TESTING_GUIDE/#overview","title":"Overview","text":"<p>Property-based testing with Hypothesis helps us verify that our code satisfies certain properties across a wide range of inputs, not just specific test cases.</p>"},{"location":"PROPERTY_TESTING_GUIDE/#what-is-property-based-testing","title":"What is Property-Based Testing?","text":"<p>Instead of writing: <pre><code>def test_specific_case():\n    assert calculate_area([1, 2, 3]) == 6\n</code></pre></p> <p>We write: <pre><code>@given(values=st.lists(st.floats(min_value=0)))\ndef test_area_always_positive(values):\n    assert calculate_area(values) &gt;= 0\n</code></pre></p> <p>Hypothesis generates hundreds of test cases automatically!</p>"},{"location":"PROPERTY_TESTING_GUIDE/#key-properties-we-test","title":"Key Properties We Test","text":""},{"location":"PROPERTY_TESTING_GUIDE/#1-mathematical-invariants","title":"1. Mathematical Invariants","text":"<ul> <li>Variance is always non-negative</li> <li>CV = (SE / Estimate) \u00d7 100</li> <li>Proportions sum to \u2264 1</li> <li>Ratios preserve ordering</li> </ul>"},{"location":"PROPERTY_TESTING_GUIDE/#2-domain-constraints","title":"2. Domain Constraints","text":"<ul> <li>Forest area \u2264 Total area</li> <li>Tree counts are non-negative</li> <li>DBH values are positive</li> <li>Plot counts match expected ranges</li> </ul>"},{"location":"PROPERTY_TESTING_GUIDE/#3-statistical-properties","title":"3. Statistical Properties","text":"<ul> <li>Estimates are unbiased</li> <li>Variance formulas are correct</li> <li>Stratification reduces variance</li> <li>Confidence intervals contain true values</li> </ul>"},{"location":"PROPERTY_TESTING_GUIDE/#4-data-integrity","title":"4. Data Integrity","text":"<ul> <li>Joins don't increase row counts</li> <li>Filters reduce or maintain counts</li> <li>Grouping preserves totals</li> <li>Missing data is handled correctly</li> </ul>"},{"location":"PROPERTY_TESTING_GUIDE/#running-property-tests","title":"Running Property Tests","text":""},{"location":"PROPERTY_TESTING_GUIDE/#basic-usage","title":"Basic Usage","text":"<pre><code># Run all property tests\nuv run pytest tests/test_property_based.py -v\n\n# Run with more examples (slower but more thorough)\nuv run pytest tests/test_property_based.py --hypothesis-profile=ci\n\n# Run specific test\nuv run pytest tests/test_property_based.py::TestEstimationProperties::test_variance_non_negative -v\n</code></pre>"},{"location":"PROPERTY_TESTING_GUIDE/#hypothesis-profiles","title":"Hypothesis Profiles","text":"<ul> <li><code>dev</code>: 10 examples (fast, for development)</li> <li><code>ci</code>: 100 examples (for continuous integration)</li> <li><code>nightly</code>: 1000 examples (thorough testing)</li> </ul>"},{"location":"PROPERTY_TESTING_GUIDE/#debugging-failures","title":"Debugging Failures","text":"<p>When a test fails, Hypothesis provides: 1. The minimal failing example 2. Steps to reproduce 3. Shrunk input that still fails</p> <p>Example: <pre><code>Falsifying example: test_variance_non_negative(\n    n_plots=1,\n    values=[0.0],\n)\n</code></pre></p>"},{"location":"PROPERTY_TESTING_GUIDE/#writing-new-property-tests","title":"Writing New Property Tests","text":""},{"location":"PROPERTY_TESTING_GUIDE/#1-identify-properties","title":"1. Identify Properties","text":"<p>Ask: \"What should always be true?\" - Output constraints (non-negative, bounded) - Relationships (X \u2264 Y, sum = total) - Invariants (formulas, conservation laws)</p>"},{"location":"PROPERTY_TESTING_GUIDE/#2-create-custom-strategies","title":"2. Create Custom Strategies","text":"<pre><code>@st.composite\ndef plot_data_strategy(draw):\n    \"\"\"Generate realistic plot data.\"\"\"\n    n_plots = draw(st.integers(min_value=1, max_value=100))\n    return pl.DataFrame({\n        \"PLT_CN\": [f\"P{i:04d}\" for i in range(n_plots)],\n        \"INVYR\": draw(st.lists(\n            st.integers(2010, 2025),\n            min_size=n_plots,\n            max_size=n_plots\n        ))\n    })\n</code></pre>"},{"location":"PROPERTY_TESTING_GUIDE/#3-write-property-tests","title":"3. Write Property Tests","text":"<pre><code>@given(data=plot_data_strategy())\ndef test_property(data):\n    result = process_data(data)\n    # Assert property holds\n    assert property_check(result)\n</code></pre>"},{"location":"PROPERTY_TESTING_GUIDE/#4-handle-edge-cases","title":"4. Handle Edge Cases","text":"<pre><code>@given(values=st.lists(st.floats()))\ndef test_with_edge_cases(values):\n    assume(len(values) &gt; 0)  # Skip empty lists\n    assume(not any(math.isnan(v) for v in values))  # Skip NaN\n\n    result = calculate(values)\n    assert result &gt;= 0\n</code></pre>"},{"location":"PROPERTY_TESTING_GUIDE/#common-patterns","title":"Common Patterns","text":""},{"location":"PROPERTY_TESTING_GUIDE/#testing-numerical-stability","title":"Testing Numerical Stability","text":"<pre><code>@given(\n    small=st.floats(min_value=1e-10, max_value=1e-5),\n    large=st.floats(min_value=1e5, max_value=1e10)\n)\ndef test_numerical_stability(small, large):\n    # Should handle extreme values\n    result = calculate_ratio(large, small)\n    assert not math.isnan(result)\n    assert not math.isinf(result)\n</code></pre>"},{"location":"PROPERTY_TESTING_GUIDE/#testing-transformations","title":"Testing Transformations","text":"<pre><code>@given(df=dataframe_strategy())\ndef test_transformation_preserves_property(df):\n    original_sum = df[\"value\"].sum()\n    transformed = apply_transformation(df)\n    # Transformation should preserve sum\n    assert abs(transformed[\"value\"].sum() - original_sum) &lt; 1e-10\n</code></pre>"},{"location":"PROPERTY_TESTING_GUIDE/#testing-estimators","title":"Testing Estimators","text":"<pre><code>@given(\n    true_value=st.floats(min_value=0, max_value=1000),\n    n_samples=st.integers(min_value=10, max_value=1000)\n)\ndef test_estimator_unbiased(true_value, n_samples):\n    estimates = []\n    for _ in range(100):\n        sample = generate_sample(true_value, n_samples)\n        estimates.append(calculate_estimate(sample))\n\n    # Mean of estimates should be close to true value\n    assert abs(np.mean(estimates) - true_value) &lt; true_value * 0.1\n</code></pre>"},{"location":"PROPERTY_TESTING_GUIDE/#best-practices","title":"Best Practices","text":"<ol> <li>Start Simple: Test obvious properties first</li> <li>Use Realistic Data: Create domain-specific strategies</li> <li>Test Relationships: Not just individual values</li> <li>Consider Performance: Use <code>@settings(deadline=...)</code> for slow tests</li> <li>Document Properties: Explain why property should hold</li> </ol>"},{"location":"PROPERTY_TESTING_GUIDE/#integration-with-cicd","title":"Integration with CI/CD","text":"<pre><code># .github/workflows/test.yml\n- name: Run property tests\n  run: |\n    uv run pytest tests/test_property_based.py \\\n      --hypothesis-profile=ci \\\n      --hypothesis-show-statistics\n</code></pre>"},{"location":"PROPERTY_TESTING_GUIDE/#resources","title":"Resources","text":"<ul> <li>Hypothesis Documentation</li> <li>Property-Based Testing Guide</li> <li>Hypothesis Examples</li> </ul>"},{"location":"PYDANTIC_V2_GUIDE/","title":"Pydantic v2 Quick Reference for pyFIA","text":""},{"location":"PYDANTIC_V2_GUIDE/#quick-migration-checklist","title":"\ud83d\udd0d Quick Migration Checklist","text":""},{"location":"PYDANTIC_V2_GUIDE/#configuration-changes","title":"\u2705 Configuration Changes","text":"<pre><code># FIND: class Config:\n# REPLACE WITH: model_config = {}\n\n# v1 \u2192 v2 mapping\n\"allow_population_by_field_name\" \u2192 \"populate_by_name\"\n\"schema_extra\" \u2192 \"json_schema_extra\"\n\"orm_mode\" \u2192 \"from_attributes\"\n</code></pre>"},{"location":"PYDANTIC_V2_GUIDE/#import-updates","title":"\u2705 Import Updates","text":"<pre><code># OLD IMPORTS (v1)\nfrom pydantic import validator, root_validator\nfrom pydantic import BaseSettings  # v1\n\n# NEW IMPORTS (v2)\nfrom pydantic import field_validator, model_validator\nfrom pydantic_settings import BaseSettings  # v2\n</code></pre>"},{"location":"PYDANTIC_V2_GUIDE/#method-replacements","title":"\u2705 Method Replacements","text":"v1 Method v2 Method <code>.dict()</code> <code>.model_dump()</code> <code>.json()</code> <code>.model_dump_json()</code> <code>.copy()</code> <code>.model_copy()</code> <code>.parse_obj()</code> <code>.model_validate()</code> <code>.parse_raw()</code> <code>.model_validate_json()</code> <code>.schema()</code> <code>.model_json_schema()</code> <code>.__fields__</code> <code>.model_fields</code>"},{"location":"PYDANTIC_V2_GUIDE/#validator-patterns","title":"\u2705 Validator Patterns","text":"<pre><code># v1 PATTERN\n@validator('field_name')\ndef validate_field(cls, v):\n    return v\n\n# v2 PATTERN\n@field_validator('field_name')\n@classmethod\ndef validate_field(cls, v):\n    return v\n</code></pre>"},{"location":"PYDANTIC_V2_GUIDE/#common-pyfia-patterns","title":"\ud83c\udfaf Common pyFIA Patterns","text":""},{"location":"PYDANTIC_V2_GUIDE/#polars-dataframe-models","title":"Polars DataFrame Models","text":"<pre><code>class DataFrameModel(BaseModel):\n    model_config = {\"arbitrary_types_allowed\": True}\n\n    df: pl.DataFrame\n    name: str\n\n    @field_validator('df')\n    @classmethod\n    def validate_dataframe(cls, v):\n        if not isinstance(v, pl.DataFrame):\n            raise ValueError(\"Must be a Polars DataFrame\")\n        return v\n</code></pre>"},{"location":"PYDANTIC_V2_GUIDE/#settings-pattern","title":"Settings Pattern","text":"<pre><code>from pydantic_settings import BaseSettings\n\nclass FIASettings(BaseSettings):\n    model_config = {\n        \"env_prefix\": \"PYFIA_\",\n        \"env_file\": \".env\",\n        \"validate_assignment\": True,\n    }\n\n    database_path: str = \"fia.duckdb\"\n    api_key: Optional[str] = None\n</code></pre>"},{"location":"PYDANTIC_V2_GUIDE/#enum-models","title":"Enum Models","text":"<pre><code>from enum import Enum\n\nclass EvalType(str, Enum):\n    VOL = \"VOL\"\n    GRM = \"GRM\"\n\nclass EvalModel(BaseModel):\n    eval_type: EvalType = EvalType.VOL\n    evalid: str = Field(..., pattern=r\"^\\d{6}$\")\n</code></pre>"},{"location":"PYDANTIC_V2_GUIDE/#search-patterns-for-migration","title":"\ud83d\udd27 Search Patterns for Migration","text":""},{"location":"PYDANTIC_V2_GUIDE/#find-old-validators","title":"Find Old Validators","text":"<pre><code>@validator\\(['\"]?\\w+['\"]?\\)\n</code></pre>"},{"location":"PYDANTIC_V2_GUIDE/#find-old-config-classes","title":"Find Old Config Classes","text":"<pre><code>class\\s+Config:\n</code></pre>"},{"location":"PYDANTIC_V2_GUIDE/#find-old-methods","title":"Find Old Methods","text":"<pre><code>\\.dict\\(\\)|\\.json\\(\\)|\\.parse_obj\\(|\\.parse_raw\\(|\\.copy\\(\n</code></pre>"},{"location":"PYDANTIC_V2_GUIDE/#find-old-imports","title":"Find Old Imports","text":"<pre><code>from pydantic import.*validator|from pydantic import BaseSettings\n</code></pre>"},{"location":"PYDANTIC_V2_GUIDE/#performance-tips","title":"\u26a1 Performance Tips","text":"<ol> <li>Use <code>model_validate</code> instead of constructors for untrusted data</li> <li>Leverage <code>exclude_unset=True</code> for partial updates</li> <li>Use <code>mode='json'</code> for JSON-compatible output</li> <li>Prefer <code>computed_field</code> over properties for derived values</li> </ol>"},{"location":"PYDANTIC_V2_GUIDE/#common-pitfalls","title":"\ud83d\udea8 Common Pitfalls","text":"<ol> <li>Missing <code>@classmethod</code> on validators - Always required in v2</li> <li>Using <code>values</code> dict in validators - No longer available, validate individual fields</li> <li>Forgetting to update imports - <code>BaseSettings</code> moved to <code>pydantic_settings</code></li> <li>Using <code>__fields__</code> - Replace with <code>.model_fields</code></li> </ol>"},{"location":"PYDANTIC_V2_GUIDE/#verification-commands","title":"\ud83d\udccb Verification Commands","text":"<pre><code># Check for v1 patterns\ngrep -r \"@validator\" pyfia/\ngrep -r \"class Config:\" pyfia/\ngrep -r \"\\.dict()\" pyfia/\ngrep -r \"from pydantic import.*BaseSettings\" pyfia/\n\n# Run type checking\nuv run mypy pyfia/\n\n# Run tests\nuv run pytest -xvs\n</code></pre>"},{"location":"tags/","title":"Tags","text":"<p>This page lists all tags used throughout the PyFIA documentation.</p> <p>[TAGS]</p>"},{"location":"ai_agent/","title":"PyFIA AI Agent","text":"<p>Welcome to the PyFIA AI Agent documentation! The AI Agent provides a natural language interface for querying Forest Inventory Analysis (FIA) databases, making complex forest data analysis accessible to everyone.</p>"},{"location":"ai_agent/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"ai_agent/#installation","title":"Installation","text":"<pre><code># Install pyFIA with AI agent support\npip install pyfia[langchain]\n\n# Or install all features\npip install pyfia[all]\n</code></pre>"},{"location":"ai_agent/#set-up-openai-api-key","title":"Set up OpenAI API Key","text":"<pre><code>export OPENAI_API_KEY=\"your-api-key-here\"\n</code></pre>"},{"location":"ai_agent/#basic-usage","title":"Basic Usage","text":"Command LinePython API <pre><code># Start the AI assistant\npyfia-ai path/to/database.duckdb\n\n# Ask questions in natural language\nfia-ai&gt; How many oak trees are in California?\nfia-ai&gt; What's the total forest area by ownership type?\nfia-ai&gt; Show me biomass trends over the last decade\n</code></pre> <pre><code>from pyfia.ai.agent import FIAAgent\n\n# Initialize the agent\nagent = FIAAgent(\"path/to/database.duckdb\")\n\n# Ask questions\nresult = agent.query(\"How many live trees are in Oregon?\")\nprint(result)\n</code></pre>"},{"location":"ai_agent/#key-features","title":"\ud83c\udf1f Key Features","text":""},{"location":"ai_agent/#natural-language-understanding","title":"Natural Language Understanding","text":"<ul> <li>Ask questions in plain English</li> <li>No SQL knowledge required</li> <li>Intelligent interpretation of forest terminology</li> </ul>"},{"location":"ai_agent/#domain-expertise","title":"Domain Expertise","text":"<ul> <li>Deep understanding of FIA data structures</li> <li>Knows about species codes, forest types, and measurements</li> <li>Handles complex statistical queries correctly</li> </ul>"},{"location":"ai_agent/#interactive-experience","title":"Interactive Experience","text":"<ul> <li>Beautiful terminal interface with Rich formatting</li> <li>Conversation memory for follow-up questions</li> <li>Export results in multiple formats</li> </ul>"},{"location":"ai_agent/#safety-validation","title":"Safety &amp; Validation","text":"<ul> <li>Read-only database access</li> <li>Query validation before execution</li> <li>Helpful error messages and suggestions</li> </ul>"},{"location":"ai_agent/#what-you-can-do","title":"\ud83d\udcda What You Can Do","text":""},{"location":"ai_agent/#basic-queries","title":"Basic Queries","text":"<ul> <li>Count trees by species, size, or location</li> <li>Calculate forest area by various attributes</li> <li>Analyze volume and biomass estimates</li> <li>Track mortality and growth rates</li> </ul>"},{"location":"ai_agent/#advanced-analysis","title":"Advanced Analysis","text":"<ul> <li>Compare data across time periods</li> <li>Aggregate by custom groupings</li> <li>Filter by complex conditions</li> <li>Generate statistical summaries</li> </ul>"},{"location":"ai_agent/#examples","title":"Examples","text":"<pre><code># Species composition\nfia-ai&gt; What are the top 10 tree species by volume in the Pacific Northwest?\n\n# Temporal analysis\nfia-ai&gt; How has oak forest area changed in Texas between 2010 and 2020?\n\n# Spatial queries\nfia-ai&gt; Show me counties with the highest biomass density in Colorado\n\n# Complex filtering\nfia-ai&gt; Find all plots with large diameter Douglas fir on public land\n</code></pre>"},{"location":"ai_agent/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<ul> <li>User Guide - Comprehensive guide to all features</li> <li>Examples - Real-world usage scenarios</li> <li>Troubleshooting - Common issues and solutions</li> <li>Developer Guide - Extend and customize the agent</li> </ul>"},{"location":"ai_agent/#tips-for-success","title":"\ud83d\udca1 Tips for Success","text":"<ol> <li>Be Specific: Include location, time period, and measurement type</li> <li>Use Forest Terms: The agent understands DBH, basal area, site index, etc.</li> <li>Ask Follow-ups: Build on previous queries for deeper analysis</li> <li>Check EVALIDs: Use <code>evalid</code> command to see available evaluations</li> </ol>"},{"location":"ai_agent/#getting-help","title":"\ud83c\udd98 Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Review Common Examples</li> <li>Use the <code>help</code> command in the CLI</li> <li>Report issues on GitHub</li> </ol> <p>Ready to explore forest data with AI? Start with <code>pyfia-ai</code> and ask your first question!</p>"},{"location":"ai_agent/ARCHITECTURE/","title":"AI Agent Architecture","text":"<p>This document describes the technical architecture of the PyFIA AI Agent system.</p>"},{"location":"ai_agent/ARCHITECTURE/#system-overview","title":"System Overview","text":"<p>The AI Agent provides a natural language interface to the FIA database through a modern LangGraph-based architecture.</p> <pre><code>graph TB\n    subgraph \"User Interface\"\n        CLI[AI CLI&lt;br/&gt;ai_interface.py]\n        API[Python API]\n    end\n\n    subgraph \"AI Agent Layer\"\n        Agent[FIAAgent&lt;br/&gt;agent.py&lt;br/&gt;~1163 lines]\n        Tools[Tool Functions&lt;br/&gt;6 specialized tools]\n        Memory[Conversation Memory&lt;br/&gt;SQLite checkpointer]\n    end\n\n    subgraph \"Supporting Components\"\n        DK[Domain Knowledge&lt;br/&gt;domain_knowledge.py&lt;br/&gt;~547 lines]\n        RF[Result Formatter&lt;br/&gt;result_formatter.py&lt;br/&gt;~1205 lines]\n        QI[Query Interface&lt;br/&gt;query_interface.py&lt;br/&gt;~250 lines]\n    end\n\n    subgraph \"External Services\"\n        LLM[OpenAI GPT-4o]\n        DB[(DuckDB Database)]\n    end\n\n    CLI --&gt; Agent\n    API --&gt; Agent\n    Agent --&gt; Tools\n    Agent --&gt; Memory\n    Agent --&gt; LLM\n    Tools --&gt; DK\n    Tools --&gt; QI\n    Tools --&gt; RF\n    QI --&gt; DB\n\n    style Agent fill:#9b59b6,stroke:#fff,stroke-width:2px,color:#fff\n    style LLM fill:#4a90e2,stroke:#fff,stroke-width:2px,color:#fff\n    style DB fill:#34495e,stroke:#fff,stroke-width:2px,color:#fff</code></pre>"},{"location":"ai_agent/ARCHITECTURE/#core-components","title":"Core Components","text":""},{"location":"ai_agent/ARCHITECTURE/#1-fiaagent-agentpy","title":"1. FIAAgent (agent.py)","text":"<p>The main agent class using LangGraph's ReAct pattern:</p> <pre><code>class FIAAgent:\n    \"\"\"\n    Modern AI agent for FIA natural language queries.\n    - Uses create_react_agent from LangGraph\n    - Automatic tool selection\n    - Built-in conversation memory\n    - Human-in-the-loop support\n    \"\"\"\n</code></pre> <p>Key Features: - ReAct Pattern: Reasoning and Acting in interleaved steps - Tool Selection: LLM automatically chooses appropriate tools - Memory Management: Persistent conversation history - Error Recovery: Graceful handling of failures</p>"},{"location":"ai_agent/ARCHITECTURE/#2-tool-functions","title":"2. Tool Functions","text":"<p>Six specialized tools provide the agent's capabilities:</p> Tool Purpose Returns <code>execute_fia_query</code> Run SQL queries safely Query results as formatted string <code>get_database_schema</code> Retrieve table schemas Schema information <code>get_evalid_info</code> Get evaluation metadata EVALID details and stats <code>find_species_codes</code> Resolve species names Species codes and names <code>get_state_codes</code> State code lookups State names and codes <code>count_trees_by_criteria</code> Optimized tree counting Tree count with filters"},{"location":"ai_agent/ARCHITECTURE/#3-domain-knowledge-domain_knowledgepy","title":"3. Domain Knowledge (domain_knowledge.py)","text":"<p>Provides FIA expertise to the agent:</p> <pre><code># Core knowledge functions\nget_fia_concepts()          # FIA terminology\nget_common_species()        # Species mappings\nget_measurement_units()     # Unit definitions\nvalidate_domain_term()      # Term validation\n</code></pre>"},{"location":"ai_agent/ARCHITECTURE/#4-result-formatter-result_formatterpy","title":"4. Result Formatter (result_formatter.py)","text":"<p>Rich terminal output with statistical context:</p> <pre><code>class FIAResultFormatter:\n    \"\"\"\n    Formats query results with:\n    - Statistical precision (SE, CI)\n    - Reliability ratings\n    - Rich tables and panels\n    - Export capabilities\n    \"\"\"\n</code></pre>"},{"location":"ai_agent/ARCHITECTURE/#5-query-interface-query_interfacepy","title":"5. Query Interface (query_interface.py)","text":"<p>Direct SQL execution with safety:</p> <pre><code>class DuckDBQueryInterface:\n    \"\"\"\n    Safe database interaction:\n    - Read-only access\n    - Query validation\n    - Result limiting\n    - Performance monitoring\n    \"\"\"\n</code></pre>"},{"location":"ai_agent/ARCHITECTURE/#data-flow","title":"Data Flow","text":""},{"location":"ai_agent/ARCHITECTURE/#query-processing-pipeline","title":"Query Processing Pipeline","text":"<pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Agent\n    participant LLM\n    participant Tools\n    participant DB\n    participant Formatter\n\n    User-&gt;&gt;CLI: Natural language query\n    CLI-&gt;&gt;Agent: Process query\n    Agent-&gt;&gt;LLM: Analyze with system prompt\n    LLM-&gt;&gt;Agent: Tool selection + parameters\n    Agent-&gt;&gt;Tools: Execute tool(s)\n    Tools-&gt;&gt;DB: Database query\n    DB--&gt;&gt;Tools: Raw results\n    Tools--&gt;&gt;Agent: Processed data\n    Agent-&gt;&gt;Formatter: Format results\n    Formatter--&gt;&gt;Agent: Rich output\n    Agent--&gt;&gt;CLI: Final response\n    CLI--&gt;&gt;User: Display results</code></pre>"},{"location":"ai_agent/ARCHITECTURE/#memory-flow","title":"Memory Flow","text":"<pre><code>graph LR\n    subgraph \"Conversation Memory\"\n        Input[User Input] --&gt; Memory[(SQLite DB)]\n        Memory --&gt; Context[Conversation Context]\n        Context --&gt; Agent[AI Agent]\n        Agent --&gt; Memory\n    end\n\n    subgraph \"Persistence\"\n        Memory --&gt; Checkpoint[Checkpoint Files]\n        Checkpoint --&gt; Resume[Resume Session]\n    end</code></pre>"},{"location":"ai_agent/ARCHITECTURE/#langgraph-integration","title":"LangGraph Integration","text":""},{"location":"ai_agent/ARCHITECTURE/#react-agent-pattern","title":"ReAct Agent Pattern","text":"<p>The agent uses LangGraph's modern ReAct implementation:</p> <pre><code>from langgraph.prebuilt import create_react_agent\n\nagent_executor = create_react_agent(\n    model=llm,\n    tools=tools,\n    state_modifier=system_message,\n    checkpointer=checkpointer\n)\n</code></pre>"},{"location":"ai_agent/ARCHITECTURE/#state-management","title":"State Management","text":"<p>LangGraph manages agent state automatically:</p> <ol> <li>Messages: Full conversation history</li> <li>Tool Calls: Track what tools were used</li> <li>Intermediate Steps: Reasoning process</li> <li>Final Answer: Formatted response</li> </ol>"},{"location":"ai_agent/ARCHITECTURE/#tool-execution","title":"Tool Execution","text":"<p>Tools are automatically executed by the framework:</p> <pre><code>graph TD\n    A[User Query] --&gt; B{Agent Decision}\n    B --&gt;|Need Schema| C[get_database_schema]\n    B --&gt;|Need Species| D[find_species_codes]\n    B --&gt;|Need Query| E[execute_fia_query]\n    B --&gt;|Need EVALID| F[get_evalid_info]\n\n    C --&gt; G[Combine Results]\n    D --&gt; G\n    E --&gt; G\n    F --&gt; G\n\n    G --&gt; H[Final Answer]</code></pre>"},{"location":"ai_agent/ARCHITECTURE/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"ai_agent/ARCHITECTURE/#response-times","title":"Response Times","text":"Operation Typical Time Notes Simple query 2-5 seconds Single tool call Complex query 5-15 seconds Multiple tools Large results 10-30 seconds Formatting overhead First query +2 seconds Model loading"},{"location":"ai_agent/ARCHITECTURE/#resource-usage","title":"Resource Usage","text":"<ul> <li>Memory: ~500MB base + query results</li> <li>CPU: Minimal (mostly waiting for API)</li> <li>Network: OpenAI API calls only</li> <li>Disk: SQLite checkpoints (~10KB/conversation)</li> </ul>"},{"location":"ai_agent/ARCHITECTURE/#optimization-strategies","title":"Optimization Strategies","text":"<ol> <li>Query Caching: LRU cache for repeated queries</li> <li>Tool Batching: Execute independent tools in parallel</li> <li>Result Limiting: Automatic truncation of large results</li> <li>Connection Pooling: Reuse database connections</li> </ol>"},{"location":"ai_agent/ARCHITECTURE/#security-model","title":"Security Model","text":""},{"location":"ai_agent/ARCHITECTURE/#access-control","title":"Access Control","text":"<pre><code>graph TB\n    subgraph \"Security Layers\"\n        A[Input Validation] --&gt; B[Query Sanitization]\n        B --&gt; C[Read-Only DB Access]\n        C --&gt; D[Result Filtering]\n        D --&gt; E[Output Sanitization]\n    end\n\n    subgraph \"Protections\"\n        F[SQL Injection Prevention]\n        G[Rate Limiting]\n        H[API Key Management]\n        I[Audit Logging]\n    end</code></pre>"},{"location":"ai_agent/ARCHITECTURE/#safety-features","title":"Safety Features","text":"<ol> <li>Read-Only Access: Database opened in read-only mode</li> <li>Query Validation: All SQL validated before execution</li> <li>Input Sanitization: Remove dangerous patterns</li> <li>Result Limits: Prevent overwhelming outputs</li> <li>No System Access: Tools cannot execute system commands</li> </ol>"},{"location":"ai_agent/ARCHITECTURE/#extensibility","title":"Extensibility","text":""},{"location":"ai_agent/ARCHITECTURE/#adding-new-tools","title":"Adding New Tools","text":"<p>Tools are simple Python functions:</p> <pre><code>def my_custom_tool(param1: str, param2: int) -&gt; str:\n    \"\"\"\n    Tool description for the LLM.\n\n    Args:\n        param1: First parameter\n        param2: Second parameter\n\n    Returns:\n        String result for the agent\n    \"\"\"\n    # Implementation\n    return formatted_result\n\n# Add to tools list\ntools = [...existing_tools, my_custom_tool]\n</code></pre>"},{"location":"ai_agent/ARCHITECTURE/#custom-formatters","title":"Custom Formatters","text":"<p>Extend result formatting:</p> <pre><code>class CustomFormatter(FIAResultFormatter):\n    def format_special_results(self, data):\n        # Custom formatting logic\n        return formatted_output\n</code></pre>"},{"location":"ai_agent/ARCHITECTURE/#integration-points","title":"Integration Points","text":"<ol> <li>Custom LLMs: Swap OpenAI for other providers</li> <li>Alternative Storage: Replace SQLite checkpointer</li> <li>External Tools: Add web search, calculations, etc.</li> <li>Custom Prompts: Modify system prompts for behavior</li> </ol>"},{"location":"ai_agent/ARCHITECTURE/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"ai_agent/ARCHITECTURE/#container-deployment","title":"Container Deployment","text":"<pre><code>services:\n  fia-agent:\n    image: pyfia-agent:latest\n    environment:\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n    volumes:\n      - ./data:/data\n      - ./checkpoints:/checkpoints\n    ports:\n      - \"8000:8000\"\n</code></pre>"},{"location":"ai_agent/ARCHITECTURE/#scaling-considerations","title":"Scaling Considerations","text":"<ol> <li>Horizontal Scaling: Each agent instance is independent</li> <li>Load Balancing: Route queries to available instances</li> <li>Shared Storage: Centralized checkpoint storage</li> <li>Rate Limiting: Implement at API gateway level</li> </ol>"},{"location":"ai_agent/ARCHITECTURE/#monitoring","title":"Monitoring","text":"<p>Key metrics to track:</p> <ul> <li>Query volume and patterns</li> <li>Response times by query type</li> <li>Tool usage statistics</li> <li>Error rates and types</li> <li>Token usage (API costs)</li> </ul>"},{"location":"ai_agent/ARCHITECTURE/#future-architecture","title":"Future Architecture","text":""},{"location":"ai_agent/ARCHITECTURE/#planned-enhancements","title":"Planned Enhancements","text":"<ol> <li>Streaming Responses: Real-time output as processing occurs</li> <li>Multi-Modal Input: Support for images/charts</li> <li>Async Processing: Non-blocking query execution</li> <li>Plugin System: Dynamic tool loading</li> <li>Federation: Query multiple databases</li> </ol>"},{"location":"ai_agent/ARCHITECTURE/#research-directions","title":"Research Directions","text":"<ul> <li>Local LLMs: On-premise deployment options</li> <li>Fine-Tuning: Domain-specific model training</li> <li>Query Planning: Multi-step query optimization</li> <li>Caching Layer: Intelligent result caching</li> </ul>"},{"location":"ai_agent/ARCHITECTURE/#summary","title":"Summary","text":"<p>The PyFIA AI Agent architecture provides:</p> <ul> <li>Modern AI Stack: Latest LangGraph patterns</li> <li>Clean Separation: Tools, knowledge, and formatting</li> <li>Extensible Design: Easy to add capabilities</li> <li>Production Ready: Security, monitoring, scaling</li> <li>User Friendly: Natural language with rich output</li> </ul> <p>The architecture balances sophistication with simplicity, making forest data analysis accessible while maintaining scientific rigor.</p>"},{"location":"ai_agent/DEVELOPER_GUIDE/","title":"PyFIA AI Agent Developer Guide","text":"<p>This guide covers the technical implementation details of the PyFIA AI Agent for developers who want to understand, extend, or customize the system.</p>"},{"location":"ai_agent/DEVELOPER_GUIDE/#architecture-overview","title":"Architecture Overview","text":""},{"location":"ai_agent/DEVELOPER_GUIDE/#system-components","title":"System Components","text":"<pre><code>graph TB\n    subgraph \"User Interface Layer\"\n        CLI[CLI Interface&lt;br/&gt;ai_interface.py]\n        API[Python API&lt;br/&gt;Direct Import]\n    end\n\n    subgraph \"AI Agent Core\"\n        Agent[FIAAgent&lt;br/&gt;agent.py]\n        Tools[Tool Functions]\n        Memory[Conversation Memory]\n    end\n\n    subgraph \"Supporting Modules\"\n        DK[Domain Knowledge&lt;br/&gt;domain_knowledge.py]\n        RF[Result Formatter&lt;br/&gt;result_formatter.py]\n        QI[Query Interface&lt;br/&gt;query_interface.py]\n    end\n\n    subgraph \"External Services\"\n        LLM[OpenAI GPT-4]\n        DB[(DuckDB)]\n    end\n\n    CLI --&gt; Agent\n    API --&gt; Agent\n    Agent --&gt; Tools\n    Agent --&gt; Memory\n    Agent --&gt; LLM\n    Tools --&gt; DK\n    Tools --&gt; QI\n    QI --&gt; DB\n    Agent --&gt; RF</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#core-design-principles","title":"Core Design Principles","text":"<ol> <li>ReAct Pattern: Uses LangGraph's create_react_agent for reasoning and acting</li> <li>Tool-Based: All capabilities exposed as discrete tool functions</li> <li>Stateless Tools: Each tool is independent and stateless</li> <li>Memory Management: Built-in conversation persistence</li> <li>Type Safety: Full type hints throughout the codebase</li> </ol>"},{"location":"ai_agent/DEVELOPER_GUIDE/#implementation-details","title":"Implementation Details","text":""},{"location":"ai_agent/DEVELOPER_GUIDE/#fiaagent-class","title":"FIAAgent Class","text":"<p>Located in <code>src/pyfia/ai/agent.py</code>:</p> <pre><code>class FIAAgent:\n    \"\"\"\n    Main AI agent for natural language FIA queries.\n    Uses LangGraph's create_react_agent pattern.\n    \"\"\"\n\n    def __init__(\n        self,\n        db_path: str,\n        api_key: Optional[str] = None,\n        model_name: str = \"gpt-4o\",\n        temperature: float = 0,\n        verbose: bool = False,\n        enable_human_approval: bool = False,\n        checkpoint_dir: Optional[str] = None\n    ):\n        \"\"\"Initialize the FIA agent with database and AI configuration.\"\"\"\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#tool-development","title":"Tool Development","text":""},{"location":"ai_agent/DEVELOPER_GUIDE/#tool-structure","title":"Tool Structure","text":"<p>Each tool follows this pattern:</p> <pre><code>def tool_name(parameter1: str, parameter2: Optional[int] = None) -&gt; str:\n    \"\"\"\n    Clear, concise description of what this tool does.\n\n    Args:\n        parameter1: Description of first parameter\n        parameter2: Optional parameter with default\n\n    Returns:\n        Formatted string result for the LLM\n    \"\"\"\n    try:\n        # Tool implementation\n        result = perform_operation(parameter1, parameter2)\n\n        # Format result for LLM consumption\n        return format_result(result)\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#available-tools","title":"Available Tools","text":"<ol> <li>execute_fia_query: Execute SQL queries safely</li> <li>get_database_schema: Retrieve table schemas</li> <li>get_evalid_info: Get evaluation metadata</li> <li>find_species_codes: Species name resolution</li> <li>get_state_codes: State code lookups</li> <li>count_trees_by_criteria: Optimized tree counting</li> </ol>"},{"location":"ai_agent/DEVELOPER_GUIDE/#adding-new-tools","title":"Adding New Tools","text":"<ol> <li>Define the function in <code>agent.py</code>:</li> </ol> <pre><code>def calculate_growth_rate(\n    evalid1: int,\n    evalid2: int,\n    species_code: Optional[int] = None\n) -&gt; str:\n    \"\"\"\n    Calculate growth rate between two evaluations.\n\n    Args:\n        evalid1: First evaluation ID\n        evalid2: Second evaluation ID  \n        species_code: Optional species filter\n\n    Returns:\n        Formatted growth rate analysis\n    \"\"\"\n    # Implementation\n</code></pre> <ol> <li>Add to tools list in <code>_create_agent()</code>:</li> </ol> <pre><code>tools = [\n    execute_fia_query,\n    get_database_schema,\n    # ... other tools ...\n    calculate_growth_rate,  # Add new tool\n]\n</code></pre> <ol> <li>Test the tool:</li> </ol> <pre><code>def test_growth_rate_tool():\n    agent = FIAAgent(\"test.duckdb\")\n    result = agent.query(\n        \"Calculate growth rate between evaluations 372201 and 372301\"\n    )\n    assert \"growth rate\" in result.lower()\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#query-processing-pipeline","title":"Query Processing Pipeline","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Agent\n    participant LLM\n    participant Tools\n    participant DB\n\n    User-&gt;&gt;Agent: Natural language query\n    Agent-&gt;&gt;LLM: Process with context\n    LLM-&gt;&gt;Agent: Decide tool + params\n    Agent-&gt;&gt;Tools: Execute tool\n    Tools-&gt;&gt;DB: Query database\n    DB--&gt;&gt;Tools: Raw results\n    Tools--&gt;&gt;Agent: Formatted results\n    Agent-&gt;&gt;LLM: Process results\n    LLM-&gt;&gt;Agent: Final response\n    Agent-&gt;&gt;User: Formatted answer</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#memory-and-state-management","title":"Memory and State Management","text":""},{"location":"ai_agent/DEVELOPER_GUIDE/#conversation-memory","title":"Conversation Memory","text":"<p>The agent uses LangGraph's built-in memory:</p> <pre><code># Memory is automatically managed by create_react_agent\nagent_executor = create_react_agent(\n    llm, \n    tools,\n    state_modifier=system_message,\n    checkpointer=checkpointer  # Enables persistence\n)\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#checkpointing","title":"Checkpointing","text":"<p>Enable conversation persistence:</p> <pre><code>from langgraph.checkpoint.sqlite import SqliteSaver\n\n# Create checkpoint directory\ncheckpoint_dir = Path(\"./checkpoints\")\ncheckpoint_dir.mkdir(exist_ok=True)\n\n# Initialize checkpointer\ncheckpointer = SqliteSaver.from_conn_string(\n    str(checkpoint_dir / \"checkpoints.db\")\n)\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#result-formatting","title":"Result Formatting","text":"<p>The <code>result_formatter.py</code> module provides rich formatting:</p> <pre><code>from pyfia.ai.result_formatter import FIAResultFormatter\n\nformatter = FIAResultFormatter(\n    confidence_level=0.95,\n    include_emojis=True,\n    use_rich=True\n)\n\nformatted = formatter.format_results(\n    df=results_dataframe,\n    query_info={\n        \"query_type\": \"tree_count\",\n        \"filters\": {\"status\": \"live\"},\n        \"evalid\": 372301\n    }\n)\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#domain-knowledge-integration","title":"Domain Knowledge Integration","text":"<p>The <code>domain_knowledge.py</code> module provides FIA expertise:</p> <pre><code>from pyfia.ai.domain_knowledge import (\n    get_fia_concepts,\n    get_common_species,\n    get_measurement_units,\n    validate_domain_term\n)\n\n# Use in system prompts\nconcepts = get_fia_concepts()\nsystem_prompt = f\"\"\"\nYou are an expert in Forest Inventory Analysis.\nKey concepts you understand: {concepts}\n\"\"\"\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#extension-points","title":"Extension Points","text":""},{"location":"ai_agent/DEVELOPER_GUIDE/#custom-tools","title":"Custom Tools","text":"<p>Create specialized tools for your use case:</p> <pre><code># Custom tool for specific analysis\ndef analyze_fire_risk(\n    state_code: int,\n    min_biomass: float = 50.0\n) -&gt; str:\n    \"\"\"Analyze fire risk based on biomass density.\"\"\"\n    # Custom implementation\n\n# Add to agent\nagent = FIAAgent(\"database.duckdb\")\nagent.tools.append(analyze_fire_risk)\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#custom-formatters","title":"Custom Formatters","text":"<p>Extend result formatting:</p> <pre><code>class CustomFormatter(FIAResultFormatter):\n    def format_spatial_results(self, gdf):\n        \"\"\"Format GeoPandas results.\"\"\"\n        # Custom spatial formatting\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#integration-patterns","title":"Integration Patterns","text":""},{"location":"ai_agent/DEVELOPER_GUIDE/#batch-processing","title":"Batch Processing","text":"<pre><code>class BatchFIAAgent(FIAAgent):\n    def batch_query(self, queries: List[str]) -&gt; List[str]:\n        \"\"\"Process multiple queries efficiently.\"\"\"\n        results = []\n        for query in queries:\n            result = self.query(query)\n            results.append(result)\n        return results\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#async-operations","title":"Async Operations","text":"<pre><code>import asyncio\nfrom typing import List\n\nasync def async_query(agent: FIAAgent, query: str) -&gt; str:\n    \"\"\"Async wrapper for queries.\"\"\"\n    loop = asyncio.get_event_loop()\n    return await loop.run_in_executor(\n        None, agent.query, query\n    )\n\nasync def parallel_queries(\n    agent: FIAAgent, \n    queries: List[str]\n) -&gt; List[str]:\n    \"\"\"Run queries in parallel.\"\"\"\n    tasks = [async_query(agent, q) for q in queries]\n    return await asyncio.gather(*tasks)\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#testing","title":"Testing","text":""},{"location":"ai_agent/DEVELOPER_GUIDE/#unit-tests","title":"Unit Tests","text":"<p>Test individual components:</p> <pre><code>import pytest\nfrom pyfia.ai.agent import FIAAgent\n\ndef test_species_lookup():\n    agent = FIAAgent(\"test.duckdb\")\n    # Test species code lookup\n    result = find_species_codes(\"oak\")\n    assert any(\"Quercus\" in r for r in result)\n\ndef test_evalid_validation():\n    agent = FIAAgent(\"test.duckdb\")\n    info = get_evalid_info(372301)\n    assert info[\"state\"] == \"North Carolina\"\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#integration-tests","title":"Integration Tests","text":"<p>Test full query processing:</p> <pre><code>def test_full_query_pipeline():\n    agent = FIAAgent(\"test.duckdb\")\n    result = agent.query(\n        \"How many live oak trees are in North Carolina?\"\n    )\n    # Verify response contains expected elements\n    assert \"trees\" in result.lower()\n    assert any(x in result for x in [\"oak\", \"Quercus\"])\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#performance-testing","title":"Performance Testing","text":"<pre><code>import time\n\ndef test_query_performance():\n    agent = FIAAgent(\"test.duckdb\")\n\n    start = time.time()\n    result = agent.query(\"Complex analysis query...\")\n    duration = time.time() - start\n\n    assert duration &lt; 30  # Should complete in 30s\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#debugging","title":"Debugging","text":""},{"location":"ai_agent/DEVELOPER_GUIDE/#enable-verbose-mode","title":"Enable Verbose Mode","text":"<pre><code># See all LangGraph operations\nagent = FIAAgent(\"database.duckdb\", verbose=True)\n\n# Or set environment variable\nos.environ[\"LANGCHAIN_VERBOSE\"] = \"true\"\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#trace-execution","title":"Trace Execution","text":"<pre><code># Enable LangSmith tracing\nos.environ[\"LANGCHAIN_TRACING_V2\"] = \"true\"\nos.environ[\"LANGCHAIN_API_KEY\"] = \"your-api-key\"\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#common-issues","title":"Common Issues","text":"<ol> <li>Tool Not Found</li> <li>Ensure tool is added to tools list</li> <li> <p>Check function has proper docstring</p> </li> <li> <p>Memory Not Persisting</p> </li> <li>Verify checkpoint_dir is writable</li> <li> <p>Use consistent thread_id</p> </li> <li> <p>Slow Queries</p> </li> <li>Add database indexes</li> <li>Optimize tool implementations</li> <li>Use query result caching</li> </ol>"},{"location":"ai_agent/DEVELOPER_GUIDE/#performance-optimization","title":"Performance Optimization","text":""},{"location":"ai_agent/DEVELOPER_GUIDE/#query-caching","title":"Query Caching","text":"<pre><code>from functools import lru_cache\n\n@lru_cache(maxsize=1000)\ndef cached_species_lookup(species_name: str):\n    \"\"\"Cache species lookups.\"\"\"\n    return find_species_codes(species_name)\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#database-optimization","title":"Database Optimization","text":"<pre><code># Add indexes for common queries\ndef optimize_database(db_path: str):\n    conn = duckdb.connect(db_path)\n\n    # Index for species queries\n    conn.execute(\"\"\"\n        CREATE INDEX IF NOT EXISTS idx_tree_spcd \n        ON TREE(SPCD)\n    \"\"\")\n\n    # Index for evaluation queries\n    conn.execute(\"\"\"\n        CREATE INDEX IF NOT EXISTS idx_plot_evalid \n        ON PLOT(EVALID)\n    \"\"\")\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#concurrent-processing","title":"Concurrent Processing","text":"<pre><code>from concurrent.futures import ThreadPoolExecutor\n\nclass ConcurrentFIAAgent(FIAAgent):\n    def __init__(self, *args, max_workers=4, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.executor = ThreadPoolExecutor(max_workers)\n\n    def parallel_tools(self, tool_calls):\n        \"\"\"Execute multiple tools in parallel.\"\"\"\n        futures = [\n            self.executor.submit(tool, *args)\n            for tool, args in tool_calls\n        ]\n        return [f.result() for f in futures]\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#security-considerations","title":"Security Considerations","text":""},{"location":"ai_agent/DEVELOPER_GUIDE/#input-validation","title":"Input Validation","text":"<pre><code>def validate_user_input(query: str) -&gt; bool:\n    \"\"\"Validate user queries for safety.\"\"\"\n    # Check for SQL injection attempts\n    dangerous_patterns = [\n        \"DROP\", \"DELETE\", \"UPDATE\", \"INSERT\",\n        \"CREATE\", \"ALTER\", \"--\", \"/*\", \"*/\"\n    ]\n\n    query_upper = query.upper()\n    return not any(p in query_upper for p in dangerous_patterns)\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#rate-limiting","title":"Rate Limiting","text":"<pre><code>from datetime import datetime, timedelta\nfrom collections import defaultdict\n\nclass RateLimitedAgent(FIAAgent):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.query_times = defaultdict(list)\n        self.rate_limit = 10  # queries per minute\n\n    def check_rate_limit(self, user_id: str) -&gt; bool:\n        now = datetime.now()\n        minute_ago = now - timedelta(minutes=1)\n\n        # Clean old entries\n        self.query_times[user_id] = [\n            t for t in self.query_times[user_id]\n            if t &gt; minute_ago\n        ]\n\n        # Check limit\n        if len(self.query_times[user_id]) &gt;= self.rate_limit:\n            return False\n\n        self.query_times[user_id].append(now)\n        return True\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#deployment","title":"Deployment","text":""},{"location":"ai_agent/DEVELOPER_GUIDE/#docker-configuration","title":"Docker Configuration","text":"<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Copy application\nCOPY src/ src/\nCOPY data/ data/\n\n# Set environment variables\nENV PYTHONPATH=/app\nENV OPENAI_API_KEY=${OPENAI_API_KEY}\n\n# Run the agent\nCMD [\"python\", \"-m\", \"pyfia.cli.ai_interface\", \"/data/fia.duckdb\"]\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#production-considerations","title":"Production Considerations","text":"<ol> <li>API Key Management: Use secrets management service</li> <li>Database Access: Read-only replicas for safety</li> <li>Monitoring: Track query patterns and errors</li> <li>Scaling: Use connection pooling for database</li> <li>Caching: Implement Redis for query results</li> </ol>"},{"location":"ai_agent/DEVELOPER_GUIDE/#contributing","title":"Contributing","text":""},{"location":"ai_agent/DEVELOPER_GUIDE/#development-setup","title":"Development Setup","text":"<pre><code># Clone repository\ngit clone https://github.com/your-username/pyfia\ncd pyfia\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate\n\n# Install in development mode\npip install -e \".[dev,langchain]\"\n\n# Run tests\npytest tests/test_ai_agent.py\n</code></pre>"},{"location":"ai_agent/DEVELOPER_GUIDE/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 guidelines</li> <li>Use type hints for all functions</li> <li>Write comprehensive docstrings</li> <li>Add unit tests for new features</li> </ul>"},{"location":"ai_agent/DEVELOPER_GUIDE/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create feature branch</li> <li>Implement changes with tests</li> <li>Update documentation</li> <li>Submit PR with description</li> </ol>"},{"location":"ai_agent/DEVELOPER_GUIDE/#resources","title":"Resources","text":"<ul> <li>LangChain Documentation</li> <li>LangGraph Guide</li> <li>OpenAI API Reference</li> <li>DuckDB Python API</li> </ul>"},{"location":"ai_agent/DOMAIN_FILTERING/","title":"Intelligent Domain Filtering for AI Agent","text":"<p>The PyFIA AI Agent leverages intelligent domain filtering to provide accurate, context-aware results while maintaining transparency about filtering assumptions.</p>"},{"location":"ai_agent/DOMAIN_FILTERING/#overview","title":"Overview","text":"<p>When you ask the AI agent a question about forest data, it automatically: 1. Detects context from your natural language query 2. Applies appropriate filters based on the question type 3. Explains all assumptions made during filtering 4. Suggests alternatives when relevant</p>"},{"location":"ai_agent/DOMAIN_FILTERING/#how-it-works","title":"How It Works","text":""},{"location":"ai_agent/DOMAIN_FILTERING/#context-detection","title":"Context Detection","text":"<p>The AI agent analyzes your query to understand intent:</p> <pre><code># Query: \"How many live trees are in California?\"\n# Detected: tree_type=\"live\", location=\"California\"\n\n# Query: \"Show mortality from fire damage\"\n# Detected: tree_type=\"dead\", cause=\"fire\"\n\n# Query: \"Calculate merchantable volume\"\n# Detected: tree_type=\"gs\" (growing stock)\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#automatic-filtering","title":"Automatic Filtering","text":"<p>Based on context, appropriate filters are applied:</p> Query Context Tree Type Land Type Additional Filters \"live trees\" live forest STATUSCD == 1 \"mortality\" dead forest STATUSCD == 2 \"timber volume\" gs timber Growing stock criteria \"all trees\" all forest No status filter \"biomass\" live forest Live trees only"},{"location":"ai_agent/DOMAIN_FILTERING/#transparent-communication","title":"Transparent Communication","text":"<p>The agent always explains what filters were applied:</p> <pre><code>Based on your query about \"live oak trees\", I'm applying these filters:\n\n\u2713 Including only live trees (STATUSCD == 1)\n\u2713 Including all forest land (COND_STATUS_CD == 1)\n\u2713 Filtering for oak species (Quercus genus)\n\nIf you'd like different filters (e.g., only timberland or specific size classes), \nplease let me know!\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#ai-agent-features","title":"AI Agent Features","text":""},{"location":"ai_agent/DOMAIN_FILTERING/#smart-defaults","title":"Smart Defaults","text":"<p>The agent uses intelligent defaults based on analysis type:</p> <pre><code># Volume analysis \u2192 Growing stock trees\n\"What's the volume?\" \u2192 tree_type=\"gs\", land_type=\"timber\"\n\n# Area analysis \u2192 All trees  \n\"Forest area?\" \u2192 tree_type=\"all\", land_type=\"forest\"\n\n# Mortality analysis \u2192 Dead trees\n\"Annual mortality?\" \u2192 tree_type=\"dead\", land_type=\"forest\"\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#filter-suggestions","title":"Filter Suggestions","text":"<p>When appropriate, the agent suggests relevant filters:</p> <pre><code>For your volume analysis, you might also consider:\n\u2022 Diameter limits (e.g., DBH &gt;= 5.0 inches)\n\u2022 Specific forest types\n\u2022 Ownership categories (public vs private)\n\u2022 Regional boundaries\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#assumption-tracking","title":"Assumption Tracking","text":"<p>All filtering assumptions are tracked and can be reviewed:</p> <pre><code>fia-ai&gt; explain last query filters\n\nFilters applied in previous query:\n\u2022 Tree type: Growing stock (commercial species, sound condition)\n\u2022 Land type: Timberland (productive, unreserved forest)\n\u2022 Geographic: California (STATECD == 6)\n\u2022 Time period: EVALID 62021 (2021 evaluation)\n\nTechnical details:\n\u2022 STATUSCD == 1 (live trees)\n\u2022 TREECLCD == 2 (growing stock classification)\n\u2022 AGENTCD &lt; 30 (no significant damage)\n\u2022 SITECLCD in [1,2,3,4,5] (productive sites)\n\u2022 RESERVCD == 0 (not reserved)\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#common-patterns","title":"Common Patterns","text":""},{"location":"ai_agent/DOMAIN_FILTERING/#basic-queries","title":"Basic Queries","text":"<pre><code># Simple count - uses intelligent defaults\nfia-ai&gt; How many trees are there?\n\u2192 Applies: tree_type=\"all\", land_type=\"forest\"\n\n# Species-specific - maintains context\nfia-ai&gt; How many pine trees?\n\u2192 Applies: Previous filters + species filter\n\n# Clear intent - specific filters\nfia-ai&gt; Count dead oak trees\n\u2192 Applies: tree_type=\"dead\", species=\"oak\"\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#advanced-filtering","title":"Advanced Filtering","text":"<pre><code># Multiple criteria\nfia-ai&gt; Large diameter pine on public timberland\n\u2192 Applies: tree_type=\"live\", land_type=\"timber\", \n          DIA &gt;= 20.0, ownership=\"public\", species=\"pine\"\n\n# Exclusions\nfia-ai&gt; All trees except damaged ones\n\u2192 Applies: tree_type=\"live\", AGENTCD &lt; 30\n\n# Complex domains\nfia-ai&gt; Merchantable sawtimber volume\n\u2192 Applies: tree_type=\"gs\", DIA &gt;= 9.0, \n          height/quality thresholds\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#customizing-filters","title":"Customizing Filters","text":""},{"location":"ai_agent/DOMAIN_FILTERING/#override-defaults","title":"Override Defaults","text":"<p>You can explicitly specify filters:</p> <pre><code># Override default land type\nfia-ai&gt; Count all trees including non-forest land\n\u2192 Uses: land_type=\"all\" instead of default \"forest\"\n\n# Specify exact criteria\nfia-ai&gt; Trees with STATUSCD=1 and DIA between 10 and 20\n\u2192 Uses: Your exact specifications\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#clear-filters","title":"Clear Filters","text":"<p>Reset to no filtering:</p> <pre><code>fia-ai&gt; Show raw tree count with no filters\n\u2192 Returns unfiltered data\n\nfia-ai&gt; Clear all domain filters\n\u2192 Resets to defaults\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#filter-reference","title":"Filter Reference","text":""},{"location":"ai_agent/DOMAIN_FILTERING/#tree-types","title":"Tree Types","text":"Type Description Filter Applied <code>live</code> Living trees STATUSCD == 1 <code>dead</code> Dead trees STATUSCD == 2 <code>gs</code> Growing stock Live + commercial + sound <code>all</code> All trees No status filter"},{"location":"ai_agent/DOMAIN_FILTERING/#land-types","title":"Land Types","text":"Type Description Filter Applied <code>forest</code> Forest land COND_STATUS_CD == 1 <code>timber</code> Timberland Forest + productive + unreserved <code>all</code> All conditions No condition filter"},{"location":"ai_agent/DOMAIN_FILTERING/#common-domains","title":"Common Domains","text":"Domain Description Example Size Diameter limits DIA &gt;= 5.0 Height Height limits HT &gt; 4.5 Species Species codes SPCD IN (202, 316) Damage Agent codes AGENTCD &lt; 30 Owner Ownership OWNGRPCD == 40"},{"location":"ai_agent/DOMAIN_FILTERING/#best-practices","title":"Best Practices","text":""},{"location":"ai_agent/DOMAIN_FILTERING/#be-specific-when-needed","title":"Be Specific When Needed","text":"<pre><code># Vague - agent will use defaults\nfia-ai&gt; What's the volume?\n\n# Specific - agent uses your criteria  \nfia-ai&gt; What's the net merchantable volume of live pine sawtimber on private land?\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#use-natural-language","title":"Use Natural Language","text":"<pre><code># Technical - works but not necessary\nfia-ai&gt; Select trees where STATUSCD=1 and DIA&gt;=10\n\n# Natural - agent understands\nfia-ai&gt; Show me live trees at least 10 inches in diameter\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#verify-assumptions","title":"Verify Assumptions","text":"<pre><code># After any query, check filters\nfia-ai&gt; What filters did you use?\n\n# Get detailed explanation\nfia-ai&gt; Explain the growing stock definition\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#examples","title":"Examples","text":""},{"location":"ai_agent/DOMAIN_FILTERING/#research-scenario","title":"Research Scenario","text":"<pre><code>fia-ai&gt; I'm studying carbon storage in old growth forests\n\nAgent: I'll help you analyze carbon storage in old growth forests. \nI'll apply these filters:\n\u2022 Large, old trees (DBH &gt;= 20 inches)\n\u2022 Live trees only (for active carbon storage)\n\u2022 Forest land only\n\nWould you like to:\n1. Set a specific diameter threshold?\n2. Include dead wood carbon?\n3. Focus on specific forest types?\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#management-query","title":"Management Query","text":"<pre><code>fia-ai&gt; Show harvestable timber volume on our private lands\n\nAgent: For harvestable timber analysis, I'm using:\n\u2022 Growing stock trees (merchantable species)\n\u2022 Minimum DBH of 9.0 inches (sawtimber)\n\u2022 Private ownership (OWNGRPCD == 40)\n\u2022 Timberland only (productive, unreserved)\n\nResults show 1,234 million cubic feet of merchantable volume.\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#ecological-study","title":"Ecological Study","text":"<pre><code>fia-ai&gt; Analyze tree mortality from insects\n\nAgent: Analyzing insect-caused mortality with these filters:\n\u2022 Dead trees (STATUSCD == 2)\n\u2022 Insect damage agents (AGENTCD 10000-19999)\n\u2022 Forest land only\n\u2022 Latest evaluation period\n\nFound 45,000 trees killed by insects, primarily:\n- Mountain pine beetle (12,000)\n- Emerald ash borer (8,500)\n- Southern pine beetle (6,200)\n</code></pre>"},{"location":"ai_agent/DOMAIN_FILTERING/#technical-details","title":"Technical Details","text":"<p>For developers, the domain filtering system:</p> <ol> <li>Parses natural language to extract filter intent</li> <li>Maps to FIA domains using knowledge base</li> <li>Validates combinations for consistency</li> <li>Tracks all decisions for transparency</li> <li>Generates explanations in user-friendly terms</li> </ol> <p>See the Developer Guide for implementation details.</p>"},{"location":"ai_agent/EXAMPLES/","title":"PyFIA AI Agent Examples","text":"<p>Real-world examples demonstrating the AI Agent's capabilities for forest inventory analysis.</p>"},{"location":"ai_agent/EXAMPLES/#basic-analysis-examples","title":"Basic Analysis Examples","text":""},{"location":"ai_agent/EXAMPLES/#1-species-composition-analysis","title":"1. Species Composition Analysis","text":"<p>Scenario: Understand the species mix in a state's forests.</p> <pre><code>fia-ai&gt; What are the top 10 tree species by volume in North Carolina?\n\n# Agent response:\nUsing EVALID 372301 (North Carolina 2019-2023), here are the top 10 species by volume:\n\n1. Loblolly pine (Pinus taeda) - 8,234 million cu ft (31.2%)\n2. Yellow-poplar (Liriodendron tulipifera) - 3,456 million cu ft (13.1%)\n3. Red maple (Acer rubrum) - 2,987 million cu ft (11.3%)\n4. Sweetgum (Liquidambar styraciflua) - 2,123 million cu ft (8.0%)\n5. White oak (Quercus alba) - 1,876 million cu ft (7.1%)\n...\n\nTotal volume: 26,412 million cu ft on 17.9 million acres of forest land.\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#2-forest-health-assessment","title":"2. Forest Health Assessment","text":"<p>Scenario: Evaluate tree mortality patterns.</p> <pre><code>fia-ai&gt; Analyze mortality causes in Georgia for the latest evaluation\n\n# Agent process:\n1. Finds latest GRM evaluation for Georgia\n2. Queries mortality by damage agent\n3. Formats results with context\n\n# Response:\nGeorgia Mortality Analysis (EVALID 132303, 2009-2019):\n\nAnnual Mortality by Cause:\n\u2022 Insects: 45,234 trees/year (28.3%)\n  - Southern pine beetle: 12,456 trees/year\n  - Ips engraver beetles: 8,234 trees/year\n\u2022 Disease: 34,567 trees/year (21.6%)\n  - Root disease: 15,234 trees/year\n  - Cankers: 9,123 trees/year\n\u2022 Weather: 28,901 trees/year (18.1%)\n  - Drought: 18,234 trees/year\n  - Wind: 10,667 trees/year\n\u2022 Fire: 12,345 trees/year (7.7%)\n\u2022 Unknown: 38,953 trees/year (24.3%)\n\nTotal annual mortality: 160,000 trees/year (2.3% of live trees)\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#3-carbon-storage-estimation","title":"3. Carbon Storage Estimation","text":"<p>Scenario: Calculate carbon sequestration for climate reporting.</p> <pre><code>fia-ai&gt; Calculate total carbon storage in California forests, including live trees, dead wood, and soil\n\n# Response:\nCalifornia Forest Carbon Storage (EVALID 62021):\n\nCarbon Pools:\n\u2022 Live trees (aboveground): 1,234 million metric tons (48.2%)\n\u2022 Live trees (belowground): 234 million metric tons (9.1%)\n\u2022 Dead wood: 145 million metric tons (5.7%)\n\u2022 Forest floor: 189 million metric tons (7.4%)\n\u2022 Soil organic carbon: 756 million metric tons (29.6%)\n\nTotal Forest Carbon: 2,558 million metric tons\nAverage: 87.3 metric tons/acre\n\nConfidence Interval (95%): \u00b145 million metric tons\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#advanced-query-examples","title":"Advanced Query Examples","text":""},{"location":"ai_agent/EXAMPLES/#4-timber-resource-assessment","title":"4. Timber Resource Assessment","text":"<p>Scenario: Evaluate merchantable timber for harvest planning.</p> <pre><code>fia-ai&gt; Show merchantable sawtimber volume on private timberland in Oregon by species group\n\n# Complex query breakdown:\n- Filters: Private ownership, timberland only\n- Measures: Board foot volume (Scribner)\n- Groups: Softwood vs hardwood species\n\n# Response:\nOregon Private Timberland Sawtimber (EVALID 412021):\n\nSoftwoods:\n\u2022 Douglas-fir: 45,678 million bd ft (52.3%)\n\u2022 True firs: 12,345 million bd ft (14.1%)\n\u2022 Ponderosa pine: 9,876 million bd ft (11.3%)\n\u2022 Western hemlock: 8,234 million bd ft (9.4%)\nSubtotal: 76,133 million bd ft (87.1%)\n\nHardwoods:\n\u2022 Red alder: 6,789 million bd ft (7.8%)\n\u2022 Bigleaf maple: 2,345 million bd ft (2.7%)\n\u2022 Oregon white oak: 2,123 million bd ft (2.4%)\nSubtotal: 11,257 million bd ft (12.9%)\n\nTotal: 87,390 million bd ft on 5.2 million acres\nAverage: 16,805 bd ft/acre\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#5-growth-vs-harvest-analysis","title":"5. Growth vs Harvest Analysis","text":"<p>Scenario: Compare growth rates to removal rates for sustainability assessment.</p> <pre><code>fia-ai&gt; Compare annual growth to annual harvest removals for pine species in the Southeast region\n\n# Multi-state analysis:\n# States: VA, NC, SC, GA, FL, AL, MS, LA, AR, TN, KY\n\n# Response:\nSoutheast Pine Growth vs Removals (2019-2023 evaluations):\n\nAnnual Net Growth:\n\u2022 Loblolly pine: 456.7 million cu ft/year\n\u2022 Longleaf pine: 34.5 million cu ft/year\n\u2022 Slash pine: 123.4 million cu ft/year\n\u2022 Shortleaf pine: 67.8 million cu ft/year\nTotal Growth: 682.4 million cu ft/year\n\nAnnual Removals:\n\u2022 Loblolly pine: 398.2 million cu ft/year\n\u2022 Longleaf pine: 12.3 million cu ft/year\n\u2022 Slash pine: 89.1 million cu ft/year\n\u2022 Shortleaf pine: 45.6 million cu ft/year\nTotal Removals: 545.2 million cu ft/year\n\nGrowth-to-Removal Ratio: 1.25\nInterpretation: Growth exceeds removals by 25% - sustainable harvest level\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#6-wildfire-risk-assessment","title":"6. Wildfire Risk Assessment","text":"<p>Scenario: Identify high-risk areas based on fuel loading.</p> <pre><code>fia-ai&gt; Find counties in California with high dead fuel loads and dense small diameter trees\n\n# Risk factors analyzed:\n- Standing dead trees &gt; 10 tons/acre\n- Live trees 1-5\" DBH &gt; 500 trees/acre\n- Drought mortality in last 5 years\n\n# Response:\nHigh Wildfire Risk Counties in California:\n\nExtreme Risk (3 factors):\n1. Fresno County\n   - Dead biomass: 18.5 tons/acre\n   - Small trees: 823 TPA\n   - Recent mortality: 34% increase\n\n2. Madera County\n   - Dead biomass: 16.2 tons/acre\n   - Small trees: 756 TPA\n   - Recent mortality: 28% increase\n\nHigh Risk (2 factors):\n3. Tulare County\n4. Kern County\n5. Mariposa County\n...\n\nRecommendations:\n- Priority fuel reduction: 234,567 acres\n- Estimated treatment cost: $123 million\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#research-oriented-examples","title":"Research-Oriented Examples","text":""},{"location":"ai_agent/EXAMPLES/#7-climate-change-impact-study","title":"7. Climate Change Impact Study","text":"<p>Scenario: Analyze shifting species distributions.</p> <pre><code>fia-ai&gt; Compare oak species elevation distributions between 2000 and 2020 evaluations in the Appalachians\n\n# Analysis covers: VA, WV, NC, TN, KY\n# Species: All Quercus species\n# Metric: Average elevation by species\n\n# Response:\nOak Species Elevation Shifts (2000 vs 2020):\n\nUpward Migration Detected:\n\u2022 Northern red oak: +127 ft (from 2,834 to 2,961 ft mean)\n\u2022 White oak: +89 ft (from 2,156 to 2,245 ft mean)\n\u2022 Scarlet oak: +156 ft (from 3,234 to 3,390 ft mean)\n\nStable Distribution:\n\u2022 Chestnut oak: +12 ft (not significant)\n\u2022 Black oak: -23 ft (not significant)\n\nStatistical Note:\n- Based on 12,456 plots with oak present\n- Confidence level: 95%\n- Controlled for aspect and slope position\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#8-biodiversity-assessment","title":"8. Biodiversity Assessment","text":"<p>Scenario: Evaluate forest structural diversity.</p> <pre><code>fia-ai&gt; Calculate Shannon diversity index for tree species and size classes in old-growth forests of the Pacific Northwest\n\n# Filters: Stand age &gt; 200 years\n# Region: WA, OR\n# Metrics: Species diversity, structural diversity\n\n# Response:\nOld-Growth Forest Diversity Analysis:\n\nSpecies Diversity:\n\u2022 Shannon Index (H'): 2.34\n\u2022 Species Richness: 47 species\n\u2022 Evenness (J'): 0.61\n\nDominant Species:\n1. Douglas-fir (24.3%)\n2. Western hemlock (18.7%)\n3. Western redcedar (15.2%)\n\nSize Class Diversity:\n\u2022 Shannon Index (H'): 1.89\n\u2022 Size classes present: 8 (5\" to 60\"+ DBH)\n\u2022 Large tree component (&gt;30\" DBH): 34.5% of basal area\n\nStructural Characteristics:\n\u2022 Canopy layers: 3.2 average\n\u2022 Snag density: 12.3 snags/acre\n\u2022 Coarse woody debris: 45.6 tons/acre\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#management-planning-examples","title":"Management Planning Examples","text":""},{"location":"ai_agent/EXAMPLES/#9-inventory-summary-for-forest-management-plan","title":"9. Inventory Summary for Forest Management Plan","text":"<p>Scenario: Generate comprehensive inventory statistics for a planning document.</p> <pre><code>fia-ai&gt; Create a forest management plan summary for all national forests in Colorado\n\n# Comprehensive analysis including:\n- Area by forest type\n- Volume by species and size\n- Growth rates\n- Stocking levels\n\n# Response formatted for management plan:\n\nCOLORADO NATIONAL FORESTS INVENTORY SUMMARY\n==========================================\n\nTotal Area: 14.5 million acres\n- Timberland: 8.2 million acres (56.6%)\n- Other forest: 4.1 million acres (28.3%)\n- Non-forest: 2.2 million acres (15.1%)\n\nForest Types:\n\u2022 Spruce-fir: 3.4 million acres (41.5%)\n\u2022 Lodgepole pine: 2.8 million acres (34.1%)\n\u2022 Ponderosa pine: 1.2 million acres (14.6%)\n\u2022 Aspen: 0.8 million acres (9.8%)\n\nStanding Volume:\n\u2022 Total: 12,345 million cu ft\n\u2022 Sawtimber: 8,234 million cu ft (66.7%)\n\u2022 Poletimber: 4,111 million cu ft (33.3%)\n\nAnnual Growth: 234.5 million cu ft/year (1.9%)\nAnnual Mortality: 89.3 million cu ft/year (0.7%)\nNet Growth: 145.2 million cu ft/year (1.2%)\n\nStocking Status:\n\u2022 Overstocked: 23.4%\n\u2022 Fully stocked: 45.6%\n\u2022 Understocked: 31.0%\n\nManagement Implications:\n- Thinning opportunities: 1.9 million acres\n- Regeneration needs: 0.4 million acres\n- Insect/disease risk: 2.3 million acres\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#10-economic-value-assessment","title":"10. Economic Value Assessment","text":"<p>Scenario: Estimate stumpage value for budget planning.</p> <pre><code>fia-ai&gt; Estimate the total stumpage value of merchantable timber on state-owned forests in Michigan using current market prices\n\n# Uses regional stumpage prices\n# Separates by species and grade\n# Accounts for accessibility\n\n# Response:\nMichigan State Forest Timber Valuation:\n\nMerchantable Volume by Species Group:\n\u2022 Sugar maple (prime sawlogs): 234 million bd ft @ $450/MBF = $105.3M\n\u2022 Red oak (sawlogs): 156 million bd ft @ $380/MBF = $59.3M\n\u2022 White pine (sawlogs): 123 million bd ft @ $250/MBF = $30.8M\n\u2022 Aspen (pulpwood): 345 thousand cords @ $35/cord = $12.1M\n\u2022 Other hardwoods: 456 million bd ft @ $180/MBF = $82.1M\n\u2022 Other softwoods: 234 million bd ft @ $150/MBF = $35.1M\n\nTotal Stumpage Value: $324.7 million\n\nAccessibility Adjustment:\n\u2022 Easily accessible (&lt; 1/4 mile): 67% ($217.5M)\n\u2022 Moderate access (1/4 - 1 mile): 24% ($77.9M)\n\u2022 Difficult access (&gt; 1 mile): 9% ($29.3M)\n\nNote: Values based on 2024 Q3 Michigan DNR stumpage reports\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#complex-workflow-examples","title":"Complex Workflow Examples","text":""},{"location":"ai_agent/EXAMPLES/#11-multi-step-analysis-workflow","title":"11. Multi-Step Analysis Workflow","text":"<p>Scenario: Complete assessment for conservation planning.</p> <pre><code># Step 1: Identify target\nfia-ai&gt; Which counties in Minnesota have the highest diversity of native tree species?\n\n# Step 2: Assess condition\nfia-ai&gt; For the top 5 counties you found, what percent of forest is in mature age classes?\n\n# Step 3: Evaluate threats\nfia-ai&gt; In those same counties, what are the main mortality agents?\n\n# Step 4: Conservation priority\nfia-ai&gt; Based on diversity, age class, and threats, rank these counties for conservation priority\n\n# Final integrated response:\nConservation Priority Ranking for Minnesota Counties:\n\n1. Cook County (Score: 92/100)\n   - Species diversity: 47 native species (highest)\n   - Mature forest: 67.8% (&gt;80 years)\n   - Main threats: Wind (minor), insects (low)\n   - Recommendation: Protect existing old-growth\n\n2. Lake County (Score: 87/100)\n   - Species diversity: 43 native species\n   - Mature forest: 54.3%\n   - Main threats: Fire risk (moderate)\n   - Recommendation: Fire management planning\n\n[Continues for all 5 counties...]\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#12-scenario-modeling","title":"12. Scenario Modeling","text":"<p>Scenario: Project future conditions under different management scenarios.</p> <pre><code>fia-ai&gt; Using current growth and mortality rates, project forest carbon storage in Washington state for the next 20 years under three scenarios: no management, increased harvest, and conservation focus\n\n# Agent performs:\n1. Current state analysis\n2. Growth/mortality rate calculation\n3. Scenario projections\n4. Uncertainty assessment\n\n# Response:\nWashington Forest Carbon Projections (2024-2044):\n\nCurrent Carbon Storage: 2,345 million metric tons\n\nScenario 1 - No Management:\n\u2022 2034: 2,567 MMT (+9.5%)\n\u2022 2044: 2,789 MMT (+18.9%)\n\u2022 Key driver: Natural growth exceeds mortality\n\nScenario 2 - Increased Harvest (150% current):\n\u2022 2034: 2,234 MMT (-4.7%)\n\u2022 2044: 2,123 MMT (-9.5%)\n\u2022 Key driver: Removals exceed growth\n\nScenario 3 - Conservation Focus:\n\u2022 2034: 2,678 MMT (+14.2%)\n\u2022 2044: 3,012 MMT (+28.4%)\n\u2022 Key driver: Reduced mortality, optimal growth\n\nUncertainty Range: \u00b115% due to:\n- Climate variability\n- Disturbance events\n- Market conditions\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#tips-for-effective-queries","title":"Tips for Effective Queries","text":""},{"location":"ai_agent/EXAMPLES/#be-specific-about-requirements","title":"Be Specific About Requirements","text":"<pre><code># Good - specific and clear\nfia-ai&gt; Calculate basal area per acre for live trees over 12 inches DBH on timberland in Vermont\n\n# Less effective - too vague\nfia-ai&gt; What's the basal area in Vermont?\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#build-complex-analyses-incrementally","title":"Build Complex Analyses Incrementally","text":"<pre><code># Start simple\nfia-ai&gt; How many plots are in Oregon?\n\n# Add complexity\nfia-ai&gt; How many of those plots are on federal land?\n\n# Final analysis\nfia-ai&gt; On federal plots, compare species diversity between wilderness and non-wilderness areas\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#use-follow-up-questions","title":"Use Follow-Up Questions","text":"<pre><code>fia-ai&gt; What's the most common tree species in Maine?\n# Response: Red maple\n\nfia-ai&gt; What about by volume instead of count?\n# Response: Balsam fir\n\nfia-ai&gt; Show me the top 10 by both metrics\n# Response: Detailed comparison table\n</code></pre>"},{"location":"ai_agent/EXAMPLES/#leverage-the-agents-memory","title":"Leverage the Agent's Memory","text":"<pre><code>fia-ai&gt; Remember this as \"study area\": counties in North Carolina with elevation &gt; 3000 feet\n\nfia-ai&gt; In the study area, what's the dominant forest type?\n\nfia-ai&gt; Compare carbon storage between the study area and the rest of the state\n</code></pre> <p>These examples demonstrate the AI Agent's versatility in handling everything from simple queries to complex, multi-faceted analyses. The key is to start with clear objectives and build your analysis step by step.</p>"},{"location":"ai_agent/FORMATTING/","title":"Enhanced Result Formatting with Rich","text":""},{"location":"ai_agent/FORMATTING/#overview","title":"Overview","text":"<p>The enhanced result formatting system provides comprehensive, user-friendly presentation of FIA analysis results with proper statistical context, confidence intervals, and reliability assessments. The system now uses the Rich Python library to create beautiful, professional terminal output with colors, tables, panels, and advanced styling.</p>"},{"location":"ai_agent/FORMATTING/#features","title":"Features","text":""},{"location":"ai_agent/FORMATTING/#statistical-rigor","title":"\ud83c\udfaf Statistical Rigor","text":"<ul> <li>Confidence Intervals: Automatic calculation of 95% (or configurable) confidence intervals</li> <li>Reliability Assessment: Color-coded reliability ratings based on standard error percentages</li> <li>Proper Statistical Context: Clear explanation of what estimates represent</li> </ul>"},{"location":"ai_agent/FORMATTING/#visual-enhancement-with-rich","title":"\ud83d\udcca Visual Enhancement with Rich","text":"<ul> <li>Rich Panels: Beautiful bordered panels for organizing information sections</li> <li>Professional Tables: Styled tables with proper alignment, colors, and formatting</li> <li>Emoji Indicators: Optional visual cues for different types of information</li> <li>Color Coding: Syntax highlighting and color-coded reliability indicators</li> <li>Responsive Layout: Automatically adapts to terminal width</li> <li>Number Formatting: Proper comma-separated formatting for large numbers</li> </ul>"},{"location":"ai_agent/FORMATTING/#scientific-context","title":"\ud83d\udd2c Scientific Context","text":"<ul> <li>Methodology Notes: Explanation of FIA EVALIDator methodology</li> <li>Sample Information: Plot counts and sampling context</li> <li>Interpretation Guidance: Help users understand what results mean</li> </ul>"},{"location":"ai_agent/FORMATTING/#usage-examples","title":"Usage Examples","text":""},{"location":"ai_agent/FORMATTING/#basic-tree-count-query","title":"Basic Tree Count Query","text":"<p>Input: \"How many live oak trees are in Texas?\"</p> <p>Enhanced Output: <pre><code>\ud83c\udf33 **FIA Tree Count Analysis Results**\n==================================================\n\n\ud83d\udcca **Query Summary:**\n   \u2022 Tree Status: Live trees\n   \u2022 Land Type: Forest land\n   \u2022 Tree Filter: SPCD == 802\n   \u2022 Area Filter: STATECD == 48\n   \u2022 Evaluation ID: 482201\n   \u2022 Analysis Date: 2025-01-27 14:30\n\n\ud83d\udcc8 **Population Estimate:**\n\n\ud83d\udd22 **Total Trees:** 45,234,567\n\n\ud83d\udcca **Statistical Precision:**\n   \u2022 Standard Error: \u00b12,261,728 trees (5.0%)\n   \u2022 95% Confidence Interval: 40,801,584 - 49,667,550\n   \u2022 Reliability: \ud83d\udfe2 Excellent (Very reliable estimate)\n\n\ud83d\udccd **Sample Information:**\n   \u2022 Field Plots Used: 1,247\n   \u2022 Average Trees per Plot: 36.3\n\n\ud83d\udd2c **Methodology Notes:**\n   \u2022 Population estimates use FIA EVALIDator methodology\n   \u2022 Expansion factors account for plot sampling design\n   \u2022 Standard errors reflect sampling uncertainty\n   \u2022 95% confidence intervals assume normal distribution\n\n\ud83d\udca1 **Interpretation Guide:**\n   \u2022 Population estimates represent total trees across the area\n   \u2022 Standard errors indicate precision of estimates\n   \u2022 Lower SE% = more precise estimate\n   \u2022 Confidence intervals show plausible range of true values\n   \u2022 Reliability ratings help assess estimate quality\n</code></pre></p>"},{"location":"ai_agent/FORMATTING/#grouped-results-by-species","title":"Grouped Results (By Species)","text":"<p>Input: \"Show me tree counts by species in North Carolina\"</p> <p>Enhanced Output: <pre><code>\ud83c\udf33 **FIA Tree Count Analysis Results**\n==================================================\n\n\ud83d\udcca **Query Summary:**\n   \u2022 Tree Status: Live trees\n   \u2022 Land Type: Forest land\n   \u2022 Evaluation ID: 372301\n   \u2022 Analysis Date: 2025-01-27 14:30\n\n\ud83d\udcc8 **Detailed Results:**\n\n**1. loblolly pine** (*Pinus taeda*)\n   Species Code: 131\n   \ud83d\udd22 **Population Estimate:** 2,112,569,195 trees\n   \ud83d\udcca **Standard Error:** \u00b1105,628,460 trees (5.0%)\n   \ud83c\udfaf **95% Confidence Interval:** 1,905,538,813 - 2,319,599,577 trees\n   \ud83d\udfe2 **Reliability:** Excellent (\u22645%)\n   \ud83d\udccd **Sample Size:** 3,500 plots\n\n**2. red maple** (*Acer rubrum*)\n   Species Code: 316\n   \ud83d\udd22 **Population Estimate:** 1,933,632,940 trees\n   \ud83d\udcca **Standard Error:** \u00b196,681,647 trees (5.0%)\n   \ud83c\udfaf **95% Confidence Interval:** 1,744,137,692 - 2,123,128,188 trees\n   \ud83d\udfe2 **Reliability:** Excellent (\u22645%)\n   \ud83d\udccd **Sample Size:** 3,500 plots\n\n\ud83d\udccb **Summary Statistics:**\n   \u2022 Total Entries: 2\n   \u2022 Combined Population: 4,046,202,135 trees\n   \u2022 Plot Sample Size: 3,500 plots\n</code></pre></p>"},{"location":"ai_agent/FORMATTING/#reliability-assessment","title":"Reliability Assessment","text":"<p>The system automatically assesses estimate reliability based on standard error percentages:</p> Rating SE Range Indicator Interpretation \ud83d\udfe2 Excellent \u22645% Green Very reliable estimate \ud83d\udfe1 Good 5-10% Yellow Reliable estimate \ud83d\udfe0 Fair 10-20% Orange Moderately reliable estimate \ud83d\udd34 Poor &gt;20% Red Use with caution"},{"location":"ai_agent/FORMATTING/#configuration-options","title":"Configuration Options","text":""},{"location":"ai_agent/FORMATTING/#formatter-styles-with-rich","title":"Formatter Styles with Rich","text":"<pre><code>from pyfia.ai.result_formatter import create_result_formatter\n\n# Enhanced style with Rich (default) - beautiful panels, tables, and colors\nformatter = create_result_formatter(\"enhanced\", use_rich=True)\n\n# Simple style with Rich - clean panels without emojis\nformatter = create_result_formatter(\"simple\", use_rich=True)\n\n# Scientific style with Rich - 99% confidence intervals, professional styling\nformatter = create_result_formatter(\"scientific\", use_rich=True)\n\n# Fallback to plain text (when Rich unavailable or disabled)\nformatter = create_result_formatter(\"enhanced\", use_rich=False)\n</code></pre>"},{"location":"ai_agent/FORMATTING/#rich-specific-features","title":"Rich-Specific Features","text":"<pre><code># Control terminal width for Rich output\nformatter = create_result_formatter(\"enhanced\", console_width=120)\n\n# Rich formatting automatically provides:\n# - Colored panels with borders\n# - Professional tables with alignment\n# - Responsive layout\n# - Syntax highlighting\n# - Visual hierarchy\n</code></pre>"},{"location":"ai_agent/FORMATTING/#custom-configuration","title":"Custom Configuration","text":"<pre><code>from pyfia.ai.result_formatter import FIAResultFormatter\n\n# Custom confidence level with Rich\nformatter = FIAResultFormatter(\n    confidence_level=0.90,  # 90% CI\n    use_rich=True,\n    console_width=100\n)\n\n# Disable emojis but keep Rich styling\nformatter = FIAResultFormatter(\n    include_emojis=False,\n    use_rich=True\n)\n\n# Scientific configuration with Rich\nformatter = FIAResultFormatter(\n    include_emojis=False,\n    confidence_level=0.99,\n    use_rich=True\n)\n</code></pre>"},{"location":"ai_agent/FORMATTING/#rich-output-examples","title":"Rich Output Examples","text":""},{"location":"ai_agent/FORMATTING/#single-result-with-rich-panels","title":"Single Result with Rich Panels","text":"<p>When Rich is enabled, single results are displayed in beautiful bordered panels:</p> <pre><code>\u256d\u2500 \ud83c\udf33 Query Summary \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                \u2502\n\u2502  Tree Status: Live trees                                       \u2502\n\u2502  Land Type: Forest land                                        \u2502\n\u2502  Area Filter: STATECD == 37                                    \u2502\n\u2502  Evaluation ID: 372301                                         \u2502\n\u2502  Analysis Date: 2025-06-25 18:43                               \u2502\n\u2502                                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\u256d\u2500 \ud83d\udcca Population Analysis Results \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                \u2502\n\u2502  Population Estimate: 2,112,569,195 trees                     \u2502\n\u2502                                                                \u2502\n\u2502  Statistical Precision:                                        \u2502\n\u2502  \u2022 Standard Error: \u00b1105,628,460 trees (5.0%)                  \u2502\n\u2502  \u2022 95% Confidence Interval: 1,905,537,413 - 2,319,600,977     \u2502\n\u2502  \u2022 Reliability: \ud83d\udfe2 Excellent (Very reliable estimate)          \u2502\n\u2502                                                                \u2502\n\u2502  Sample Information:                                           \u2502\n\u2502  \u2022 Field Plots Used: 3,500                                     \u2502\n\u2502  \u2022 Average Trees per Plot: 603,591.2                           \u2502\n\u2502                                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"ai_agent/FORMATTING/#grouped-results-with-rich-tables","title":"Grouped Results with Rich Tables","text":"<p>Multiple species are displayed in professional tables:</p> <pre><code>                      \ud83c\udf33 Tree Population Analysis\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Species               \u2503    Population \u2503 Standard Error \u2503 Reliability  \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 loblolly pine         \u2502 2,112,569,195 \u2502   \u00b1105,628,460 \u2502 \ud83d\udfe2 Excellent \u2502\n\u2502 (Pinus taeda)         \u2502               \u2502         (5.0%) \u2502              \u2502\n\u2502 red maple             \u2502 1,933,632,940 \u2502    \u00b196,681,647 \u2502 \ud83d\udfe2 Excellent \u2502\n\u2502 (Acer rubrum)         \u2502               \u2502         (5.0%) \u2502              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ai_agent/FORMATTING/#integration-with-ai-agent","title":"Integration with AI Agent","text":"<p>The enhanced formatting is automatically used by the AI agent when available:</p> <pre><code>from pyfia.ai.agent import FIAAgent\n\nagent = FIAAgent(\"path/to/database.duckdb\")\nresponse = agent.query(\"How many pine trees are in Oregon?\")\n# Automatically uses enhanced formatting\n</code></pre>"},{"location":"ai_agent/FORMATTING/#fallback-behavior","title":"Fallback Behavior","text":"<p>If the enhanced formatter is not available, the system gracefully falls back to simple formatting:</p> <pre><code>Tree Count Results:\n\nSpecies: loblolly pine (Pinus taeda)\nTotal Population: 2,112,569,195 trees\nStandard Error: 105,628,460\nStandard Error %: 5.0%\n\n(Statistically valid population estimate using FIA methodology)\n</code></pre>"},{"location":"ai_agent/FORMATTING/#technical-implementation","title":"Technical Implementation","text":""},{"location":"ai_agent/FORMATTING/#key-components","title":"Key Components","text":"<ol> <li>FIAResultFormatter: Main formatter class with configurable options</li> <li>Reliability Assessment: Automatic quality evaluation based on SE%</li> <li>Confidence Intervals: Statistical calculation with proper bounds</li> <li>Visual Enhancement: Emoji mapping and structured layout</li> <li>Fallback System: Graceful degradation when formatter unavailable</li> </ol>"},{"location":"ai_agent/FORMATTING/#statistical-calculations","title":"Statistical Calculations","text":"<ul> <li>Confidence Intervals: Uses appropriate z-scores (1.96 for 95%, 2.576 for 99%)</li> <li>Lower Bound Constraint: Ensures confidence intervals don't go below zero</li> <li>Reliability Thresholds: Based on FIA accuracy standards</li> </ul>"},{"location":"ai_agent/FORMATTING/#error-handling","title":"Error Handling","text":"<ul> <li>Import Safety: Graceful handling when dependencies unavailable</li> <li>Data Validation: Checks for required columns and valid values</li> <li>NaN Handling: Proper treatment of missing statistical values</li> </ul>"},{"location":"ai_agent/FORMATTING/#best-practices","title":"Best Practices","text":""},{"location":"ai_agent/FORMATTING/#for-users","title":"For Users","text":"<ol> <li>Pay attention to reliability ratings - Green is best, red requires caution</li> <li>Use confidence intervals - They show the uncertainty in estimates</li> <li>Consider sample size - More plots generally mean better estimates</li> <li>Understand methodology - Read the methodology notes for context</li> </ol>"},{"location":"ai_agent/FORMATTING/#for-developers","title":"For Developers","text":"<ol> <li>Always provide fallback - Simple formatting should always work</li> <li>Validate input data - Check for required columns before formatting</li> <li>Handle edge cases - Zero estimates, missing SE values, etc.</li> <li>Test different scenarios - Single results, grouped results, edge cases</li> </ol>"},{"location":"ai_agent/FORMATTING/#future-enhancements","title":"Future Enhancements","text":""},{"location":"ai_agent/FORMATTING/#planned-features","title":"Planned Features","text":"<ul> <li>Comparison Formatting: Side-by-side comparisons of different estimates</li> <li>Trend Analysis: Formatting for temporal comparisons</li> <li>Export Options: PDF, CSV, and other format exports</li> <li>Interactive Elements: Expandable sections and drill-down capabilities</li> </ul>"},{"location":"ai_agent/FORMATTING/#visualization-integration","title":"Visualization Integration","text":"<ul> <li>Chart Generation: Automatic creation of bar charts and plots</li> <li>Map Integration: Geographic visualization of spatial results</li> <li>Statistical Plots: Confidence interval visualizations</li> </ul>"},{"location":"ai_agent/FORMATTING/#examples-for-different-estimate-types","title":"Examples for Different Estimate Types","text":""},{"location":"ai_agent/FORMATTING/#volume-estimates","title":"Volume Estimates","text":"<pre><code>\ud83d\udcca Volume Analysis Results\n\u2022 Net Volume: 2,659.03 cu ft/acre (\u00b139.89, 1.5% SE)\n\u2022 Gross Volume: 2,692.80 cu ft/acre (\u00b140.39, 1.5% SE)\n\u2022 \ud83d\udfe2 Excellent reliability for both estimates\n</code></pre>"},{"location":"ai_agent/FORMATTING/#biomass-estimates","title":"Biomass Estimates","text":"<pre><code>\ud83c\udf3f Biomass Analysis Results\n\u2022 Aboveground: 69.7 tons/acre (\u00b11.05, 1.5% SE)\n\u2022 Carbon Content: 32.8 tons/acre (\u00b10.49, 1.5% SE)\n\u2022 \ud83d\udfe2 Excellent reliability - suitable for carbon accounting\n</code></pre>"},{"location":"ai_agent/FORMATTING/#area-estimates","title":"Area Estimates","text":"<pre><code>\ud83d\uddfa\ufe0f Forest Area Analysis\n\u2022 Total Forest: 18,592,940 acres (\u00b1117,647, 0.63% SE)\n\u2022 Timberland: 17,854,302 acres (\u00b1125,181, 0.70% SE)\n\u2022 \ud83d\udfe2 Excellent reliability - meets FIA accuracy standards\n</code></pre> <p>This enhanced formatting system transforms raw statistical output into user-friendly, scientifically rigorous presentations that help users understand both the results and their reliability.</p>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/","title":"AI Agent Migration - COMPLETED","text":""},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#migration-status-complete","title":"Migration Status: \u2705 COMPLETE","text":"<p>The migration to the modern agent architecture is now complete!</p> <p>As of this update, pyFIA uses a single, streamlined AI agent based on 2025 LangChain patterns. The old complex architectures have been removed.</p>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#what-changed","title":"What Changed","text":""},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#removed-components","title":"Removed Components","text":"<ul> <li>\u274c Old Basic Agent (<code>ai_agent.py</code> - complex 5-node workflow)</li> <li>\u274c Enhanced Agent (<code>ai_agent_enhanced.py</code> - RAG with vector store)</li> <li>\u274c Cognee Agent (<code>cognee_fia_agent.py</code> - external memory system)</li> <li>\u274c Multiple Agent Selection (CLI no longer needs <code>--agent</code> flag)</li> </ul>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#current-architecture","title":"Current Architecture","text":"<ul> <li>\u2705 Single Modern Agent (<code>ai_agent.py</code> - clean ReAct pattern)</li> <li>\u2705 Built-in Memory (conversation persistence)</li> <li>\u2705 Simplified Tools (clear function-based tools)</li> <li>\u2705 Streamlined CLI (no agent type selection needed)</li> </ul>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#updated-usage","title":"Updated Usage","text":""},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#cli-usage","title":"CLI Usage","text":"<pre><code># Simple - no agent selection needed\npyfia-ai database.duckdb\n\n# Or use the qa script\n./qa\n</code></pre>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#python-api-usage","title":"Python API Usage","text":"<pre><code>from pyfia.ai_agent import FIAAgent\n\n# Clean, simple initialization\nagent = FIAAgent(\n    db_path=\"database.duckdb\",\n    verbose=True,\n    checkpoint_dir=\"/path/to/checkpoints\"  # Optional\n)\n\n# Natural language queries\nresponse = agent.query(\"How many oak trees are in California?\")\n\n# Conversation memory\nresponse = agent.query(\"What about pine trees?\", thread_id=\"session1\")\n</code></pre>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#benefits-of-the-migration","title":"Benefits of the Migration","text":""},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#performance","title":"\ud83d\ude80 Performance","text":"<ul> <li>Faster startup: Single agent, no type selection</li> <li>Better caching: Built-in LangGraph optimizations</li> <li>Efficient memory: Automatic conversation management</li> </ul>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#maintainability","title":"\ud83e\uddf9 Maintainability","text":"<ul> <li>50% less code: Removed 3 agent implementations</li> <li>Single pattern: Only ReAct workflow to maintain</li> <li>Clear tools: Function-based tool definitions</li> <li>No complexity: No inheritance hierarchies</li> </ul>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#user-experience","title":"\ud83c\udfaf User Experience","text":"<ul> <li>Simpler CLI: No need to choose agent types</li> <li>Better memory: Automatic conversation persistence</li> <li>Consistent API: Single interface for all features</li> <li>Modern patterns: Follows 2025 LangChain best practices</li> </ul>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#developer-notes","title":"Developer Notes","text":""},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#tool-development","title":"Tool Development","text":"<p>Tools are now simple Python functions:</p> <pre><code>def my_new_tool(param: str) -&gt; str:\n    \"\"\"\n    Clear docstring describing the tool.\n\n    Args:\n        param: Description of parameter\n\n    Returns:\n        Formatted result string\n    \"\"\"\n    # Implementation\n    return result\n</code></pre>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#no-more-agent-selection","title":"No More Agent Selection","text":"<p>The CLI and Python API no longer require agent type selection. There's one agent that handles all use cases.</p>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#memory-management","title":"Memory Management","text":"<p>Memory is handled automatically: - Conversation threads via <code>thread_id</code> - Automatic checkpointing - History retrieval methods</p>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#migration-impact","title":"Migration Impact","text":""},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#for-users","title":"For Users","text":"<ul> <li>No breaking changes for basic usage</li> <li>Simpler commands (no <code>--agent</code> flag needed)</li> <li>Better performance and memory</li> <li>More consistent behavior</li> </ul>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#for-developers","title":"For Developers","text":"<ul> <li>Cleaner codebase to work with</li> <li>Easier tool development</li> <li>Single test target for agent functionality</li> <li>Modern patterns to follow</li> </ul>"},{"location":"ai_agent/MODERN_AGENT_MIGRATION/#whats-next","title":"What's Next","text":"<p>With the migration complete, future development focuses on:</p> <ol> <li>Enhanced Tools: Adding more specialized FIA analysis tools</li> <li>Better Prompts: Improving forest science understanding</li> <li>Performance: Optimizing query generation and execution</li> <li>Integration: Better integration with other pyFIA modules</li> </ol> <p>The modern agent provides a solid, maintainable foundation for all future AI capabilities in pyFIA.</p>"},{"location":"ai_agent/TOOLS_REFERENCE/","title":"AI Agent Tools Reference","text":"<p>This reference documents all tools available to the PyFIA AI Agent, including their parameters, return values, and usage examples.</p>"},{"location":"ai_agent/TOOLS_REFERENCE/#core-query-tools","title":"Core Query Tools","text":""},{"location":"ai_agent/TOOLS_REFERENCE/#execute_fia_query","title":"execute_fia_query","text":"<p>Execute SQL queries against the FIA database with safety checks and result formatting.</p> <pre><code>def execute_fia_query(\n    sql_query: str,\n    limit: Optional[int] = 100\n) -&gt; str\n</code></pre> <p>Parameters: - <code>sql_query</code>: Valid SQL SELECT query - <code>limit</code>: Maximum rows to return (default: 100, max: 10000)</p> <p>Returns: - Formatted query results as a string with headers and data</p> <p>Usage Examples: <pre><code>-- Count live trees by species\nSELECT SPCD, COUNT(*) as tree_count\nFROM TREE\nWHERE STATUSCD = 1\nGROUP BY SPCD\nORDER BY tree_count DESC\n\n-- Get forest area by ownership\nSELECT OWNGRPCD, SUM(CONDPROP_UNADJ) as area\nFROM COND\nWHERE COND_STATUS_CD = 1\nGROUP BY OWNGRPCD\n</code></pre></p> <p>Safety Features: - Read-only queries only (no INSERT, UPDATE, DELETE) - Automatic result limiting - Query timeout protection - SQL injection prevention</p>"},{"location":"ai_agent/TOOLS_REFERENCE/#count_trees_by_criteria","title":"count_trees_by_criteria","text":"<p>Optimized tool for counting trees with various filter criteria.</p> <pre><code>def count_trees_by_criteria(\n    evalid: Optional[int] = None,\n    species_code: Optional[int] = None,\n    status: Optional[str] = None,\n    min_diameter: Optional[float] = None,\n    max_diameter: Optional[float] = None,\n    state_code: Optional[int] = None\n) -&gt; str\n</code></pre> <p>Parameters: - <code>evalid</code>: Evaluation ID for statistical validity - <code>species_code</code>: FIA species code - <code>status</code>: Tree status (\"live\", \"dead\", \"all\") - <code>min_diameter</code>: Minimum DBH in inches - <code>max_diameter</code>: Maximum DBH in inches - <code>state_code</code>: State FIPS code</p> <p>Returns: - Formatted tree count with metadata</p> <p>Example: <pre><code># Count large live oak trees in California\ncount_trees_by_criteria(\n    species_code=802,  # White oak\n    status=\"live\",\n    min_diameter=20.0,\n    state_code=6\n)\n</code></pre></p>"},{"location":"ai_agent/TOOLS_REFERENCE/#schema-and-metadata-tools","title":"Schema and Metadata Tools","text":""},{"location":"ai_agent/TOOLS_REFERENCE/#get_database_schema","title":"get_database_schema","text":"<p>Retrieve schema information for FIA database tables.</p> <pre><code>def get_database_schema(\n    table_name: Optional[str] = None,\n    include_columns: bool = True,\n    include_indexes: bool = False\n) -&gt; str\n</code></pre> <p>Parameters: - <code>table_name</code>: Specific table name or None for all tables - <code>include_columns</code>: Include column details - <code>include_indexes</code>: Include index information</p> <p>Returns: - Formatted schema information</p> <p>Common Tables: | Table | Description | Key Columns | |-------|-------------|-------------| | PLOT | Plot locations and metadata | PLT_CN, EVALID, LAT, LON | | TREE | Individual tree measurements | TRE_CN, PLT_CN, SPCD, DIA, HT | | COND | Forest conditions | COND_CN, PLT_CN, FORESTCD | | POP_EVAL | Evaluation definitions | EVALID, STATECD, INVYR | | REF_SPECIES | Species reference | SPCD, COMMON_NAME, GENUS |</p>"},{"location":"ai_agent/TOOLS_REFERENCE/#get_evalid_info","title":"get_evalid_info","text":"<p>Get detailed information about evaluation IDs.</p> <pre><code>def get_evalid_info(\n    evalid: Optional[int] = None,\n    state_code: Optional[int] = None,\n    most_recent: bool = False\n) -&gt; str\n</code></pre> <p>Parameters: - <code>evalid</code>: Specific evaluation ID - <code>state_code</code>: Filter by state - <code>most_recent</code>: Return only the most recent evaluation</p> <p>Returns: - Evaluation metadata including:   - State and year information   - Evaluation type (VOL, GRM, CHNG)   - Plot counts   - Temporal boundaries</p> <p>Example Output: <pre><code>EVALID: 372301\nState: North Carolina\nYears: 2019-2023\nType: Volume (VOL)\nPlots: 3,521\nArea: 21.9 million acres\n</code></pre></p>"},{"location":"ai_agent/TOOLS_REFERENCE/#species-and-location-tools","title":"Species and Location Tools","text":""},{"location":"ai_agent/TOOLS_REFERENCE/#find_species_codes","title":"find_species_codes","text":"<p>Find FIA species codes by common or scientific names.</p> <pre><code>def find_species_codes(\n    species_name: str,\n    search_type: str = \"both\",\n    limit: int = 10\n) -&gt; str\n</code></pre> <p>Parameters: - <code>species_name</code>: Common or scientific name to search - <code>search_type</code>: \"common\", \"scientific\", or \"both\" - <code>limit</code>: Maximum results to return</p> <p>Returns: - List of matching species with codes and names</p> <p>Examples: <pre><code># Search by common name\nfind_species_codes(\"oak\")\n# Returns: Multiple oak species\n\n# Search by genus\nfind_species_codes(\"Quercus\", search_type=\"scientific\")\n# Returns: All oak species\n\n# Specific species\nfind_species_codes(\"loblolly pine\")\n# Returns: SPCD 131 - Pinus taeda\n</code></pre></p> <p>Common Species Codes: | Code | Common Name | Scientific Name | |------|-------------|-----------------| | 131 | loblolly pine | Pinus taeda | | 202 | Douglas-fir | Pseudotsuga menziesii | | 316 | red maple | Acer rubrum | | 802 | white oak | Quercus alba | | 833 | northern red oak | Quercus rubra |</p>"},{"location":"ai_agent/TOOLS_REFERENCE/#get_state_codes","title":"get_state_codes","text":"<p>Look up state FIPS codes and names.</p> <pre><code>def get_state_codes(\n    state_name: Optional[str] = None,\n    region: Optional[str] = None\n) -&gt; str\n</code></pre> <p>Parameters: - <code>state_name</code>: State name or abbreviation - <code>region</code>: Filter by FIA region</p> <p>Returns: - State codes and regional information</p> <p>FIA Regions: | Region | States | |--------|--------| | Northern | ME, NH, VT, MA, RI, CT, NY, NJ, PA, DE, MD, OH, IN, IL, MI, WI, WV, MO, IA, MN, ND, SD, NE, KS | | Southern | VA, NC, SC, GA, FL, KY, TN, AL, MS, AR, LA, OK, TX | | Rocky Mountain | MT, ID, WY, NV, UT, CO, AZ, NM | | Pacific Northwest | WA, OR, CA, AK, HI |</p>"},{"location":"ai_agent/TOOLS_REFERENCE/#advanced-query-tools","title":"Advanced Query Tools","text":""},{"location":"ai_agent/TOOLS_REFERENCE/#analyze_temporal_change","title":"analyze_temporal_change","text":"<p>Analyze changes between two time periods.</p> <pre><code>def analyze_temporal_change(\n    evalid1: int,\n    evalid2: int,\n    metric: str = \"volume\",\n    group_by: Optional[str] = None\n) -&gt; str\n</code></pre> <p>Parameters: - <code>evalid1</code>: First evaluation ID (earlier) - <code>evalid2</code>: Second evaluation ID (later) - <code>metric</code>: What to measure (\"volume\", \"area\", \"trees\", \"biomass\") - <code>group_by</code>: Grouping variable (\"species\", \"owner\", \"forest_type\")</p> <p>Returns: - Change analysis with statistics</p>"},{"location":"ai_agent/TOOLS_REFERENCE/#explain_domain_filters","title":"explain_domain_filters","text":"<p>Explain the domain filtering applied to a query.</p> <pre><code>def explain_domain_filters(\n    tree_type: str = \"all\",\n    land_type: str = \"forest\",\n    custom_filters: Optional[Dict] = None\n) -&gt; str\n</code></pre> <p>Parameters: - <code>tree_type</code>: Type of trees included - <code>land_type</code>: Type of land included - <code>custom_filters</code>: Additional filter criteria</p> <p>Returns: - Human-readable explanation of filters</p>"},{"location":"ai_agent/TOOLS_REFERENCE/#tool-usage-patterns","title":"Tool Usage Patterns","text":""},{"location":"ai_agent/TOOLS_REFERENCE/#basic-query-pattern","title":"Basic Query Pattern","text":"<pre><code># 1. Get schema information\nschema = get_database_schema(\"TREE\")\n\n# 2. Find species codes\nspecies = find_species_codes(\"pine\")\n\n# 3. Execute query\nquery = \"\"\"\nSELECT COUNT(*) as pine_count\nFROM TREE\nWHERE SPCD IN (131, 121, 111)\n  AND STATUSCD = 1\n\"\"\"\nresults = execute_fia_query(query)\n</code></pre>"},{"location":"ai_agent/TOOLS_REFERENCE/#statistical-analysis-pattern","title":"Statistical Analysis Pattern","text":"<pre><code># 1. Find appropriate EVALID\nevalid_info = get_evalid_info(state_code=37, most_recent=True)\n\n# 2. Use EVALID for valid estimates\ncount = count_trees_by_criteria(\n    evalid=372301,\n    status=\"live\"\n)\n</code></pre>"},{"location":"ai_agent/TOOLS_REFERENCE/#comparative-analysis-pattern","title":"Comparative Analysis Pattern","text":"<pre><code># 1. Get multiple EVALIDs\neval1 = get_evalid_info(state_code=37, year=2015)\neval2 = get_evalid_info(state_code=37, year=2023)\n\n# 2. Compare metrics\nchange = analyze_temporal_change(eval1, eval2, metric=\"volume\")\n</code></pre>"},{"location":"ai_agent/TOOLS_REFERENCE/#best-practices","title":"Best Practices","text":""},{"location":"ai_agent/TOOLS_REFERENCE/#1-always-use-evalids","title":"1. Always Use EVALIDs","text":"<p>For statistically valid estimates: <pre><code># Good - uses EVALID\ncount_trees_by_criteria(evalid=372301)\n\n# Bad - no statistical validity\nexecute_fia_query(\"SELECT COUNT(*) FROM TREE\")\n</code></pre></p>"},{"location":"ai_agent/TOOLS_REFERENCE/#2-check-schema-first","title":"2. Check Schema First","text":"<p>Before complex queries: <pre><code># Check available columns\nschema = get_database_schema(\"TREE\")\n\n# Then build query\nquery = \"SELECT ... FROM TREE WHERE ...\"\n</code></pre></p>"},{"location":"ai_agent/TOOLS_REFERENCE/#3-use-specific-tools","title":"3. Use Specific Tools","text":"<p>Prefer specialized tools over raw SQL: <pre><code># Good - optimized tool\ncount_trees_by_criteria(species_code=131)\n\n# Less optimal - raw SQL\nexecute_fia_query(\"SELECT COUNT(*) FROM TREE WHERE SPCD=131\")\n</code></pre></p>"},{"location":"ai_agent/TOOLS_REFERENCE/#4-handle-large-results","title":"4. Handle Large Results","text":"<p>Use limits and filtering: <pre><code># Add reasonable limits\nexecute_fia_query(query, limit=1000)\n\n# Filter at query level\nquery = \"\"\"\nSELECT TOP 100 *\nFROM TREE\nWHERE DIA &gt; 20\nORDER BY DIA DESC\n\"\"\"\n</code></pre></p>"},{"location":"ai_agent/TOOLS_REFERENCE/#error-handling","title":"Error Handling","text":"<p>Common error messages and solutions:</p> Error Cause Solution \"Query validation failed\" Invalid SQL syntax Check query structure \"No EVALID specified\" Missing evaluation ID Use get_evalid_info first \"Species not found\" Invalid species name Try partial match or genus \"Result limit exceeded\" Too many rows Add LIMIT clause or use filters \"Read-only access\" Write operation attempted Use SELECT queries only"},{"location":"ai_agent/TOOLS_REFERENCE/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use Indexes: Filter on indexed columns (PLT_CN, EVALID, SPCD)</li> <li>Limit Early: Apply WHERE clauses before JOINs</li> <li>Aggregate Smart: Use GROUP BY to reduce result size</li> <li>Cache Results: Agent caches recent queries automatically</li> </ol>"},{"location":"ai_agent/TOOLS_REFERENCE/#integration-examples","title":"Integration Examples","text":""},{"location":"ai_agent/TOOLS_REFERENCE/#with-domain-knowledge","title":"With Domain Knowledge","text":"<pre><code># Get domain expertise\nconcepts = get_fia_concepts()\nunits = get_measurement_units()\n\n# Use in queries\nquery = f\"\"\"\nSELECT \n    SPCD,\n    AVG(DIA) as avg_dbh_inches,\n    AVG({biomass_equation}) as avg_biomass_tons\nFROM TREE\nWHERE STATUSCD = 1\nGROUP BY SPCD\n\"\"\"\n</code></pre>"},{"location":"ai_agent/TOOLS_REFERENCE/#with-result-formatting","title":"With Result Formatting","text":"<p>Results are automatically formatted using the result formatter: - Statistical precision (SE, CI) - Reliability ratings - Proper units - Export options</p>"},{"location":"ai_agent/TOOLS_REFERENCE/#tool-development","title":"Tool Development","text":"<p>To add new tools, see the Developer Guide. Tools should: - Have clear, descriptive names - Include comprehensive docstrings - Return formatted strings - Handle errors gracefully - Be stateless and independent</p>"},{"location":"ai_agent/TROUBLESHOOTING/","title":"AI Agent Troubleshooting Guide","text":"<p>This guide helps resolve common issues with the PyFIA AI Agent.</p>"},{"location":"ai_agent/TROUBLESHOOTING/#quick-diagnostics","title":"Quick Diagnostics","text":"<p>Run this command to check your setup:</p> <pre><code># Check all dependencies and connections\npyfia-ai --diagnose\n</code></pre> <p>This will verify: - \u2713 Python version (3.11+) - \u2713 Required packages installed - \u2713 OpenAI API key configured - \u2713 Database connection - \u2713 Memory/cache directories</p>"},{"location":"ai_agent/TROUBLESHOOTING/#common-issues","title":"Common Issues","text":""},{"location":"ai_agent/TROUBLESHOOTING/#1-openai-api-key-issues","title":"1. OpenAI API Key Issues","text":""},{"location":"ai_agent/TROUBLESHOOTING/#problem-openai-api-key-not-found","title":"Problem: \"OpenAI API key not found\"","text":"<p>Solution: <pre><code># Set the API key\nexport OPENAI_API_KEY=\"sk-...\"\n\n# Or add to your shell profile\necho 'export OPENAI_API_KEY=\"sk-...\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p>"},{"location":"ai_agent/TROUBLESHOOTING/#problem-invalid-api-key","title":"Problem: \"Invalid API key\"","text":"<p>Check: - Key starts with <code>sk-</code> - No extra spaces or quotes - Key hasn't been revoked</p> <p>Test: <pre><code>import openai\nopenai.api_key = \"your-key\"\nopenai.models.list()  # Should work\n</code></pre></p>"},{"location":"ai_agent/TROUBLESHOOTING/#2-database-connection-issues","title":"2. Database Connection Issues","text":""},{"location":"ai_agent/TROUBLESHOOTING/#problem-database-not-found","title":"Problem: \"Database not found\"","text":"<p>Solutions:</p> <ol> <li> <p>Check file path: <pre><code># Verify file exists\nls -la /path/to/database.duckdb\n\n# Use absolute path\npyfia-ai /absolute/path/to/database.duckdb\n</code></pre></p> </li> <li> <p>Check permissions: <pre><code># Ensure read access\nchmod 644 database.duckdb\n</code></pre></p> </li> </ol>"},{"location":"ai_agent/TROUBLESHOOTING/#problem-cannot-open-database","title":"Problem: \"Cannot open database\"","text":"<p>Possible causes: - Database is corrupted - Wrong DuckDB version - File is locked by another process</p> <p>Fix: <pre><code>import duckdb\n# Test connection\nconn = duckdb.connect(\"database.duckdb\", read_only=True)\nconn.execute(\"SELECT 1\").fetchall()\n</code></pre></p>"},{"location":"ai_agent/TROUBLESHOOTING/#3-import-and-dependency-issues","title":"3. Import and Dependency Issues","text":""},{"location":"ai_agent/TROUBLESHOOTING/#problem-modulenotfounderror-langchain","title":"Problem: \"ModuleNotFoundError: langchain\"","text":"<p>Solution: <pre><code># Install with AI dependencies\npip install pyfia[langchain]\n\n# Or install all\npip install pyfia[all]\n</code></pre></p>"},{"location":"ai_agent/TROUBLESHOOTING/#problem-importerror-cannot-import-name-create_react_agent","title":"Problem: \"ImportError: cannot import name 'create_react_agent'\"","text":"<p>Fix - Update LangGraph: <pre><code>pip install --upgrade langgraph langchain-core\n</code></pre></p>"},{"location":"ai_agent/TROUBLESHOOTING/#4-query-processing-issues","title":"4. Query Processing Issues","text":""},{"location":"ai_agent/TROUBLESHOOTING/#problem-no-results-found","title":"Problem: \"No results found\"","text":"<p>Common causes and fixes:</p> <ol> <li> <p>Wrong EVALID: <pre><code># Find available EVALIDs\nfia-ai&gt; evalid\n\n# Use correct EVALID\nfia-ai&gt; Using evalid 372301, count trees\n</code></pre></p> </li> <li> <p>Too restrictive filters: <pre><code># Start broad\nfia-ai&gt; How many trees total?\n\n# Then narrow down\nfia-ai&gt; How many oak trees?\nfia-ai&gt; How many large oak trees?\n</code></pre></p> </li> <li> <p>Species name issues: <pre><code># Use partial names\nfia-ai&gt; species pine  # Finds all pines\n\n# Or use scientific names\nfia-ai&gt; Find Quercus alba\n</code></pre></p> </li> </ol>"},{"location":"ai_agent/TROUBLESHOOTING/#problem-query-timeout","title":"Problem: \"Query timeout\"","text":"<p>Solutions:</p> <ol> <li> <p>Simplify query: <pre><code># Instead of\nfia-ai&gt; Show all tree measurements\n\n# Use\nfia-ai&gt; Show tree counts by species\n</code></pre></p> </li> <li> <p>Add limits: <pre><code>fia-ai&gt; Show top 100 plots by biomass\n</code></pre></p> </li> <li> <p>Use specific filters: <pre><code>fia-ai&gt; Show data for North Carolina only\n</code></pre></p> </li> </ol>"},{"location":"ai_agent/TROUBLESHOOTING/#5-memory-and-performance-issues","title":"5. Memory and Performance Issues","text":""},{"location":"ai_agent/TROUBLESHOOTING/#problem-conversation-not-persisting","title":"Problem: \"Conversation not persisting\"","text":"<p>Check checkpoint directory: <pre><code># Default location\nls ~/.pyfia/checkpoints/\n\n# Set custom location\npyfia-ai database.duckdb --checkpoint-dir ./my_checkpoints\n</code></pre></p> <p>Fix permissions: <pre><code>mkdir -p ~/.pyfia/checkpoints\nchmod 755 ~/.pyfia/checkpoints\n</code></pre></p>"},{"location":"ai_agent/TROUBLESHOOTING/#problem-slow-responses","title":"Problem: \"Slow responses\"","text":"<p>Optimizations:</p> <ol> <li> <p>Enable caching: <pre><code>agent = FIAAgent(\"db.duckdb\", enable_cache=True)\n</code></pre></p> </li> <li> <p>Reduce token usage: <pre><code>agent = FIAAgent(\"db.duckdb\", max_tokens=1000)\n</code></pre></p> </li> <li> <p>Use faster model: <pre><code>agent = FIAAgent(\"db.duckdb\", model_name=\"gpt-3.5-turbo\")\n</code></pre></p> </li> </ol>"},{"location":"ai_agent/TROUBLESHOOTING/#6-formatting-and-display-issues","title":"6. Formatting and Display Issues","text":""},{"location":"ai_agent/TROUBLESHOOTING/#problem-no-colors-or-formatting-in-terminal","title":"Problem: \"No colors or formatting in terminal\"","text":"<p>Solutions:</p> <ol> <li> <p>Check terminal support: <pre><code># Test Rich support\npython -c \"from rich import print; print('[bold green]Test[/bold green]')\"\n</code></pre></p> </li> <li> <p>Force color output: <pre><code>export FORCE_COLOR=1\npyfia-ai database.duckdb\n</code></pre></p> </li> <li> <p>Disable Rich if needed: <pre><code>agent = FIAAgent(\"db.duckdb\", use_rich=False)\n</code></pre></p> </li> </ol>"},{"location":"ai_agent/TROUBLESHOOTING/#problem-tables-not-displaying-correctly","title":"Problem: \"Tables not displaying correctly\"","text":"<p>Fix terminal width: <pre><code># Check terminal size\necho $COLUMNS\n\n# Set minimum width\nexport COLUMNS=120\n</code></pre></p>"},{"location":"ai_agent/TROUBLESHOOTING/#error-messages-reference","title":"Error Messages Reference","text":""},{"location":"ai_agent/TROUBLESHOOTING/#api-errors","title":"API Errors","text":"Error Meaning Solution <code>RateLimitError</code> Too many requests Wait and retry, or upgrade API plan <code>InvalidRequestError</code> Bad request format Check query syntax <code>AuthenticationError</code> Invalid API key Verify key configuration <code>APIConnectionError</code> Network issue Check internet connection"},{"location":"ai_agent/TROUBLESHOOTING/#database-errors","title":"Database Errors","text":"Error Meaning Solution <code>CatalogException</code> Table not found Verify table names with <code>schema</code> <code>BinderException</code> Column not found Check column names <code>ParserException</code> SQL syntax error Review query syntax <code>IOException</code> Can't read file Check file path and permissions"},{"location":"ai_agent/TROUBLESHOOTING/#agent-errors","title":"Agent Errors","text":"Error Meaning Solution <code>ToolExecutionError</code> Tool failed Check tool parameters <code>ValidationError</code> Invalid input Review input format <code>MemoryError</code> Out of memory Reduce result size <code>TimeoutError</code> Query too slow Simplify query"},{"location":"ai_agent/TROUBLESHOOTING/#debugging-techniques","title":"Debugging Techniques","text":""},{"location":"ai_agent/TROUBLESHOOTING/#1-enable-verbose-mode","title":"1. Enable Verbose Mode","text":"<pre><code># See detailed processing\npyfia-ai database.duckdb --verbose\n\n# Or in Python\nagent = FIAAgent(\"db.duckdb\", verbose=True)\n</code></pre>"},{"location":"ai_agent/TROUBLESHOOTING/#2-check-logs","title":"2. Check Logs","text":"<pre><code># View agent logs\ntail -f ~/.pyfia/logs/agent.log\n\n# Enable debug logging\nexport PYFIA_LOG_LEVEL=DEBUG\n</code></pre>"},{"location":"ai_agent/TROUBLESHOOTING/#3-test-individual-components","title":"3. Test Individual Components","text":"<pre><code># Test database connection\nfrom pyfia.database.query_interface import DuckDBQueryInterface\nqi = DuckDBQueryInterface(\"database.duckdb\")\nqi.test_connection()\n\n# Test tools directly\nfrom pyfia.ai.agent import find_species_codes\nresult = find_species_codes(\"oak\")\nprint(result)\n</code></pre>"},{"location":"ai_agent/TROUBLESHOOTING/#4-trace-langchain-execution","title":"4. Trace LangChain Execution","text":"<pre><code># Enable LangChain tracing\nexport LANGCHAIN_TRACING_V2=true\nexport LANGCHAIN_API_KEY=\"your-langsmith-key\"\n</code></pre>"},{"location":"ai_agent/TROUBLESHOOTING/#performance-optimization","title":"Performance Optimization","text":""},{"location":"ai_agent/TROUBLESHOOTING/#query-optimization","title":"Query Optimization","text":"<ol> <li> <p>Use EVALIDs: <pre><code># Slow - scans all data\nfia-ai&gt; Count all trees\n\n# Fast - uses EVALID index\nfia-ai&gt; Count trees in evalid 372301\n</code></pre></p> </li> <li> <p>Filter early: <pre><code># Efficient\nfia-ai&gt; Show pine volume in California\n\n# Inefficient  \nfia-ai&gt; Show all volume, then filter for pine in California\n</code></pre></p> </li> </ol>"},{"location":"ai_agent/TROUBLESHOOTING/#resource-management","title":"Resource Management","text":"<ol> <li> <p>Limit memory usage: <pre><code># Set max result size\nagent = FIAAgent(\"db.duckdb\", max_result_mb=100)\n</code></pre></p> </li> <li> <p>Clear cache periodically: <pre><code>fia-ai&gt; clear cache\n</code></pre></p> </li> <li> <p>Close unused connections: <pre><code>agent.close()  # When done\n</code></pre></p> </li> </ol>"},{"location":"ai_agent/TROUBLESHOOTING/#getting-help","title":"Getting Help","text":""},{"location":"ai_agent/TROUBLESHOOTING/#self-help-resources","title":"Self-Help Resources","text":"<ol> <li> <p>Built-in help: <pre><code>fia-ai&gt; help\nfia-ai&gt; help export\n</code></pre></p> </li> <li> <p>Examples: <pre><code>fia-ai&gt; show examples\n</code></pre></p> </li> <li> <p>Documentation:</p> </li> <li>User Guide</li> <li>Examples</li> <li>Tools Reference</li> </ol>"},{"location":"ai_agent/TROUBLESHOOTING/#community-support","title":"Community Support","text":"<ol> <li>GitHub Issues: Report bugs and request features</li> <li>Discussions: Ask questions and share tips</li> <li>Wiki: Community-contributed guides</li> </ol>"},{"location":"ai_agent/TROUBLESHOOTING/#debug-information","title":"Debug Information","text":"<p>When reporting issues, include:</p> <pre><code># System info\npython --version\npip show pyfia\n\n# Error details\npyfia-ai --diagnose &gt; debug_info.txt\n\n# Sample query that fails\necho \"Your problematic query\"\n</code></pre>"},{"location":"ai_agent/TROUBLESHOOTING/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"ai_agent/TROUBLESHOOTING/#reset-agent-state","title":"Reset Agent State","text":"<pre><code># Clear all caches and checkpoints\nrm -rf ~/.pyfia/checkpoints/*\nrm -rf ~/.pyfia/cache/*\n\n# Restart fresh\npyfia-ai database.duckdb\n</code></pre>"},{"location":"ai_agent/TROUBLESHOOTING/#reinstall-package","title":"Reinstall Package","text":"<pre><code># Complete reinstall\npip uninstall pyfia\npip install pyfia[all] --force-reinstall\n</code></pre>"},{"location":"ai_agent/TROUBLESHOOTING/#database-repair","title":"Database Repair","text":"<pre><code>import duckdb\n\n# Verify database integrity\nconn = duckdb.connect(\"database.duckdb\")\nconn.execute(\"PRAGMA integrity_check\").fetchall()\n\n# Export and reimport if needed\nconn.execute(\"EXPORT DATABASE 'backup' (FORMAT PARQUET)\")\n</code></pre>"},{"location":"ai_agent/TROUBLESHOOTING/#preventive-measures","title":"Preventive Measures","text":"<ol> <li> <p>Regular Updates: <pre><code>pip install --upgrade pyfia[all]\n</code></pre></p> </li> <li> <p>Monitor Resources: <pre><code># Check disk space\ndf -h ~/.pyfia\n\n# Monitor memory\nhtop  # While running agent\n</code></pre></p> </li> <li> <p>Backup Conversations: <pre><code># Backup checkpoints\ncp -r ~/.pyfia/checkpoints ~/.pyfia/checkpoints.backup\n</code></pre></p> </li> <li> <p>Test After Updates: <pre><code>pyfia-ai --diagnose\n</code></pre></p> </li> </ol> <p>Remember: Most issues can be resolved by checking the basics - API key, database path, and dependencies. When in doubt, start with <code>pyfia-ai --diagnose</code>.</p>"},{"location":"ai_agent/USER_GUIDE/","title":"PyFIA AI Agent User Guide","text":"<p>This comprehensive guide covers all features and capabilities of the PyFIA AI Agent.</p>"},{"location":"ai_agent/USER_GUIDE/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Getting Started</li> <li>Natural Language Queries</li> <li>CLI Commands</li> <li>Advanced Features</li> <li>Configuration</li> <li>Best Practices</li> </ol>"},{"location":"ai_agent/USER_GUIDE/#getting-started","title":"Getting Started","text":""},{"location":"ai_agent/USER_GUIDE/#installation-requirements","title":"Installation Requirements","text":"<ul> <li>Python 3.11 or higher</li> <li>OpenAI API key</li> <li>FIA database in DuckDB format</li> </ul>"},{"location":"ai_agent/USER_GUIDE/#first-run","title":"First Run","text":"<pre><code># Set your API key\nexport OPENAI_API_KEY=\"sk-...\"\n\n# Start the AI agent\npyfia-ai /path/to/fia_database.duckdb\n\n# You'll see a welcome message\n\ud83c\udf32 Welcome to PyFIA AI Assistant!\nConnected to database: /path/to/fia_database.duckdb\n\nType 'help' for available commands or ask any question about forest inventory data.\n\nfia-ai&gt;\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#natural-language-queries","title":"Natural Language Queries","text":""},{"location":"ai_agent/USER_GUIDE/#basic-questions","title":"Basic Questions","text":"<p>The AI agent understands natural language questions about forest inventory data:</p> <pre><code># Tree counts\nfia-ai&gt; How many live trees are there?\nfia-ai&gt; Count oak trees in California\nfia-ai&gt; What's the most common species in Oregon?\n\n# Forest area\nfia-ai&gt; Total forest area in the Southeast\nfia-ai&gt; Timberland area by ownership type\nfia-ai&gt; Non-forest land in Texas\n\n# Volume and biomass\nfia-ai&gt; Total volume of merchantable timber\nfia-ai&gt; Aboveground biomass by species\nfia-ai&gt; Carbon storage in national forests\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#complex-queries","title":"Complex Queries","text":"<p>The agent handles sophisticated analysis requests:</p> <pre><code># Multi-dimensional analysis\nfia-ai&gt; Show volume by species and diameter class for public lands\n\n# Temporal comparisons\nfia-ai&gt; Compare forest area between 2010 and 2020 evaluations\n\n# Statistical queries\nfia-ai&gt; Calculate average trees per acre with confidence intervals\n\n# Spatial filtering\nfia-ai&gt; Find counties with declining oak populations\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#follow-up-questions","title":"Follow-up Questions","text":"<p>The agent maintains conversation context:</p> <pre><code>fia-ai&gt; How many pine trees are in Georgia?\n# Response shows pine tree count...\n\nfia-ai&gt; What about oak trees?\n# Agent understands \"in Georgia\" context\n\nfia-ai&gt; Show me the top 5 species\n# Agent knows you mean \"top 5 species in Georgia\"\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#cli-commands","title":"CLI Commands","text":""},{"location":"ai_agent/USER_GUIDE/#database-commands","title":"Database Commands","text":"Command Description Example <code>connect &lt;path&gt;</code> Connect to a different database <code>connect /new/path/db.duckdb</code> <code>schema [table]</code> View database schema <code>schema TREE</code> <code>tables</code> List all available tables <code>tables</code> <code>evalid [search]</code> Show evaluation IDs <code>evalid North Carolina</code>"},{"location":"ai_agent/USER_GUIDE/#analysis-commands","title":"Analysis Commands","text":"Command Description Example <code>concepts [term]</code> Explore FIA concepts <code>concepts biomass</code> <code>species [search]</code> Look up species codes <code>species oak</code> <code>states</code> List state codes <code>states</code>"},{"location":"ai_agent/USER_GUIDE/#result-management","title":"Result Management","text":"Command Description Example <code>last [n]</code> Show last n results <code>last 5</code> <code>export &lt;file&gt;</code> Export results <code>export results.csv</code> <code>history</code> View query history <code>history</code> <code>save</code> Save current session <code>save session.json</code>"},{"location":"ai_agent/USER_GUIDE/#utility-commands","title":"Utility Commands","text":"Command Description Example <code>clear</code> Clear the screen <code>clear</code> <code>help [command]</code> Get help <code>help export</code> <code>settings</code> View/edit settings <code>settings</code> <code>quit</code> or <code>exit</code> Exit the application <code>quit</code>"},{"location":"ai_agent/USER_GUIDE/#advanced-features","title":"Advanced Features","text":""},{"location":"ai_agent/USER_GUIDE/#working-with-evalids","title":"Working with EVALIDs","text":"<p>EVALIDs are crucial for statistically valid estimates:</p> <pre><code># View available evaluations\nfia-ai&gt; evalid\n\n# Use specific EVALID\nfia-ai&gt; Using evalid 372301, what's the total forest area?\n\n# Find latest evaluation\nfia-ai&gt; What's the most recent evaluation for North Carolina?\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#conversation-memory","title":"Conversation Memory","text":"<p>The agent remembers your conversation:</p> <pre><code># Python API with persistent memory\nagent = FIAAgent(\"database.duckdb\", checkpoint_dir=\"./checkpoints\")\n\n# Use thread IDs for separate conversations\nresponse1 = agent.query(\"Count trees\", thread_id=\"analysis1\")\nresponse2 = agent.query(\"Count trees\", thread_id=\"analysis2\")\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#export-formats","title":"Export Formats","text":"<p>Export results in various formats:</p> <pre><code># CSV export\nfia-ai&gt; export results.csv\n\n# JSON export\nfia-ai&gt; export data.json\n\n# Markdown table\nfia-ai&gt; export report.md\n\n# Excel (if pandas installed)\nfia-ai&gt; export analysis.xlsx\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#query-validation","title":"Query Validation","text":"<p>The agent validates queries before execution:</p> <pre><code>fia-ai&gt; Show me invalid SQL\n\u274c Query validation failed: Invalid SQL syntax\n\nfia-ai&gt; Delete all trees  \n\u274c Safety check failed: Read-only access - no modifications allowed\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#configuration","title":"Configuration","text":""},{"location":"ai_agent/USER_GUIDE/#agent-settings","title":"Agent Settings","text":"<p>Configure the agent behavior:</p> <pre><code>from pyfia.ai.agent import FIAAgent\n\nagent = FIAAgent(\n    db_path=\"database.duckdb\",\n    model_name=\"gpt-4o\",           # AI model to use\n    temperature=0.1,               # Response consistency (0-1)\n    verbose=True,                  # Detailed logging\n    result_limit=1000,             # Max rows to return\n    enable_human_approval=False    # Human-in-the-loop mode\n)\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#environment-variables","title":"Environment Variables","text":"<pre><code># Required\nexport OPENAI_API_KEY=\"sk-...\"\n\n# Optional\nexport PYFIA_MODEL=\"gpt-4o\"\nexport PYFIA_TEMPERATURE=\"0.1\"\nexport PYFIA_VERBOSE=\"true\"\nexport PYFIA_RESULT_LIMIT=\"500\"\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#cli-configuration-file","title":"CLI Configuration File","text":"<p>Create <code>~/.pyfia/config.json</code>:</p> <pre><code>{\n  \"model\": \"gpt-4o\",\n  \"temperature\": 0.1,\n  \"result_limit\": 1000,\n  \"export_format\": \"csv\",\n  \"theme\": \"forest\",\n  \"auto_save\": true\n}\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#best-practices","title":"Best Practices","text":""},{"location":"ai_agent/USER_GUIDE/#writing-effective-queries","title":"Writing Effective Queries","text":"<ol> <li>Be Specific About Location</li> <li>\u274c \"How many trees?\"</li> <li> <p>\u2705 \"How many trees in California?\"</p> </li> <li> <p>Include Time Context</p> </li> <li>\u274c \"Show forest area\"</li> <li> <p>\u2705 \"Show forest area for the 2023 evaluation\"</p> </li> <li> <p>Specify Measurements</p> </li> <li>\u274c \"What's the volume?\"</li> <li> <p>\u2705 \"What's the net merchantable volume in cubic feet?\"</p> </li> <li> <p>Use Proper Terminology</p> </li> <li>\u274c \"Big trees\"</li> <li>\u2705 \"Trees with DBH &gt;= 20 inches\"</li> </ol>"},{"location":"ai_agent/USER_GUIDE/#understanding-results","title":"Understanding Results","text":"<ol> <li>Check the EVALID: Results are specific to an evaluation</li> <li>Note Sample Size: More plots = more reliable estimates</li> <li>Review Standard Errors: Lower SE% = higher precision</li> <li>Consider Scope: State-level vs county-level estimates</li> </ol>"},{"location":"ai_agent/USER_GUIDE/#performance-tips","title":"Performance Tips","text":"<ol> <li> <p>Start Broad, Then Narrow <pre><code>fia-ai&gt; How many tree species are there?\nfia-ai&gt; Show me the top 10 by volume\nfia-ai&gt; Focus on pine species only\n</code></pre></p> </li> <li> <p>Use Filters Wisely</p> </li> <li>Add geographic filters first</li> <li>Then temporal filters</li> <li> <p>Finally, attribute filters</p> </li> <li> <p>Leverage Memory</p> </li> <li>Ask follow-up questions</li> <li>Reference previous results</li> <li>Build complex analyses incrementally</li> </ol>"},{"location":"ai_agent/USER_GUIDE/#common-patterns","title":"Common Patterns","text":""},{"location":"ai_agent/USER_GUIDE/#species-analysis","title":"Species Analysis","text":"<pre><code># Basic species composition\nfia-ai&gt; What are the dominant species by basal area?\n\n# Species-specific analysis\nfia-ai&gt; Show all pine species with their volume estimates\n\n# Rare species\nfia-ai&gt; Which species have fewer than 1000 trees statewide?\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#temporal-analysis","title":"Temporal Analysis","text":"<pre><code># Change over time\nfia-ai&gt; How has forest area changed over the last 20 years?\n\n# Specific period comparison\nfia-ai&gt; Compare oak volume between 2010 and 2020 evaluations\n\n# Trends\nfia-ai&gt; Show annual mortality rates for the last 5 evaluations\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#spatial-analysis","title":"Spatial Analysis","text":"<pre><code># Regional patterns\nfia-ai&gt; Which counties have the most forest land?\n\n# Ownership analysis\nfia-ai&gt; Compare species diversity between public and private lands\n\n# Ecosystem analysis\nfia-ai&gt; Show forest types by ecoregion\n</code></pre>"},{"location":"ai_agent/USER_GUIDE/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"ai_agent/USER_GUIDE/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<ul> <li><code>\u2191</code>/<code>\u2193</code> - Navigate command history</li> <li><code>Ctrl+C</code> - Cancel current query</li> <li><code>Ctrl+D</code> - Exit (same as <code>quit</code>)</li> <li><code>Ctrl+L</code> - Clear screen (same as <code>clear</code>)</li> </ul>"},{"location":"ai_agent/USER_GUIDE/#hidden-features","title":"Hidden Features","text":"<ul> <li><code>debug on/off</code> - Toggle debug mode</li> <li><code>profile</code> - Show query performance stats</li> <li><code>cache clear</code> - Clear query cache</li> <li><code>version</code> - Show version information</li> </ul>"},{"location":"ai_agent/USER_GUIDE/#integration-ideas","title":"Integration Ideas","text":"<ol> <li>Jupyter Notebooks: Use the Python API for analysis</li> <li>Automated Reports: Script regular queries</li> <li>Data Pipelines: Export results for further processing</li> <li>Dashboards: Feed real-time queries to visualization tools</li> </ol>"},{"location":"ai_agent/USER_GUIDE/#next-steps","title":"Next Steps","text":"<ul> <li>Explore real-world examples</li> <li>Learn about technical architecture</li> <li>Review troubleshooting guide</li> <li>Read the developer guide to extend functionality</li> </ul>"},{"location":"queries/","title":"FIA Query Library","text":"<p>This directory contains a comprehensive, organized collection of tested and validated SQL queries for the FIA database. All queries have been verified to work with the current database structure and follow EVALIDator methodology.</p>"},{"location":"queries/#query-categories","title":"\ud83d\udcc1 Query Categories","text":""},{"location":"queries/#basic-tree-queries","title":"\ud83c\udf33 Basic Tree Queries","text":"<ul> <li>Oregon Total Live Trees - EVALIDator-style tree counting with proper adjustment factors</li> <li>Core tree enumeration and basic forest inventory queries</li> </ul>"},{"location":"queries/#growth-removal-and-mortality-grm","title":"\ud83c\udf32 Growth, Removal, and Mortality (GRM)","text":"<ul> <li>Colorado Merchantable Volume Mortality - Annual mortality of growing-stock timber volume</li> <li>North Carolina Tree Mortality Rate - Simple mortality rate in trees per acre per year</li> <li>Advanced queries using TREE_GRM_* tables with proper component filtering</li> </ul>"},{"location":"queries/#biomass-and-carbon","title":"\ud83c\udf3f Biomass and Carbon","text":"<ul> <li>Colorado Above-Ground Biomass - Species-specific biomass calculations with wood/bark properties</li> <li>Complex biomass equations with moisture content and specific gravity adjustments</li> </ul>"},{"location":"queries/#tree-count-and-density","title":"\ud83c\udf33 Tree Count and Density","text":"<ul> <li>North Carolina Live Trees by Species - Species-level tree enumeration</li> <li>Minnesota Forest Area by Type Group - Forest type group area calculations</li> <li>Tree per acre (TPA) calculations and species distribution analysis</li> </ul>"},{"location":"queries/#ratio-estimation","title":"\ud83c\udfdb\ufe0f Ratio Estimation","text":"<ul> <li>Alabama Trees Per Acre in Forest Types - Ratio-based TPA calculations</li> <li>Loblolly Pine Distribution Analysis - Forest type vs species analysis examples</li> <li>Advanced statistical estimation techniques</li> </ul>"},{"location":"queries/#volume-analysis","title":"\ud83d\udcca Volume Analysis","text":"<ul> <li>California Volume by Diameter Class - Merchantable timber volume analysis</li> <li>Diameter-based volume distribution and timber assessment</li> </ul>"},{"location":"queries/#forest-area","title":"\ud83d\uddfa\ufe0f Forest Area","text":"<ul> <li>Alabama Land Area by Condition - Land use classification and area estimates</li> <li>Forest vs non-forest land analysis</li> </ul>"},{"location":"queries/#forest-change","title":"\ud83d\udd04 Forest Change","text":"<ul> <li>Missouri Forest Type Change - Forest area changes by type group using remeasurement data</li> <li>Temporal analysis using SUBP_COND_CHNG_MTRX and change evaluations</li> </ul>"},{"location":"queries/#key-features","title":"\ud83c\udfaf Key Features","text":"<ul> <li>\u2705 EVALIDator Compatible: All queries match Oracle EVALIDator methodology</li> <li>\ud83e\uddea Tested &amp; Validated: Each query includes expected results and validation notes</li> <li>\ud83d\udcd6 Well Documented: Comprehensive methodology notes and insights</li> <li>\ud83d\udd27 Maintainable: Simplified approaches where possible without sacrificing accuracy</li> <li>\ud83e\udd16 AI-Agent Friendly: Modular structure for easy navigation and reference</li> </ul>"},{"location":"queries/#query-standards","title":"\ud83d\udcdd Query Standards","text":"<p>All queries in this library follow these standards:</p> <ol> <li>EVALID-based filtering for proper statistical estimates</li> <li>Appropriate status codes (STATUSCD=1 for live trees, COND_STATUS_CD=1 for forest)</li> <li>Proper expansion factors (TPA_UNADJ, EXPNS) for population estimates</li> <li>NULL value handling with explicit checks</li> <li>Meaningful result ordering (usually by primary metric DESC)</li> <li>Comprehensive documentation with methodology notes and key insights</li> </ol>"},{"location":"queries/#critical-guidelines","title":"\u26a0\ufe0f Critical Guidelines","text":"<ul> <li>Forest Type vs Species Analysis: Understand the difference between analyzing species within forest types vs forest types containing specific species</li> <li>GRM Methodology: Use exact Oracle EVALIDator structure for Growth, Removal, Mortality queries</li> <li>Biomass Calculations: Include all species-specific properties and adjustments</li> <li>Query Simplification: Prefer readable approaches that maintain statistical accuracy</li> </ul>"},{"location":"queries/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ol> <li>Browse categories above to find relevant query types</li> <li>Each category contains detailed README with query descriptions</li> <li>Individual query files include full documentation and expected results</li> <li>Test queries against your FIA database before production use</li> </ol>"},{"location":"queries/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>EVALIDator Quick Reference - Essential patterns and templates for EVALIDator translation</li> <li>EVALIDator Methodology Guide - Comprehensive guide for Oracle to DuckDB translation</li> </ul>"},{"location":"queries/FIA_WORKING_QUERY_BANK/","title":"FIA Working Query Bank","text":"<p>\u26a0\ufe0f This file has been reorganized for better maintainability and AI-agent accessibility.</p>"},{"location":"queries/FIA_WORKING_QUERY_BANK/#new-organized-structure","title":"\ud83d\ude80 New Organized Structure","text":"<p>The FIA query collection has been restructured into a modular, category-based organization:</p>"},{"location":"queries/FIA_WORKING_QUERY_BANK/#main-query-library","title":"\ud83d\udcc1 Main Query Library","text":"<p>Browse the complete organized collection: - \ud83c\udf33 Basic Tree Queries - Fundamental tree counting and enumeration - \ud83c\udf32 Growth, Removal, and Mortality - Complex GRM analysis using TREE_GRM_* tables - \ud83c\udf3f Biomass and Carbon - Species-specific biomass calculations - \ud83c\udf33 Tree Count and Density - Species distribution and TPA analysis - \ud83c\udfdb\ufe0f Ratio Estimation - Advanced statistical estimation techniques - \ud83d\udcca Volume Analysis - Merchantable timber volume calculations - \ud83d\uddfa\ufe0f Forest Area - Land use classification and area estimates</p>"},{"location":"queries/FIA_WORKING_QUERY_BANK/#essential-resources","title":"\ud83d\udcda Essential Resources","text":"<ul> <li>\ud83d\udd27 EVALIDator Methodology - Oracle EVALIDator translation principles</li> </ul>"},{"location":"queries/FIA_WORKING_QUERY_BANK/#benefits-of-new-structure","title":"\ud83c\udfaf Benefits of New Structure","text":""},{"location":"queries/FIA_WORKING_QUERY_BANK/#for-ai-agents","title":"For AI Agents:","text":"<ul> <li>\ud83e\udd16 Modular Navigation: Easy to find specific query types</li> <li>\ud83d\udcd6 Focused Documentation: Each category has targeted explanations</li> <li>\ud83d\udd0d Better Context: Queries grouped by analytical purpose</li> <li>\u26a1 Faster Access: No need to parse 875+ line files</li> </ul>"},{"location":"queries/FIA_WORKING_QUERY_BANK/#for-developers","title":"For Developers:","text":"<ul> <li>\ud83d\udd27 Maintainable: Individual files easier to update</li> <li>\ud83d\udcca Organized: Logical categorization by analysis type</li> <li>\u2705 Validated: Each query includes expected results and validation notes</li> <li>\ud83d\udcc8 Scalable: Easy to add new queries to appropriate categories</li> </ul>"},{"location":"queries/FIA_WORKING_QUERY_BANK/#for-users","title":"For Users:","text":"<ul> <li>\ud83c\udfaf Targeted: Find exactly the type of analysis you need</li> <li>\ud83d\udcda Educational: Learn FIA methodology through organized examples</li> <li>\ud83d\ude80 Efficient: Quick access to relevant queries and documentation</li> <li>\ud83d\udd04 Consistent: Standardized format across all query categories</li> </ul>"},{"location":"queries/FIA_WORKING_QUERY_BANK/#key-features-maintained","title":"\ud83c\udf1f Key Features Maintained","text":"<ul> <li>\u2705 EVALIDator Compatible: All queries match Oracle EVALIDator methodology</li> <li>\ud83e\uddea Tested &amp; Validated: Each query includes expected results</li> <li>\ud83d\udcd6 Well Documented: Comprehensive methodology notes and insights</li> <li>\ud83d\udd27 Maintainable: Simplified approaches where possible without sacrificing accuracy</li> <li>\ud83c\udfaf Practical: Real-world examples with actual EVALID values and results</li> </ul>"},{"location":"queries/FIA_WORKING_QUERY_BANK/#quick-start","title":"\ud83d\udccb Quick Start","text":"<ol> <li>Browse Categories: Visit ./queries/ to see all available query types</li> <li>Choose Your Analysis: Select the category that matches your needs</li> <li>Review Documentation: Each category has a README with methodology notes</li> <li>Use Query Templates: Copy and modify queries for your specific EVALIDs/states</li> <li>Validate Results: Compare with expected outputs and EVALIDator when possible</li> </ol>"},{"location":"queries/FIA_WORKING_QUERY_BANK/#migration-notes","title":"\ud83d\udd04 Migration Notes","text":"<p>For existing users of this file: - All original queries have been preserved and enhanced - Queries now include more comprehensive documentation - Expected results and validation notes are included - Simplified versions are provided where tested to be equivalent</p> <p>For AI agents:</p>"},{"location":"queries/evaluator_methodology/","title":"EVALIDator Methodology Guide","text":"<p>This guide provides comprehensive documentation for understanding and translating Oracle EVALIDator queries to DuckDB, maintaining statistical accuracy while leveraging modern SQL capabilities.</p>"},{"location":"queries/evaluator_methodology/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ol> <li>What is EVALIDator?</li> <li>Core Statistical Concepts</li> <li>Oracle to DuckDB Translation</li> <li>Key Table Relationships</li> <li>Adjustment Factors and Expansion</li> <li>Query Categories and Patterns</li> <li>Common Translation Challenges</li> <li>Validation and Testing</li> <li>Best Practices</li> </ol>"},{"location":"queries/evaluator_methodology/#what-is-evalidator","title":"\ud83c\udfaf What is EVALIDator?","text":"<p>EVALIDator is the USDA Forest Service's official web application for accessing Forest Inventory and Analysis (FIA) data. It provides standardized queries that produce statistically valid estimates following rigorous sampling methodology.</p>"},{"location":"queries/evaluator_methodology/#key-characteristics","title":"Key Characteristics:","text":"<ul> <li>Statistical Rigor: Uses proper sampling weights and adjustment factors</li> <li>Oracle-Based: Original queries written for Oracle database</li> <li>Standardized: Consistent methodology across all analyses</li> <li>Validated: Results match published FIA reports</li> <li>Complex: Sophisticated statistical calculations and table joins</li> </ul>"},{"location":"queries/evaluator_methodology/#why-translate-to-duckdb","title":"Why Translate to DuckDB?","text":"<ul> <li>Performance: DuckDB optimized for analytical workloads</li> <li>Modern SQL: Cleaner syntax and better optimization</li> <li>Accessibility: Easier deployment and maintenance</li> <li>Integration: Better integration with modern data science tools</li> </ul>"},{"location":"queries/evaluator_methodology/#core-statistical-concepts","title":"\ud83d\udcca Core Statistical Concepts","text":""},{"location":"queries/evaluator_methodology/#evalid-evaluation-id","title":"EVALID (Evaluation ID)","text":"<p>The fundamental unit of FIA statistical analysis.</p> <pre><code>-- EVALID Structure: SSYYTT\n-- SS = State code (01-99)\n-- YY = Year (last 2 digits)\n-- TT = Evaluation type (01=current, 02=periodic, 03=change, etc.)\n\n-- Examples:\n-- 412101 = Oregon (41) 2021 (21) Current Volume (01)\n-- 132303 = Georgia (13) 2023 (23) Change/GRM (03)\n-- 452303 = South Carolina (45) 2023 (23) Change/GRM (03)\n</code></pre> <p>Critical Rule: Never mix EVALIDs in the same analysis - each represents a distinct statistical evaluation.</p>"},{"location":"queries/evaluator_methodology/#population-strata-and-expansion","title":"Population Strata and Expansion","text":"<p>FIA uses stratified sampling with post-stratification for estimates.</p> <pre><code>-- Core Population Tables\nPOP_STRATUM              -- Statistical strata definitions\nPOP_PLOT_STRATUM_ASSGN   -- Links plots to strata\nPOP_EVAL                 -- Evaluation metadata\nPOP_ESTN_UNIT           -- Estimation units\n</code></pre>"},{"location":"queries/evaluator_methodology/#adjustment-factors","title":"Adjustment Factors","text":"<p>Trees are measured on different subplot sizes based on diameter:</p> <ul> <li>MICR (Microplot): Small trees (typically &lt; 5\" DBH)</li> <li>SUBP (Subplot): Medium trees (5\" to breakpoint)</li> <li>MACR (Macroplot): Large trees (&gt; breakpoint)</li> </ul> <pre><code>-- Standard Adjustment Factor Logic\nCASE\n    WHEN TREE.DIA IS NULL THEN POP_STRATUM.ADJ_FACTOR_SUBP\n    WHEN TREE.DIA &lt; 5.0 THEN POP_STRATUM.ADJ_FACTOR_MICR\n    WHEN TREE.DIA &lt; COALESCE(CAST(PLOT.MACRO_BREAKPOINT_DIA AS DOUBLE), 9999.0)\n        THEN POP_STRATUM.ADJ_FACTOR_SUBP\n    ELSE POP_STRATUM.ADJ_FACTOR_MACR\nEND\n</code></pre>"},{"location":"queries/evaluator_methodology/#oracle-to-duckdb-translation","title":"\ud83d\udd04 Oracle to DuckDB Translation","text":""},{"location":"queries/evaluator_methodology/#function-mapping","title":"Function Mapping","text":"Oracle Function DuckDB Equivalent Purpose <code>LPAD(field, 5, '0')</code> <code>printf('%05d', field)</code> Zero-padding numbers <code>NVL(field, default)</code> <code>COALESCE(field, default)</code> NULL handling <code>DECODE(field, val1, result1, val2, result2, default)</code> <code>CASE WHEN field = val1 THEN result1 WHEN field = val2 THEN result2 ELSE default END</code> Conditional logic <code>LEAST(a, b)</code> <code>LEAST(a, b)</code> Same (both support) <code>||</code> (concatenation) <code>||</code> or <code>CONCAT()</code> String concatenation"},{"location":"queries/evaluator_methodology/#data-type-considerations","title":"Data Type Considerations","text":"<pre><code>-- Oracle: Implicit string to number conversion\nWHERE TREE.DIA &lt; PLOT.MACRO_BREAKPOINT_DIA\n\n-- DuckDB: Explicit casting needed\nWHERE TREE.DIA &lt; COALESCE(CAST(PLOT.MACRO_BREAKPOINT_DIA AS DOUBLE), 9999.0)\n</code></pre>"},{"location":"queries/evaluator_methodology/#string-formatting-differences","title":"String Formatting Differences","text":"<pre><code>-- Oracle EVALIDator Style (Complex)\n'`' || LPAD(CAST(SPGRPCD AS VARCHAR), 5, '0') || ' ' || NAME\n\n-- DuckDB Simplified (Equivalent Results)\nSPGRPCD, NAME  -- Group by base fields, format in application layer\n</code></pre>"},{"location":"queries/evaluator_methodology/#key-table-relationships","title":"\ud83d\udd17 Key Table Relationships","text":""},{"location":"queries/evaluator_methodology/#core-inventory-tables","title":"Core Inventory Tables","text":"<pre><code>-- Standard FIA Join Pattern\nFROM POP_STRATUM ps\nJOIN POP_PLOT_STRATUM_ASSGN ppsa ON (ppsa.STRATUM_CN = ps.CN)\nJOIN PLOT p ON (ppsa.PLT_CN = p.CN)\nJOIN COND c ON (c.PLT_CN = p.CN)\nJOIN TREE t ON (t.PLT_CN = c.PLT_CN AND t.CONDID = c.CONDID)\n</code></pre>"},{"location":"queries/evaluator_methodology/#reference-tables","title":"Reference Tables","text":"<pre><code>-- Species Information\nLEFT JOIN REF_SPECIES rs ON (t.SPCD = rs.SPCD)\nLEFT JOIN REF_SPECIES_GROUP rsg ON (t.SPGRPCD = rsg.SPGRPCD)\n\n-- Forest Type Information\nLEFT JOIN REF_FOREST_TYPE rft ON (c.FORTYPCD = rft.VALUE)\nLEFT JOIN REF_FOREST_TYPE_GROUP rftg ON (rft.TYPGRPCD = rftg.VALUE)\n</code></pre>"},{"location":"queries/evaluator_methodology/#growth-removal-mortality-grm-tables","title":"Growth, Removal, Mortality (GRM) Tables","text":"<pre><code>-- Complex GRM Joins (Most Challenging)\n-- Tree join with previous plot connection\nJOIN (\n    SELECT P.PREV_PLT_CN, T.*\n    FROM PLOT P\n    JOIN TREE T ON (P.CN = T.PLT_CN)\n) TREE ON ((TREE.CONDID = COND.CONDID) AND (TREE.PLT_CN = COND.PLT_CN))\n\n-- Previous measurement joins\nLEFT OUTER JOIN PLOT PPLOT ON (PLOT.PREV_PLT_CN = PPLOT.CN)\nLEFT OUTER JOIN COND PCOND ON ((TREE.PREVCOND = PCOND.CONDID) AND (TREE.PREV_PLT_CN = PCOND.PLT_CN))\nLEFT OUTER JOIN TREE PTREE ON (TREE.PREV_TRE_CN = PTREE.CN)\n\n-- GRM table joins\nLEFT OUTER JOIN TREE_GRM_BEGIN TRE_BEGIN ON (TREE.CN = TRE_BEGIN.TRE_CN)\nLEFT OUTER JOIN TREE_GRM_MIDPT TRE_MIDPT ON (TREE.CN = TRE_MIDPT.TRE_CN)\nLEFT OUTER JOIN TREE_GRM_COMPONENT GRM ON (TREE.CN = GRM.TRE_CN)\n</code></pre>"},{"location":"queries/evaluator_methodology/#adjustment-factors-and-expansion","title":"\u2696\ufe0f Adjustment Factors and Expansion","text":""},{"location":"queries/evaluator_methodology/#standard-tree-expansion","title":"Standard Tree Expansion","text":"<pre><code>-- Basic Tree Count/Volume Expansion\nSUM(\n    TREE.TPA_UNADJ *\n    [ADJUSTMENT_FACTOR] *\n    POP_STRATUM.EXPNS\n) AS expanded_estimate\n</code></pre>"},{"location":"queries/evaluator_methodology/#area-expansion","title":"Area Expansion","text":"<pre><code>-- Condition/Area Expansion\nSUM(\n    COND.CONDPROP_UNADJ *\n    CASE COND.PROP_BASIS\n        WHEN 'MACR' THEN POP_STRATUM.ADJ_FACTOR_MACR\n        ELSE POP_STRATUM.ADJ_FACTOR_SUBP\n    END * POP_STRATUM.EXPNS\n) AS expanded_area\n</code></pre>"},{"location":"queries/evaluator_methodology/#grm-specific-expansion","title":"GRM-Specific Expansion","text":"<pre><code>-- Mortality Expansion\nSUM(\n    GRM.TPAMORT_UNADJ *\n    CASE GRM.SUBPTYP_GRM\n        WHEN 1 THEN POP_STRATUM.ADJ_FACTOR_SUBP\n        WHEN 2 THEN POP_STRATUM.ADJ_FACTOR_MICR\n        WHEN 3 THEN POP_STRATUM.ADJ_FACTOR_MACR\n        ELSE 0\n    END * POP_STRATUM.EXPNS\n) AS expanded_mortality\n\n-- Harvest Removal Expansion\nSUM(\n    GRM.TPAREMV_UNADJ *\n    [SAME_ADJUSTMENT_LOGIC] *\n    POP_STRATUM.EXPNS\n) AS expanded_removals\n</code></pre>"},{"location":"queries/evaluator_methodology/#query-categories-and-patterns","title":"\ud83d\udcc2 Query Categories and Patterns","text":""},{"location":"queries/evaluator_methodology/#1-basic-tree-counts","title":"1. Basic Tree Counts","text":"<p>Pattern: Simple aggregation with standard adjustment factors <pre><code>-- Template\nSELECT SUM(TPA_UNADJ * ADJ_FACTOR * EXPNS) AS total_trees\nFROM [STANDARD_JOINS]\nWHERE TREE.STATUSCD = 1 AND COND.COND_STATUS_CD = 1 AND EVALID = [TARGET]\n</code></pre></p>"},{"location":"queries/evaluator_methodology/#2-biomass-calculations","title":"2. Biomass Calculations","text":"<p>Pattern: Complex species-specific calculations <pre><code>-- Template\nSELECT SUM(\n    TPA_UNADJ *\n    [COMPLEX_BIOMASS_CALCULATION] *\n    ADJ_FACTOR *\n    DRYBIO_AG / 2000  -- Pounds to tons\n) AS total_biomass_tons\n</code></pre></p>"},{"location":"queries/evaluator_methodology/#3-grm-analysis","title":"3. GRM Analysis","text":"<p>Pattern: Multi-table joins with previous measurements <pre><code>-- Template\nSELECT SUM(\n    GRM.[TPA_FIELD] *  -- TPAMORT_UNADJ or TPAREMV_UNADJ\n    [GRM_ADJUSTMENT_FACTOR] *\n    TRE_MIDPT.VOLCFNET *  -- Use midpoint volume\n    EXPNS\n) AS grm_estimate\nFROM [COMPLEX_GRM_JOINS]\nWHERE GRM.COMPONENT LIKE '[MORTALITY%|CUT%]'\n</code></pre></p>"},{"location":"queries/evaluator_methodology/#4-volume-analysis","title":"4. Volume Analysis","text":"<p>Pattern: Diameter-based analysis with timber filters <pre><code>-- Template\nSELECT SUM(\n    TPA_UNADJ *\n    VOLCFNET *\n    ADJ_FACTOR *\n    EXPNS\n) AS total_volume\nWHERE TREE.DIA &gt;= 5.0 AND REF_SPECIES.WOODLAND = 'N'\n</code></pre></p>"},{"location":"queries/evaluator_methodology/#common-translation-challenges","title":"\ud83d\udea7 Common Translation Challenges","text":""},{"location":"queries/evaluator_methodology/#1-string-formatting-complexity","title":"1. String Formatting Complexity","text":"<p>Oracle Challenge: Complex LPAD and concatenation for grouping <pre><code>-- Oracle (Complex but exact)\n'`' || LPAD(CAST(SPGRPCD AS VARCHAR), 5, '0') || ' ' || NAME AS GRP1\n\n-- DuckDB Solution (Simplified, equivalent results)\nSPGRPCD, NAME  -- Group by base fields\n</code></pre></p>"},{"location":"queries/evaluator_methodology/#2-implicit-type-conversions","title":"2. Implicit Type Conversions","text":"<p>Oracle Challenge: Automatic string-to-number conversion <pre><code>-- Oracle (Works automatically)\nWHERE TREE.DIA &lt; PLOT.MACRO_BREAKPOINT_DIA\n\n-- DuckDB (Explicit casting required)\nWHERE TREE.DIA &lt; COALESCE(CAST(PLOT.MACRO_BREAKPOINT_DIA AS DECIMAL), 9999)\n</code></pre></p>"},{"location":"queries/evaluator_methodology/#3-null-handling-differences","title":"3. NULL Handling Differences","text":"<p>Oracle Challenge: Different NULL behavior <pre><code>-- Oracle NVL\nNVL(field, default_value)\n\n-- DuckDB COALESCE (standard SQL)\nCOALESCE(field, default_value)\n</code></pre></p>"},{"location":"queries/evaluator_methodology/#4-complex-nested-case-logic","title":"4. Complex Nested CASE Logic","text":"<p>Oracle Challenge: Deeply nested diameter-based logic <pre><code>-- Oracle Pattern (Preserve exactly)\nCASE\n    WHEN TREE.DIA IS NULL THEN POP_STRATUM.ADJ_FACTOR_SUBP\n    ELSE\n        CASE LEAST(TREE.DIA, 5 - 0.001)\n            WHEN TREE.DIA THEN POP_STRATUM.ADJ_FACTOR_MICR\n            ELSE\n                CASE LEAST(TREE.DIA, COALESCE(CAST(PLOT.MACRO_BREAKPOINT_DIA AS DECIMAL), 9999) - 0.001)\n                    WHEN TREE.DIA THEN POP_STRATUM.ADJ_FACTOR_SUBP\n                    ELSE POP_STRATUM.ADJ_FACTOR_MACR\n                END\n        END\nEND\n</code></pre></p>"},{"location":"queries/evaluator_methodology/#validation-and-testing","title":"\u2705 Validation and Testing","text":""},{"location":"queries/evaluator_methodology/#1-result-comparison","title":"1. Result Comparison","text":"<pre><code>-- Always include expected results in comments\n/*\nExpected Results:\n- Oregon Total Trees: 10,481,113,490 (matches EVALIDator)\n- Trees per Acre: 357.8\n- Forest Area: 29,292,380 acres\n*/\n</code></pre>"},{"location":"queries/evaluator_methodology/#2-sample-size-validation","title":"2. Sample Size Validation","text":"<pre><code>-- Include plot counts for validation\nSELECT\n    COUNT(DISTINCT p.CN) as plot_count,\n    SUM([MAIN_CALCULATION]) as estimate\n</code></pre>"},{"location":"queries/evaluator_methodology/#3-cross-validation-techniques","title":"3. Cross-Validation Techniques","text":"<pre><code>-- Compare simplified vs complex approaches\nWITH simplified AS (SELECT SPGRPCD, SUM(biomass) as simple_total FROM ...),\n     complex AS (SELECT extract_spgrpcd(GRP1), SUM(ESTIMATE) as complex_total FROM ...)\nSELECT * FROM simplified s JOIN complex c ON s.SPGRPCD = c.spgrpcd\nWHERE ABS(s.simple_total - c.complex_total) &gt; 0.01  -- Flag differences\n</code></pre>"},{"location":"queries/evaluator_methodology/#4-reasonableness-checks","title":"4. Reasonableness Checks","text":"<pre><code>-- Validate against known ranges\nSELECT\n    estimate,\n    estimate / total_area as per_acre_rate,\n    CASE\n        WHEN per_acre_rate &gt; [REASONABLE_MAX] THEN 'SUSPECT HIGH'\n        WHEN per_acre_rate &lt; [REASONABLE_MIN] THEN 'SUSPECT LOW'\n        ELSE 'REASONABLE'\n    END as validation_flag\n</code></pre>"},{"location":"queries/evaluator_methodology/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"queries/evaluator_methodology/#1-maintain-statistical-integrity","title":"1. Maintain Statistical Integrity","text":"<ul> <li>Never modify core EVALIDator logic without validation</li> <li>Preserve exact Oracle calculations for biomass and GRM</li> <li>Use proper adjustment factors for all estimates</li> <li>Apply expansion factors consistently</li> </ul>"},{"location":"queries/evaluator_methodology/#2-simplify-when-possible","title":"2. Simplify When Possible","text":"<ul> <li>Test simplified grouping approaches (e.g., direct SPGRPCD vs LPAD formatting)</li> <li>Validate simplified versions produce identical results</li> <li>Document equivalence between approaches</li> <li>Choose readability when accuracy is maintained</li> </ul>"},{"location":"queries/evaluator_methodology/#3-documentation-standards","title":"3. Documentation Standards","text":"<pre><code>/*\nQuery: [Purpose and Description]\nEVALID: [Evaluation ID]\nExpected Result: [Known validation result]\nOracle Compatibility: [Exact translation / Simplified equivalent]\nValidation: [How results were verified]\n*/\n</code></pre>"},{"location":"queries/evaluator_methodology/#4-error-handling","title":"4. Error Handling","text":"<pre><code>-- Include defensive programming\nWHERE TREE.TPA_UNADJ IS NOT NULL\n    AND TREE.STATUSCD IS NOT NULL\n    AND POP_STRATUM.EXPNS IS NOT NULL\n    AND POP_STRATUM.EXPNS &gt; 0  -- Avoid division by zero\n</code></pre>"},{"location":"queries/evaluator_methodology/#5-performance-optimization","title":"5. Performance Optimization","text":"<pre><code>-- Use appropriate indexes\n-- Consider CTEs for complex logic\n-- Leverage DuckDB-specific optimizations\n-- Test with full datasets, not samples\n</code></pre>"},{"location":"queries/evaluator_methodology/#advanced-topics","title":"\ud83d\udd0d Advanced Topics","text":""},{"location":"queries/evaluator_methodology/#special-species-mappings","title":"Special Species Mappings","text":"<pre><code>-- Handle special cases (e.g., eastern redcedar state variations)\nREF_SPECIES_GROUP_TREE.SPGRPCD = CASE\n    WHEN TREE.STATECD IN (46, 38, 31, 20) AND TREE.SPCD = 122 THEN 11\n    ELSE TREE.SPGRPCD\nEND\n</code></pre>"},{"location":"queries/evaluator_methodology/#biomass-equation-complexity","title":"Biomass Equation Complexity","text":"<pre><code>-- Full species-specific biomass calculation\nCOALESCE(\n    (\n        (1 - (REF_SPECIES.BARK_VOL_PCT / (100 + REF_SPECIES.BARK_VOL_PCT))) *\n        REF_SPECIES.WOOD_SPGR_GREENVOL_DRYWT /\n        [COMPLEX_DENOMINATOR] *\n        (1.0 + REF_SPECIES.MC_PCT_GREEN_WOOD * 0.01) +\n        [BARK_CALCULATION]\n    ),\n    1.76  -- Default specific gravity\n)\n</code></pre>"},{"location":"queries/evaluator_methodology/#grm-component-logic","title":"GRM Component Logic","text":"<pre><code>-- Mortality vs Harvest component separation\nCASE\n    WHEN GRM.COMPONENT LIKE 'MORTALITY%' THEN TRE_MIDPT.VOLCFNET\n    ELSE 0\nEND\n\n-- vs\n\nCASE\n    WHEN GRM.COMPONENT LIKE 'CUT%' THEN TRE_MIDPT.VOLCFNET\n    ELSE 0\nEND\n</code></pre>"},{"location":"queries/evaluator_methodology/#resources-and-references","title":"\ud83d\udcda Resources and References","text":""},{"location":"queries/evaluator_methodology/#official-documentation","title":"Official Documentation","text":"<ul> <li>FIA Database Description: Latest field definitions and relationships</li> <li>EVALIDator User Guide: Official methodology documentation</li> <li>FIA Sampling Manual: Statistical framework and procedures</li> </ul>"},{"location":"queries/evaluator_methodology/#validation-sources","title":"Validation Sources","text":"<ul> <li>Published FIA Reports: State-level forest statistics</li> <li>EVALIDator Web Interface: Direct result comparison</li> <li>Research Publications: Peer-reviewed methodology papers</li> </ul>"},{"location":"queries/evaluator_methodology/#technical-references","title":"Technical References","text":"<ul> <li>Oracle SQL Documentation: Original function behavior</li> <li>DuckDB Documentation: Modern SQL capabilities and optimizations</li> <li>Statistical Sampling Theory: Understanding FIA methodology</li> </ul> <p>This guide provides the foundation for accurate EVALIDator translation while maintaining the statistical rigor required for official FIA analysis. Always validate results against known benchmarks and document any deviations from Oracle methodology.</p>"},{"location":"queries/evaluator_quick_reference/","title":"EVALIDator Quick Reference Card","text":"<p>This quick reference provides the most common patterns for translating Oracle EVALIDator queries to DuckDB.</p>"},{"location":"queries/evaluator_quick_reference/#quick-start-templates","title":"\ud83d\ude80 Quick Start Templates","text":""},{"location":"queries/evaluator_quick_reference/#basic-tree-count-query","title":"Basic Tree Count Query","text":"<pre><code>SELECT\n    SUM(\n        t.TPA_UNADJ *\n        CASE\n            WHEN t.DIA IS NULL THEN ps.ADJ_FACTOR_SUBP\n            WHEN t.DIA &lt; 5.0 THEN ps.ADJ_FACTOR_MICR\n            WHEN t.DIA &lt; COALESCE(CAST(p.MACRO_BREAKPOINT_DIA AS DOUBLE), 9999.0)\n                THEN ps.ADJ_FACTOR_SUBP\n            ELSE ps.ADJ_FACTOR_MACR\n        END * ps.EXPNS\n    ) AS total_trees\nFROM POP_STRATUM ps\nJOIN POP_PLOT_STRATUM_ASSGN ppsa ON ppsa.STRATUM_CN = ps.CN\nJOIN PLOT p ON ppsa.PLT_CN = p.CN\nJOIN COND c ON c.PLT_CN = p.CN\nJOIN TREE t ON t.PLT_CN = c.PLT_CN AND t.CONDID = c.CONDID\nWHERE t.STATUSCD = 1\n    AND c.COND_STATUS_CD = 1\n    AND ps.EVALID = [YOUR_EVALID];\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#basic-area-query","title":"Basic Area Query","text":"<pre><code>SELECT\n    SUM(\n        c.CONDPROP_UNADJ *\n        CASE c.PROP_BASIS\n            WHEN 'MACR' THEN ps.ADJ_FACTOR_MACR\n            ELSE ps.ADJ_FACTOR_SUBP\n        END * ps.EXPNS\n    ) AS total_area_acres\nFROM POP_STRATUM ps\nJOIN POP_PLOT_STRATUM_ASSGN ppsa ON ppsa.STRATUM_CN = ps.CN\nJOIN PLOT p ON ppsa.PLT_CN = p.CN\nJOIN COND c ON c.PLT_CN = p.CN\nWHERE c.COND_STATUS_CD = 1\n    AND ps.EVALID = [YOUR_EVALID];\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#oracle-to-duckdb-function-translations","title":"\ud83d\udd04 Oracle to DuckDB Function Translations","text":"Oracle DuckDB Example <code>LPAD(field, 4, '0')</code> <code>printf('%04d', field)</code> Species code formatting <code>NVL(field, 0)</code> <code>COALESCE(field, 0)</code> NULL handling <code>DECODE(x, 1, 'A', 2, 'B', 'C')</code> <code>CASE WHEN x = 1 THEN 'A' WHEN x = 2 THEN 'B' ELSE 'C' END</code> Conditional logic"},{"location":"queries/evaluator_quick_reference/#common-evalid-patterns","title":"\ud83d\udcca Common EVALID Patterns","text":""},{"location":"queries/evaluator_quick_reference/#current-volume-evaluations-type-01","title":"Current Volume Evaluations (Type 01)","text":"<pre><code>-- Examples: 412101 (OR 2021), 62101 (CA 2021), 482101 (TX 2021)\nWHERE ps.EVALID = [STATE][YEAR]01\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#growthremovalmortality-type-03","title":"Growth/Removal/Mortality (Type 03)","text":"<pre><code>-- Examples: 132303 (GA 2023), 452303 (SC 2023), 372303 (NC 2023)\nWHERE ps.EVALID = [STATE][YEAR]03\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#all-area-evaluations-type-00","title":"All Area Evaluations (Type 00)","text":"<pre><code>-- Examples: 412100 (OR 2021), 132300 (GA 2023)\nWHERE ps.EVALID = [STATE][YEAR]00\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#standard-filters","title":"\ud83c\udf32 Standard Filters","text":""},{"location":"queries/evaluator_quick_reference/#live-trees-on-forest-land","title":"Live Trees on Forest Land","text":"<pre><code>WHERE t.STATUSCD = 1\n    AND c.COND_STATUS_CD = 1\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#merchantable-timber","title":"Merchantable Timber","text":"<pre><code>WHERE t.STATUSCD = 1\n    AND c.COND_STATUS_CD = 1\n    AND t.DIA &gt;= 5.0\n    AND rs.WOODLAND = 'N'\n    AND c.SITECLCD IN (1,2,3,4,5,6)\n    AND c.RESERVCD = 0\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#timberland-only","title":"Timberland Only","text":"<pre><code>WHERE c.COND_STATUS_CD = 1\n    AND c.SITECLCD IN (1,2,3,4,5,6)\n    AND c.RESERVCD = 0\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#species-and-forest-type-grouping","title":"\ud83c\udfaf Species and Forest Type Grouping","text":""},{"location":"queries/evaluator_quick_reference/#by-species","title":"By Species","text":"<pre><code>-- Simple approach (recommended)\nGROUP BY t.SPCD, rs.COMMON_NAME\n\n-- Oracle EVALIDator style (complex but exact)\nGROUP BY '`' || LPAD(CAST(t.SPCD AS VARCHAR), 4, '0') || ' ' || rs.COMMON_NAME\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#by-species-group","title":"By Species Group","text":"<pre><code>-- Simple approach\nGROUP BY t.SPGRPCD, rsg.NAME\n\n-- Oracle EVALIDator style\nGROUP BY '`' || LPAD(CAST(t.SPGRPCD AS VARCHAR), 5, '0') || ' ' || rsg.NAME\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#by-forest-type","title":"By Forest Type","text":"<pre><code>GROUP BY c.FORTYPCD, rft.MEANING\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#volume-and-biomass-calculations","title":"\ud83d\udcc8 Volume and Biomass Calculations","text":""},{"location":"queries/evaluator_quick_reference/#net-cubic-foot-volume","title":"Net Cubic Foot Volume","text":"<pre><code>SUM(\n    t.TPA_UNADJ *\n    t.VOLCFNET *\n    [ADJUSTMENT_FACTOR] *\n    ps.EXPNS\n) AS total_volume_cuft\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#above-ground-dry-biomass","title":"Above-Ground Dry Biomass","text":"<pre><code>SUM(\n    t.TPA_UNADJ *\n    [ADJUSTMENT_FACTOR] *\n    COALESCE(t.DRYBIO_AG / 2000, 0) *  -- Convert pounds to tons\n    ps.EXPNS\n) AS total_biomass_tons\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#grm-query-patterns","title":"\ud83d\udd04 GRM Query Patterns","text":""},{"location":"queries/evaluator_quick_reference/#mortality-query-structure","title":"Mortality Query Structure","text":"<pre><code>-- Complex GRM joins required\nLEFT OUTER JOIN TREE_GRM_MIDPT TRE_MIDPT ON (TREE.CN = TRE_MIDPT.TRE_CN)\nLEFT OUTER JOIN (\n    SELECT\n        TRE_CN,\n        SUBP_COMPONENT_GS_TIMBER AS COMPONENT,\n        SUBP_SUBPTYP_GRM_GS_TIMBER AS SUBPTYP_GRM,\n        SUBP_TPAMORT_UNADJ_GS_TIMBER AS TPAMORT_UNADJ\n    FROM TREE_GRM_COMPONENT\n) GRM ON (TREE.CN = GRM.TRE_CN)\n\n-- Mortality calculation\nSUM(\n    GRM.TPAMORT_UNADJ *\n    CASE GRM.SUBPTYP_GRM\n        WHEN 1 THEN ps.ADJ_FACTOR_SUBP\n        WHEN 2 THEN ps.ADJ_FACTOR_MICR\n        WHEN 3 THEN ps.ADJ_FACTOR_MACR\n        ELSE 0\n    END *\n    CASE WHEN GRM.COMPONENT LIKE 'MORTALITY%'\n        THEN TRE_MIDPT.VOLCFNET ELSE 0 END *\n    ps.EXPNS\n) AS annual_mortality_cuft\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#harvest-removal-query-structure","title":"Harvest Removal Query Structure","text":"<pre><code>-- Same GRM joins but different fields\nLEFT OUTER JOIN (\n    SELECT\n        TRE_CN,\n        SUBP_COMPONENT_GS_TIMBER AS COMPONENT,\n        SUBP_SUBPTYP_GRM_GS_TIMBER AS SUBPTYP_GRM,\n        SUBP_TPAREMV_UNADJ_GS_TIMBER AS TPAREMV_UNADJ  -- Note: REMV not MORT\n    FROM TREE_GRM_COMPONENT\n) GRM ON (TREE.CN = GRM.TRE_CN)\n\n-- Harvest calculation\nSUM(\n    GRM.TPAREMV_UNADJ *  -- Note: REMV not MORTALITY\n    [SAME_ADJUSTMENT_LOGIC] *\n    CASE WHEN GRM.COMPONENT LIKE 'CUT%'  -- Note: CUT not MORTALITY\n        THEN TRE_MIDPT.VOLCFNET ELSE 0 END *\n    ps.EXPNS\n) AS annual_harvest_cuft\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#performance-tips","title":"\u26a1 Performance Tips","text":""},{"location":"queries/evaluator_quick_reference/#use-appropriate-indexes","title":"Use Appropriate Indexes","text":"<pre><code>-- Typical useful indexes\nCREATE INDEX idx_pop_stratum_evalid ON POP_STRATUM(EVALID);\nCREATE INDEX idx_tree_status ON TREE(STATUSCD);\nCREATE INDEX idx_cond_status ON COND(COND_STATUS_CD);\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#leverage-ctes-for-complex-logic","title":"Leverage CTEs for Complex Logic","text":"<pre><code>WITH tree_expansion AS (\n    SELECT\n        t.CN,\n        t.TPA_UNADJ *\n        CASE\n            WHEN t.DIA IS NULL THEN ps.ADJ_FACTOR_SUBP\n            -- ... rest of logic\n        END * ps.EXPNS AS expanded_tpa\n    FROM [JOINS]\n)\nSELECT SUM(expanded_tpa) FROM tree_expansion;\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#validation-checklist","title":"\u2705 Validation Checklist","text":"<ul> <li> EVALID specified: Never mix different EVALIDs</li> <li> Status codes included: STATUSCD = 1, COND_STATUS_CD = 1</li> <li> Adjustment factors applied: Based on tree diameter</li> <li> Expansion factors applied: EXPNS for final estimates</li> <li> NULL handling: Use COALESCE or IS NOT NULL</li> <li> Expected results documented: Include known validation values</li> <li> Plot counts included: For sample size context</li> </ul>"},{"location":"queries/evaluator_quick_reference/#critical-warnings","title":"\ud83d\udea8 Critical Warnings","text":""},{"location":"queries/evaluator_quick_reference/#never-do-this","title":"\u274c Never Do This","text":"<pre><code>-- DON'T mix EVALIDs\nWHERE ps.EVALID IN (412101, 412100)  -- WRONG!\n\n-- DON'T forget expansion\nSELECT COUNT(*) FROM TREE  -- Raw counts are meaningless!\n\n-- DON'T ignore status codes\nSELECT SUM(TPA_UNADJ) FROM TREE  -- Includes dead trees!\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#always-do-this","title":"\u2705 Always Do This","text":"<pre><code>-- Single EVALID per query\nWHERE ps.EVALID = 412101\n\n-- Proper expansion\nSELECT SUM(TPA_UNADJ * ADJ_FACTOR * EXPNS)\n\n-- Appropriate filters\nWHERE t.STATUSCD = 1 AND c.COND_STATUS_CD = 1\n</code></pre>"},{"location":"queries/evaluator_quick_reference/#state-and-evalid-quick-reference","title":"\ud83d\udcda State and EVALID Quick Reference","text":"State Code Recent EVALIDs Oregon 41 412101 (volume), 412100 (area) California 06 62101 (volume), 62100 (area) Georgia 13 132303 (GRM), 132301 (volume) North Carolina 37 372303 (GRM), 372301 (volume) South Carolina 45 452303 (GRM), 452301 (volume) Colorado 08 82101 (volume), 82100 (area) Minnesota 27 272201 (volume), 272200 (area) <p>For detailed methodology and advanced topics, see the EVALIDator Methodology Guide.</p>"},{"location":"queries/basic_tree/","title":"Basic Tree Queries","text":"<p>This section contains tree enumeration and counting queries based on EVALIDator SQL Queries.</p>"},{"location":"queries/basic_tree/#queries-in-this-section","title":"Queries in this Section","text":""},{"location":"queries/basic_tree/#1-oregon-total-live-trees","title":"1. Oregon Total Live Trees","text":"<p>EVALID: 412101 (Oregon 2021) Result: 10,481,113,490 live trees (357.8 trees/acre)</p> <p>A comprehensive example of EVALIDator-style tree counting that demonstrates: - Proper adjustment factors (MICR/SUBP/MACR) based on tree diameter - Population expansion factors (EXPNS) for statistical estimates - Exact Oracle EVALIDator query structure - Forest area calculation: 29,292,380 acres</p>"},{"location":"queries/basic_tree/#key-concepts-demonstrated","title":"Key Concepts Demonstrated","text":"<ul> <li>Diameter-based Adjustment Factors: Trees are counted differently based on their size</li> <li>Population Expansion: Converting plot-level data to population estimates</li> <li>Status Filtering: Focusing on live trees in forest conditions</li> <li>EVALID Usage: Proper statistical grouping for estimates</li> </ul>"},{"location":"queries/basic_tree/#evalidator-methodology","title":"EVALIDator Methodology","text":"<p>These queries follow Oracle EVALIDator methodology exactly: - Uses <code>TPA_UNADJ</code> (trees per acre, unadjusted) as the base metric - Applies diameter-specific adjustment factors - Multiplies by expansion factors for population estimates - Filters appropriately for live trees and forest conditions</p>"},{"location":"queries/basic_tree/#usage-notes","title":"Usage Notes","text":"<ul> <li>Always verify EVALID values match your analysis needs</li> <li>Understand that different EVALIDs represent different time periods and methodologies</li> <li>Results represent statistical estimates, not exact counts</li> <li>Plot counts provide context for sample size and reliability</li> </ul>"},{"location":"queries/basic_tree/north_carolina_trees_by_species/","title":"North Carolina Live Trees by Species","text":"<p>This query demonstrates species-level analysis using EVALIDator methodology, showing the distribution of live trees across different species in North Carolina's forests.</p>"},{"location":"queries/basic_tree/north_carolina_trees_by_species/#query-overview","title":"Query Overview","text":"<ul> <li>EVALID: 372301 (North Carolina 2023)</li> <li>Expected Result: 13,541,944,859 total trees across 129 species (729.1 trees/acre)</li> <li>Forest Area: 18,574,188 acres</li> </ul>"},{"location":"queries/basic_tree/north_carolina_trees_by_species/#key-features","title":"Key Features","text":"<ul> <li>Species identification with common and scientific names</li> <li>Proper adjustment factors based on tree diameter classes</li> <li>Population expansion for statistical estimates</li> <li>Top 10 species ranking by tree count</li> </ul>"},{"location":"queries/basic_tree/north_carolina_trees_by_species/#query","title":"Query","text":"<pre><code>SELECT\n    t.SPCD,\n    rs.COMMON_NAME,\n    rs.SCIENTIFIC_NAME,\n    SUM(\n        t.TPA_UNADJ *\n        CASE\n            WHEN t.DIA IS NULL THEN ps.ADJ_FACTOR_SUBP\n            WHEN t.DIA &lt; 5.0 THEN ps.ADJ_FACTOR_MICR\n            WHEN t.DIA &lt; COALESCE(CAST(p.MACRO_BREAKPOINT_DIA AS DOUBLE), 9999.0) THEN ps.ADJ_FACTOR_SUBP\n            ELSE ps.ADJ_FACTOR_MACR\n        END * ps.EXPNS\n    ) AS total_trees_expanded\n\nFROM POP_STRATUM ps\nJOIN POP_PLOT_STRATUM_ASSGN ppsa ON ppsa.STRATUM_CN = ps.CN\nJOIN PLOT p ON ppsa.PLT_CN = p.CN\nJOIN COND c ON c.PLT_CN = p.CN\nJOIN TREE t ON t.PLT_CN = c.PLT_CN AND t.CONDID = c.CONDID\nLEFT JOIN REF_SPECIES rs ON t.SPCD = rs.SPCD\n\nWHERE\n    t.STATUSCD = 1  -- Live trees\n    AND c.COND_STATUS_CD = 1  -- Forest conditions\n    AND ps.rscd = 33  -- North Carolina\n    AND ps.evalid = 372301\n\nGROUP BY t.SPCD, rs.COMMON_NAME, rs.SCIENTIFIC_NAME\nORDER BY total_trees_expanded DESC\nLIMIT 10;\n</code></pre>"},{"location":"queries/basic_tree/north_carolina_trees_by_species/#expected-results","title":"Expected Results","text":"<p>Top 10 Species by Tree Count:</p> <ol> <li>131: loblolly pine (Pinus taeda) - 2,112,569,195 trees</li> <li>316: red maple (Acer rubrum) - 1,933,632,940 trees</li> <li>611: sweetgum (Liquidambar styraciflua) - 1,678,200,744 trees</li> <li>621: yellow-poplar (Liriodendron tulipifera) - 971,141,798 trees</li> <li>591: American holly (Ilex opaca) - 573,763,842 trees</li> <li>711: sourwood (Oxydendrum arboreum) - 409,433,348 trees</li> <li>827: water oak (Quercus nigra) - 325,669,861 trees</li> <li>693: blackgum (Nyssa sylvatica) - 295,038,023 trees</li> <li>391: American hornbeam (Carpinus caroliniana) - 283,189,646 trees</li> <li>132: Virginia pine (Pinus virginiana) - 280,958,251 trees</li> </ol>"},{"location":"queries/basic_tree/north_carolina_trees_by_species/#evalidator-methodology","title":"EVALIDator Methodology","text":"<ul> <li>Adjustment Factors: Uses MICR/SUBP/MACR based on tree diameter</li> <li>Population Expansion: Applies EXPNS for statistical estimates</li> <li>Species Reference: Joins with REF_SPECIES for names</li> <li>Statistical Integrity: Matches Oracle EVALIDator methodology exactly</li> </ul>"},{"location":"queries/basic_tree/north_carolina_trees_by_species/#download","title":"Download","text":"<p>  Download SQL File </p>"},{"location":"queries/basic_tree/oregon_total_live_trees/","title":"Oregon Total Live Trees Query","text":"<p>This query demonstrates the fundamental EVALIDator methodology for tree counting in Oregon, including proper adjustment factors and population expansion.</p>"},{"location":"queries/basic_tree/oregon_total_live_trees/#query-overview","title":"Query Overview","text":"<ul> <li>EVALID: 412101 (Oregon 2021)</li> <li>Expected Result: 10,481,113,490 live trees (357.8 trees/acre)</li> <li>Forest Area: 29,292,380 acres</li> </ul>"},{"location":"queries/basic_tree/oregon_total_live_trees/#evalidator-methodology","title":"EVALIDator Methodology","text":"<p>This query showcases key EVALIDator concepts:</p> <ul> <li>TPA_UNADJ: Trees per acre (unadjusted) - base measurement</li> <li>Adjustment Factors: Correct for sampling design based on tree diameter</li> <li>EXPNS: Expansion factor to convert plot data to population estimates</li> <li>EVALID: Statistical evaluation identifier for proper grouping</li> </ul>"},{"location":"queries/basic_tree/oregon_total_live_trees/#query","title":"Query","text":"<pre><code>/*\nOregon Total Live Trees (EVALIDator-Style)\n==========================================\n\nEVALID: 412101 (Oregon 2021)\nExpected Result: 10,481,113,490 live trees (357.8 trees/acre)\nForest Area: 29,292,380 acres\n\nThis query demonstrates the fundamental EVALIDator methodology for tree counting,\nincluding proper adjustment factors and population expansion.\n\nEVALIDator Methodology Notes:\n- Uses proper adjustment factors (MICR/SUBP/MACR) based on tree diameter\n- Applies population expansion factors (EXPNS) for statistical estimates\n- Matches Oracle EVALIDator query structure exactly\n- Includes only live trees in forest conditions\n\nKey Concepts:\n- TPA_UNADJ: Trees per acre (unadjusted) - base measurement\n- Adjustment Factors: Correct for sampling design based on tree size\n- EXPNS: Expansion factor to convert plot data to population estimates\n- EVALID: Statistical evaluation identifier for proper grouping\n*/\n\nSELECT\n    SUM(\n        TREE.TPA_UNADJ *\n        CASE\n            WHEN TREE.DIA IS NULL THEN POP_STRATUM.ADJ_FACTOR_SUBP\n            WHEN TREE.DIA &lt; 5.0 THEN POP_STRATUM.ADJ_FACTOR_MICR\n            WHEN TREE.DIA &lt; COALESCE(CAST(PLOT.MACRO_BREAKPOINT_DIA AS DOUBLE), 9999.0) THEN POP_STRATUM.ADJ_FACTOR_SUBP\n            ELSE POP_STRATUM.ADJ_FACTOR_MACR\n        END * POP_STRATUM.EXPNS\n    ) AS total_live_trees\n\nFROM POP_STRATUM\nJOIN POP_PLOT_STRATUM_ASSGN ON (POP_PLOT_STRATUM_ASSGN.STRATUM_CN = POP_STRATUM.CN)\nJOIN PLOT ON (POP_PLOT_STRATUM_ASSGN.PLT_CN = PLOT.CN)\nJOIN COND ON (COND.PLT_CN = PLOT.CN)\nJOIN TREE ON (TREE.PLT_CN = COND.PLT_CN AND TREE.CONDID = COND.CONDID)\n\nWHERE\n    TREE.STATUSCD = 1  -- Live trees\n    AND COND.COND_STATUS_CD = 1  -- Forest conditions\n    AND POP_STRATUM.EVALID = 412101;  -- Oregon 2021\n\n/*\nExpected Results:\n- Total Live Trees: 10,481,113,490\n- Trees per Acre: 357.8\n- Forest Area: 29,292,380 acres\n\nValidation Notes:\n- Result matches Oracle EVALIDator exactly\n- Demonstrates proper use of adjustment factors\n- Shows correct application of expansion factors\n- Template for other state/EVALID combinations\n*/\n</code></pre>"},{"location":"queries/basic_tree/oregon_total_live_trees/#download","title":"Download","text":"<p>  Download SQL File </p>"},{"location":"queries/basic_tree/oregon_total_live_trees/#expected-results","title":"Expected Results","text":"<ul> <li>Total Live Trees: 10,481,113,490</li> <li>Trees per Acre: 357.8</li> <li>Forest Area: 29,292,380 acres</li> </ul>"},{"location":"queries/basic_tree/oregon_total_live_trees/#validation-notes","title":"Validation Notes","text":"<ul> <li>Result matches Oracle EVALIDator exactly</li> <li>Demonstrates proper use of adjustment factors</li> <li>Shows correct application of expansion factors</li> <li>Template for other state/EVALID combinations</li> </ul>"},{"location":"queries/basic_tree/oregon_total_live_trees/#key-learning-points","title":"Key Learning Points","text":"<ol> <li>Adjustment Factor Logic: The CASE statement shows how different tree sizes use different adjustment factors</li> <li>Population Expansion: The EXPNS factor converts plot-level data to population estimates</li> <li>Filtering: Proper filtering for live trees (STATUSCD = 1) and forest conditions (COND_STATUS_CD = 1)</li> <li>EVALID Usage: Shows how to target specific state/year combinations</li> </ol>"},{"location":"queries/biomass_carbon/","title":"Biomass and Carbon Queries","text":"<p>This section contains queries for calculating forest biomass and carbon storage using species-specific equations and properties.</p>"},{"location":"queries/biomass_carbon/#queries-in-this-section","title":"Queries in this Section","text":""},{"location":"queries/biomass_carbon/#1-colorado-above-ground-dry-biomass-by-species-group","title":"1. Colorado Above-Ground Dry Biomass by Species Group","text":"<p>EVALID: 82101 (Colorado 2021) Result: 1.096 billion tons total above-ground dry biomass, 10 species groups</p> <p>A comprehensive biomass calculation that demonstrates: - Species-specific wood and bark properties - Moisture content adjustments for accurate dry weight - Specific gravity calculations for wood and bark - Bark volume percentage corrections - Simplified approach that produces identical results to Oracle EVALIDator</p> <p>Top Species Groups by Biomass: - 18: Engelmann and other spruces - 288,927,955 tons (26.4%) - 44: Cottonwood and aspen (West) - 247,391,052 tons (22.6%) - 12: True fir - 122,095,237 tons (11.1%) - 23: Woodland softwoods - 114,570,440 tons (10.5%)</p>"},{"location":"queries/biomass_carbon/#2-north-carolina-merchantable-bole-biomass","title":"2. North Carolina Merchantable Bole Biomass","text":"<p>EVALID: 372301 (North Carolina 2023) Result: 1.56 billion green short tons merchantable bole biomass</p> <p>Calculates merchantable bole bark and wood biomass for timber species \u22655\" DBH: - Green weight (includes moisture content) calculations - Merchantable bole components (DRYBIO_BOLE + DRYBIO_BOLE_BARK) - Results by diameter class and species - Complex moisture content conversions for wood and bark - EVALIDator-compatible formatting with species details</p> <p>Key Findings: - Peak biomass in 11.0-12.9\" diameter class (202.1 million tons) - Loblolly pine dominates across all size classes - 995 unique diameter class \u00d7 species combinations - Demonstrates managed forest structure with concentration in pole-sized trees</p>"},{"location":"queries/biomass_carbon/#key-concepts-demonstrated","title":"Key Concepts Demonstrated","text":"<ul> <li>Species-Specific Calculations: Each species has unique wood and bark properties</li> <li>Moisture Content Adjustments: Separate adjustments for wood and bark moisture</li> <li>Specific Gravity Applications: Converting volume to weight using species properties</li> <li>Bark Volume Corrections: Accounting for bark proportion in total tree volume</li> <li>Unit Conversions: Converting from pounds to tons (/2000)</li> <li>Query Simplification: Readable approach maintaining statistical accuracy</li> </ul>"},{"location":"queries/biomass_carbon/#evalidator-methodology","title":"EVALIDator Methodology","text":"<p>These queries follow Oracle EVALIDator biomass methodology: - Uses <code>DRYBIO_AG</code> (above-ground dry biomass) as base measurement - Applies complex species-specific conversion factors - Includes moisture content adjustments (MC_PCT_GREEN_WOOD, MC_PCT_GREEN_BARK) - Uses specific gravity values (WOOD_SPGR_GREENVOL_DRYWT, BARK_SPGR_GREENVOL_DRYWT) - Handles bark volume percentages (BARK_VOL_PCT) for accurate wood/bark ratios - Applies diameter-based adjustment factors with nested CASE logic</p>"},{"location":"queries/biomass_carbon/#advanced-features","title":"Advanced Features","text":"<ul> <li>Special Species Mapping: Eastern redcedar (SPCD 122) mapped to different species groups by state</li> <li>Default Values: Uses 1.76 specific gravity when species data unavailable</li> <li>Complex Calculations: Multi-step biomass equations matching Oracle formulas exactly</li> <li>Verification: Simplified version tested to produce identical results to complex Oracle translation</li> </ul>"},{"location":"queries/biomass_carbon/#usage-notes","title":"Usage Notes","text":"<ul> <li>Biomass calculations are computationally intensive due to species-specific formulas</li> <li>Results represent dry weight biomass (moisture removed)</li> <li>Carbon content typically estimated as ~50% of dry biomass</li> <li>Query demonstrates balance between accuracy and maintainability</li> </ul>"},{"location":"queries/biomass_carbon/colorado_biomass_by_species_group/","title":"Colorado Above-Ground Dry Biomass by Species Group","text":"<p>This query demonstrates advanced biomass calculations using species-specific properties and produces results identical to Oracle EVALIDator with cleaner, more maintainable code.</p>"},{"location":"queries/biomass_carbon/colorado_biomass_by_species_group/#query-overview","title":"Query Overview","text":"<ul> <li>EVALID: 82101 (Colorado 2021)</li> <li>Expected Result: 1.096 billion tons total above-ground dry biomass</li> <li>Species Groups: 10 species groups analyzed</li> </ul>"},{"location":"queries/biomass_carbon/colorado_biomass_by_species_group/#key-features","title":"Key Features","text":"<ul> <li>Species-specific wood and bark properties</li> <li>Moisture content adjustments (MC_PCT_GREEN_WOOD, MC_PCT_GREEN_BARK)</li> <li>Specific gravity calculations (WOOD_SPGR_GREENVOL_DRYWT, BARK_SPGR_GREENVOL_DRYWT)</li> <li>Bark volume percentage adjustments (BARK_VOL_PCT)</li> <li>Direct SPGRPCD grouping instead of complex LPAD formatting</li> <li>Verified to match Oracle EVALIDator exactly</li> </ul>"},{"location":"queries/biomass_carbon/colorado_biomass_by_species_group/#query","title":"Query","text":"<pre><code>/*\nColorado Above-Ground Dry Biomass by Species Group (EVALIDator-Style)\n=====================================================================\n\nEVALID: 82101 (Colorado 2021)\nExpected Result: 1.096 billion tons total above-ground dry biomass, 10 species groups\n\nThis query demonstrates advanced biomass calculations using species-specific properties.\nUses simplified approach that produces identical results to Oracle EVALIDator with\ncleaner, more maintainable code.\n\nKey Features:\n- Species-specific wood and bark properties\n- Moisture content adjustments (MC_PCT_GREEN_WOOD, MC_PCT_GREEN_BARK)\n- Specific gravity calculations (WOOD_SPGR_GREENVOL_DRYWT, BARK_SPGR_GREENVOL_DRYWT)\n- Bark volume percentage adjustments (BARK_VOL_PCT)\n- Direct SPGRPCD grouping instead of complex LPAD formatting\n- Verified to match Oracle EVALIDator exactly\n\nTop Results:\n- 18: Engelmann and other spruces - 288,927,955 tons (26.4%)\n- 44: Cottonwood and aspen (West) - 247,391,052 tons (22.6%)\n- 12: True fir - 122,095,237 tons (11.1%)\n- 23: Woodland softwoods - 114,570,440 tons (10.5%)\n*/\n\nSELECT\n    SPGRPCD,\n    species_group_name,\n    SUM(ESTIMATED_VALUE * EXPNS) AS total_biomass_tons\nFROM (\n    SELECT\n        pop_stratum.EXPNS,\n        REF_SPECIES_GROUP_TREE.SPGRPCD,\n        REF_SPECIES_GROUP_TREE.NAME AS species_group_name,\n\n        -- Same EXACT biomass calculation from Oracle\n        SUM(\n            TREE.TPA_UNADJ *\n            COALESCE(\n                (\n                    (1 - (REF_SPECIES.BARK_VOL_PCT / (100 + REF_SPECIES.BARK_VOL_PCT))) *\n                    REF_SPECIES.WOOD_SPGR_GREENVOL_DRYWT /\n                    (\n                        (1 - (REF_SPECIES.BARK_VOL_PCT / (100 + REF_SPECIES.BARK_VOL_PCT))) *\n                        REF_SPECIES.WOOD_SPGR_GREENVOL_DRYWT +\n                        (REF_SPECIES.BARK_VOL_PCT / (100 + REF_SPECIES.BARK_VOL_PCT)) *\n                        REF_SPECIES.BARK_SPGR_GREENVOL_DRYWT\n                    ) *\n                    (1.0 + REF_SPECIES.MC_PCT_GREEN_WOOD * 0.01) +\n                    (REF_SPECIES.BARK_VOL_PCT / (100 + REF_SPECIES.BARK_VOL_PCT)) *\n                    REF_SPECIES.BARK_SPGR_GREENVOL_DRYWT /\n                    (\n                        (1 - (REF_SPECIES.BARK_VOL_PCT / (100 + REF_SPECIES.BARK_VOL_PCT))) *\n                        REF_SPECIES.WOOD_SPGR_GREENVOL_DRYWT +\n                        (REF_SPECIES.BARK_VOL_PCT / (100 + REF_SPECIES.BARK_VOL_PCT)) *\n                        REF_SPECIES.BARK_SPGR_GREENVOL_DRYWT\n                    ) *\n                    (1.0 + REF_SPECIES.MC_PCT_GREEN_BARK * 0.01)\n                ),\n                1.76  -- Default specific gravity when species data unavailable\n            ) *\n            -- Same EXACT Oracle CASE logic for adjustment factors\n            CASE\n                WHEN TREE.DIA IS NULL THEN POP_STRATUM.ADJ_FACTOR_SUBP\n                ELSE\n                    CASE LEAST(TREE.DIA, 5 - 0.001)\n                        WHEN TREE.DIA THEN POP_STRATUM.ADJ_FACTOR_MICR\n                        ELSE\n                            CASE LEAST(TREE.DIA, COALESCE(CAST(PLOT.MACRO_BREAKPOINT_DIA AS DECIMAL), 9999) - 0.001)\n                                WHEN TREE.DIA THEN POP_STRATUM.ADJ_FACTOR_SUBP\n                                ELSE POP_STRATUM.ADJ_FACTOR_MACR\n                            END\n                    END\n            END *\n            COALESCE(TREE.DRYBIO_AG / 2000, 0)  -- Convert pounds to tons\n        ) AS ESTIMATED_VALUE\n\n    FROM POP_STRATUM\n    JOIN POP_PLOT_STRATUM_ASSGN ON (POP_PLOT_STRATUM_ASSGN.STRATUM_CN = POP_STRATUM.CN)\n    JOIN PLOT ON (POP_PLOT_STRATUM_ASSGN.PLT_CN = PLOT.CN)\n    JOIN COND ON (COND.PLT_CN = PLOT.CN)\n    JOIN TREE ON (TREE.PLT_CN = COND.PLT_CN AND TREE.CONDID = COND.CONDID)\n    JOIN REF_SPECIES ON (TREE.SPCD = REF_SPECIES.SPCD)\n    LEFT OUTER JOIN REF_SPECIES_GROUP REF_SPECIES_GROUP_TREE ON (\n        REF_SPECIES_GROUP_TREE.SPGRPCD = CASE\n            -- Special species group mapping for eastern redcedar in certain states\n            WHEN TREE.STATECD IN (46, 38, 31, 20) AND TREE.SPCD = 122 THEN 11\n            ELSE TREE.SPGRPCD\n        END\n    )\n\n    WHERE\n        TREE.STATUSCD = 1  -- Live trees\n        AND COND.COND_STATUS_CD = 1  -- Forest conditions\n        AND ((pop_stratum.RSCD = 22 AND pop_stratum.EVALID = 82101))  -- Colorado 2021\n\n    GROUP BY\n        pop_stratum.ESTN_UNIT_CN,\n        pop_stratum.CN,\n        plot.CN,\n        plot.PREV_PLT_CN,\n        cond.CN,\n        plot.LAT,\n        plot.LON,\n        pop_stratum.EXPNS,\n        REF_SPECIES_GROUP_TREE.SPGRPCD,\n        REF_SPECIES_GROUP_TREE.NAME\n)\nGROUP BY SPGRPCD, species_group_name\nORDER BY total_biomass_tons DESC;\n\n/*\nExpected Results (Top 10):\nSPGRPCD | Species Group                    | Biomass (tons)  | Percentage\n--------|----------------------------------|-----------------|----------\n18      | Engelmann and other spruces      | 288,927,955     | 26.4%\n44      | Cottonwood and aspen (West)      | 247,391,052     | 22.6%\n12      | True fir                         | 122,095,237     | 11.1%\n23      | Woodland softwoods               | 114,570,440     | 10.5%\n21      | Lodgepole pine                   | 96,393,745      | 8.8%\n11      | Ponderosa and Jeffrey pines      | 95,361,069      | 8.7%\n10      | Douglas-fir                      | 83,741,547      | 7.6%\n48      | Woodland hardwoods               | 28,016,243      | 2.6%\n24      | Other western softwoods          | 18,829,443      | 1.7%\n47      | Other western hardwoods          | 811,564         | 0.1%\n\nKey Insights:\n- Spruce dominance: Engelmann and other spruces contain the most biomass (26.4%)\n- Aspen significance: Cottonwood and aspen represent 22.6% of total biomass\n- Conifer dominance: Softwood species groups account for 74.7% of total biomass\n- Regional adaptation: Query includes western-specific species group mappings\n\nValidation Notes:\n- Results match Oracle EVALIDator exactly\n- Simplified approach reduces code by ~50% while maintaining accuracy\n- Demonstrates proper use of species-specific biomass equations\n- Shows correct application of moisture content and specific gravity adjustments\n*/\n</code></pre>"},{"location":"queries/biomass_carbon/colorado_biomass_by_species_group/#download","title":"Download","text":"<p>  Download SQL File </p>"},{"location":"queries/biomass_carbon/colorado_biomass_by_species_group/#expected-results","title":"Expected Results","text":"SPGRPCD Species Group Biomass (tons) Percentage 18 Engelmann and other spruces 288,927,955 26.4% 44 Cottonwood and aspen (West) 247,391,052 22.6% 12 True fir 122,095,237 11.1% 23 Woodland softwoods 114,570,440 10.5% 21 Lodgepole pine 96,393,745 8.8% 11 Ponderosa and Jeffrey pines 95,361,069 8.7% 10 Douglas-fir 83,741,547 7.6% 48 Woodland hardwoods 28,016,243 2.6% 24 Other western softwoods 18,829,443 1.7% 47 Other western hardwoods 811,564 0.1%"},{"location":"queries/biomass_carbon/colorado_biomass_by_species_group/#key-insights","title":"Key Insights","text":"<ul> <li>Spruce dominance: Engelmann and other spruces contain the most biomass (26.4%)</li> <li>Aspen significance: Cottonwood and aspen represent 22.6% of total biomass</li> <li>Conifer dominance: Softwood species groups account for 74.7% of total biomass</li> <li>Regional adaptation: Query includes western-specific species group mappings</li> </ul>"},{"location":"queries/biomass_carbon/colorado_biomass_by_species_group/#technical-features","title":"Technical Features","text":"<ol> <li>Species-Specific Properties: Uses detailed wood and bark characteristics from REF_SPECIES table</li> <li>Moisture Content Adjustments: Accounts for green wood and bark moisture percentages</li> <li>Specific Gravity Calculations: Complex biomass equations using wood and bark specific gravities</li> <li>Special Mappings: Handles eastern redcedar group mapping for specific states</li> <li>Oracle Compatibility: Maintains exact Oracle EVALIDator calculation logic</li> </ol>"},{"location":"queries/biomass_carbon/colorado_biomass_by_species_group/#validation-notes","title":"Validation Notes","text":"<ul> <li>Results match Oracle EVALIDator exactly</li> <li>Simplified approach reduces code by ~50% while maintaining accuracy</li> <li>Demonstrates proper use of species-specific biomass equations</li> <li>Shows correct application of moisture content and specific gravity adjustments</li> </ul>"},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/","title":"North Carolina Merchantable Bole Biomass by Diameter Class and Species","text":""},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/#overview","title":"Overview","text":"<p>This query calculates merchantable bole bark and wood biomass of live trees (timber species at least 5 inches d.b.h.) on forest land in North Carolina. Results are presented in green short tons, grouped by diameter class and species.</p>"},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/#key-components","title":"Key Components","text":""},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/#tables-used","title":"Tables Used","text":"<ul> <li><code>POP_STRATUM</code> - Statistical strata and expansion factors</li> <li><code>POP_PLOT_STRATUM_ASSGN</code> - Links plots to strata</li> <li><code>PLOT</code> - Plot locations and macroplot breakpoints</li> <li><code>PLOTGEOM</code> - Plot geometry (required for join)</li> <li><code>COND</code> - Condition data for forest land identification</li> <li><code>TREE</code> - Tree measurements and biomass components</li> <li><code>REF_SPECIES</code> - Species-specific wood and bark properties</li> </ul>"},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/#key-fields","title":"Key Fields","text":"<ul> <li><code>DRYBIO_BOLE</code> - Dry biomass of merchantable bole wood (pounds)</li> <li><code>DRYBIO_BOLE_BARK</code> - Dry biomass of merchantable bole bark (pounds)</li> <li><code>WOOD_SPGR_GREENVOL_DRYWT</code> - Wood specific gravity (green volume, dry weight)</li> <li><code>BARK_SPGR_GREENVOL_DRYWT</code> - Bark specific gravity (green volume, dry weight)</li> <li><code>MC_PCT_GREEN_WOOD</code> - Moisture content percentage for green wood</li> <li><code>MC_PCT_GREEN_BARK</code> - Moisture content percentage for green bark</li> <li><code>BARK_VOL_PCT</code> - Bark volume as percentage of wood volume</li> </ul>"},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/#biomass-calculation","title":"Biomass Calculation","text":"<p>The query converts dry biomass to green weight using species-specific properties: 1. Separates wood and bark components based on bark volume percentage 2. Applies moisture content adjustments to convert dry weight to green weight 3. Combines wood and bark for total merchantable bole biomass 4. Converts from pounds to short tons (divide by 2000)</p>"},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/#filters","title":"Filters","text":"<ul> <li>Live trees only (<code>STATUSCD = 1</code>)</li> <li>Forest land only (<code>COND_STATUS_CD = 1</code>)</li> <li>Trees \u2265 5 inches DBH (merchantable size)</li> <li>North Carolina (<code>rscd = 33</code>)</li> <li>2023 volume evaluation (<code>evalid = 372301</code>)</li> </ul>"},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/#results-summary","title":"Results Summary","text":""},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/#total-merchantable-bole-biomass","title":"Total Merchantable Bole Biomass","text":"<p>1,560,412,205 green short tons (1.56 billion tons)</p>"},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/#by-diameter-class-top-5","title":"By Diameter Class (Top 5)","text":"Diameter Class Biomass (million tons) % of Total 11.0-12.9\" 202.1 13.0% 13.0-14.9\" 198.9 12.7% 9.0-10.9\" 181.9 11.7% 15.0-16.9\" 175.7 11.3% 17.0-18.9\" 154.0 9.9%"},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/#key-species-examples-from-50-69-class","title":"Key Species (Examples from 5.0-6.9\" class)","text":"<ul> <li>Loblolly pine (SPCD 131): 21.0 million tons - dominant species</li> <li>Virginia pine (SPCD 132): 2.9 million tons</li> <li>Longleaf pine (SPCD 121): 1.2 million tons</li> <li>Pond pine (SPCD 128): 0.8 million tons</li> <li>Eastern white pine (SPCD 129): 0.7 million tons</li> </ul>"},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/#notes","title":"Notes","text":"<ul> <li>Biomass peaks in the 11-15\" diameter range, reflecting the distribution of managed forests</li> <li>Loblolly pine dominates across all diameter classes as expected for North Carolina</li> <li>The green weight conversion accounts for typical moisture content in living trees</li> <li>Uses DRYBIO_BOLE + DRYBIO_BOLE_BARK for total merchantable bole biomass</li> <li>Species without specific gravity data use default factor of 1.76</li> </ul>"},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/#query-translation-notes","title":"Query Translation Notes","text":""},{"location":"queries/biomass_carbon/north_carolina_merchantable_biomass/#oracle-to-duckdb-changes","title":"Oracle to DuckDB changes:","text":"<ul> <li><code>LPAD(SPCD, 4, '0')</code> \u2192 <code>printf('%04d', SPCD)</code></li> <li><code>LEAST()</code> function syntax maintained (both support)</li> <li>Table aliases maintained for clarity</li> <li>Schema prefix removed for DuckDB</li> </ul>"},{"location":"queries/forest_area/","title":"forest area Queries","text":"<p>Coming soon...</p>"},{"location":"queries/forest_area/minnesota_forest_type_groups/","title":"Minnesota Forest Area by Forest Type Group","text":"<p>This query demonstrates forest area estimation using EVALIDator methodology, showing how Minnesota's forests are distributed across different forest type groups.</p>"},{"location":"queries/forest_area/minnesota_forest_type_groups/#query-overview","title":"Query Overview","text":"<ul> <li>EVALID: 272201 (Minnesota 2022)</li> <li>Expected Result: 17,599,046 total forest acres across 10 forest type groups</li> <li>Key Insight: Demonstrates boreal forest dominance in Minnesota</li> </ul>"},{"location":"queries/forest_area/minnesota_forest_type_groups/#key-features","title":"Key Features","text":"<ul> <li>Forest type group classification and area estimation</li> <li>Proper condition proportion and adjustment factor handling</li> <li>Population expansion for statistical estimates</li> <li>Comprehensive forest type group analysis</li> </ul>"},{"location":"queries/forest_area/minnesota_forest_type_groups/#query","title":"Query","text":"<pre><code>SELECT\n    CASE\n        WHEN rftg.VALUE IS NULL THEN '0999 Nonstocked'\n        ELSE LPAD(CAST(rftg.VALUE AS VARCHAR), 4, '0') || ' ' || COALESCE(rftg.MEANING, 'Unknown')\n    END as forest_type_group,\n    SUM(\n        c.CONDPROP_UNADJ *\n        CASE c.PROP_BASIS\n            WHEN 'MACR' THEN ps.ADJ_FACTOR_MACR\n            ELSE ps.ADJ_FACTOR_SUBP\n        END * ps.EXPNS\n    ) as total_area_acres\n\nFROM POP_STRATUM ps\nJOIN POP_PLOT_STRATUM_ASSGN ppsa ON ppsa.STRATUM_CN = ps.CN\nJOIN PLOT p ON ppsa.PLT_CN = p.CN\nJOIN COND c ON c.PLT_CN = p.CN\nLEFT JOIN REF_FOREST_TYPE rft ON rft.VALUE = c.FORTYPCD\nLEFT JOIN REF_FOREST_TYPE_GROUP rftg ON rft.TYPGRPCD = rftg.VALUE\n\nWHERE\n    c.COND_STATUS_CD = 1  -- Forest conditions only\n    AND c.CONDPROP_UNADJ IS NOT NULL\n    AND ps.rscd = 23  -- Minnesota\n    AND ps.evalid = 272201\n\nGROUP BY rftg.VALUE, rftg.MEANING\nORDER BY total_area_acres DESC\nLIMIT 10;\n</code></pre>"},{"location":"queries/forest_area/minnesota_forest_type_groups/#expected-results","title":"Expected Results","text":"<p>Top 10 Forest Type Groups by Area:</p> <ol> <li>0900: Aspen / birch group - 6,411,308 acres (36.4%)</li> <li>0120: Spruce / fir group - 4,312,514 acres (24.5%)</li> <li>0500: Oak / hickory group - 2,247,158 acres (12.8%)</li> <li>0700: Elm / ash / cottonwood group - 1,662,899 acres (9.4%)</li> <li>0800: Maple / beech / birch group - 1,196,822 acres (6.8%)</li> <li>0100: White / red / jack pine group - 1,059,161 acres (6.0%)</li> <li>0400: Oak / pine group - 286,679 acres (1.6%)</li> <li>0960: Other hardwoods group - 173,349 acres (1.0%)</li> <li>0999: Nonstocked - 169,101 acres (1.0%)</li> <li>0990: Exotic hardwoods group - 48,366 acres (0.3%)</li> </ol>"},{"location":"queries/forest_area/minnesota_forest_type_groups/#key-insights","title":"Key Insights","text":"<ul> <li>\ud83c\udf32 Boreal Dominance: Aspen/birch and spruce/fir groups dominate (60.9% combined)</li> <li>\ud83c\udf41 Northern Hardwoods: Oak/hickory and maple/beech/birch reflect transition zone</li> <li>\ud83c\udf33 Forest Type Grouping: EVALIDator uses broader forest type groups for analysis</li> <li>\ud83d\udcca Area Concentration: Top 6 groups account for 95.9% of all forest area</li> </ul>"},{"location":"queries/forest_area/minnesota_forest_type_groups/#evalidator-methodology","title":"EVALIDator Methodology","text":"<ul> <li>Forest Type Groups: Uses REF_FOREST_TYPE_GROUP instead of individual forest types</li> <li>PROP_BASIS Handling: Correct adjustment factor selection (MACR vs SUBP)</li> <li>Population Expansion: Applies EXPNS for statistical estimates</li> <li>Statistical Integrity: Matches Oracle EVALIDator query structure exactly</li> </ul>"},{"location":"queries/forest_area/minnesota_forest_type_groups/#download","title":"Download","text":"<p>  Download SQL File </p>"},{"location":"queries/forest_change/","title":"Forest Change Queries","text":"<p>This directory contains SQL queries for analyzing forest condition changes over time using FIA's remeasurement data and change matrices.</p>"},{"location":"queries/forest_change/#overview","title":"Overview","text":"<p>Forest change analysis tracks how forest conditions evolve between measurement cycles. These queries use: - <code>SUBP_COND_CHNG_MTRX</code> table for condition-level changes - Previous plot linkages (<code>PREV_PLT_CN</code>) to connect remeasurements - Change evaluation types (EVALID ending in 03) for proper temporal analysis</p>"},{"location":"queries/forest_change/#query-inventory","title":"Query Inventory","text":""},{"location":"queries/forest_change/#missouri-forest-type-change","title":"Missouri Forest Type Change","text":"<p>Calculates forest area changes by forest type group for Missouri's 2024 evaluation. - EVALID: 292403 (Missouri 2024 Change) - Focus: Net forest area by type group - Key Finding: Oak/hickory dominates with 11.8M acres</p>"},{"location":"queries/forest_change/#key-concepts","title":"Key Concepts","text":""},{"location":"queries/forest_change/#change-matrix-subp_cond_chng_mtrx","title":"Change Matrix (SUBP_COND_CHNG_MTRX)","text":"<ul> <li>Tracks proportion of each condition that changed between measurements</li> <li>Links current and previous conditions through plot CNs</li> <li><code>SUBPTYP_PROP_CHNG</code> indicates the proportion changed (divided by 4 for per-plot basis)</li> </ul>"},{"location":"queries/forest_change/#evaluation-types","title":"Evaluation Types","text":"<p>Change evaluations (ending in 03) specifically support temporal analysis: - Include previous plot linkages - Have longer remeasurement intervals - Support growth, removal, and mortality calculations</p>"},{"location":"queries/forest_change/#common-patterns","title":"Common Patterns","text":"<pre><code>-- Link current and previous conditions\nJOIN COND pcond ON pcond.PLT_CN = plot.PREV_PLT_CN\nJOIN SUBP_COND_CHNG_MTRX sccm ON\n    sccm.PLT_CN = cond.PLT_CN\n    AND sccm.PREV_PLT_CN = pcond.PLT_CN\n</code></pre>"},{"location":"queries/forest_change/#best-practices","title":"Best Practices","text":"<ol> <li>Always filter both current and previous conditions for validity</li> <li>Apply appropriate adjustment factors based on subplot type</li> <li>Use change-specific EVALIDs (ending in 03)</li> <li>Account for the 4-subplot design when using proportion fields</li> </ol>"},{"location":"queries/forest_change/missouri_forest_type_change/","title":"Missouri Forest Area Change by Forest Type Group","text":""},{"location":"queries/forest_change/missouri_forest_type_change/#overview","title":"Overview","text":"<p>This query calculates forest area changes by forest type group for Missouri using the 2024 change evaluation (EVALID 292403). It uses the SUBP_COND_CHNG_MTRX table to track condition changes between remeasurement periods.</p>"},{"location":"queries/forest_change/missouri_forest_type_change/#key-components","title":"Key Components","text":""},{"location":"queries/forest_change/missouri_forest_type_change/#tables-used","title":"Tables Used","text":"<ul> <li><code>POP_STRATUM</code> - Statistical strata and expansion factors</li> <li><code>POP_PLOT_STRATUM_ASSGN</code> - Links plots to strata</li> <li><code>PLOT</code> - Plot locations and previous plot links</li> <li><code>PLOTGEOM</code> - Plot geometry (required for join)</li> <li><code>COND</code> - Current condition data</li> <li><code>COND</code> (aliased as <code>pcond</code>) - Previous condition data</li> <li><code>SUBP_COND_CHNG_MTRX</code> - Condition change matrix tracking changes between measurements</li> <li><code>REF_FOREST_TYPE</code> &amp; <code>REF_FOREST_TYPE_GROUP</code> - Forest type classification reference</li> </ul>"},{"location":"queries/forest_change/missouri_forest_type_change/#key-fields","title":"Key Fields","text":"<ul> <li><code>SUBPTYP_PROP_CHNG</code> - Proportion of condition that changed</li> <li><code>SUBPTYP</code> - Subplot type (1=subplot, 3=macroplot)</li> <li><code>PROP_BASIS</code> - Property basis for adjustment factors</li> <li><code>FORTYPCD</code> - Forest type code</li> <li><code>FORTYGPCD</code> - Forest type group code</li> </ul>"},{"location":"queries/forest_change/missouri_forest_type_change/#statistical-adjustments","title":"Statistical Adjustments","text":"<p>The query applies appropriate adjustment factors based on the subplot type: - Macroplot conditions use <code>ADJ_FACTOR_MACR</code> - Subplot conditions use <code>ADJ_FACTOR_SUBP</code></p>"},{"location":"queries/forest_change/missouri_forest_type_change/#filters","title":"Filters","text":"<ul> <li>Forest land only (<code>COND_STATUS_CD = 1</code> for both current and previous)</li> <li>Valid sample conditions (no non-sample reason codes)</li> <li>Missouri state (<code>rscd = 23</code>)</li> <li>2024 change evaluation (<code>evalid = 292403</code>)</li> </ul>"},{"location":"queries/forest_change/missouri_forest_type_change/#results","title":"Results","text":"Forest Type Group Estimate (acres) White / red / jack pine group 2,680.00 Loblolly / shortleaf pine group 259,594.55 Other eastern softwoods group 380,424.07 Oak / pine group 992,191.82 Oak / hickory group 11,834,572.21 Oak / gum / cypress group 167,871.00 Elm / ash / cottonwood group 1,088,900.36 Maple / beech / birch group 101,899.97 Other hardwoods group 15,728.00 Exotic hardwoods group 1,721.62 Nonstocked 63,797.99"},{"location":"queries/forest_change/missouri_forest_type_change/#notes","title":"Notes","text":"<ul> <li>The <code>/4</code> division in <code>SUBPTYP_PROP_CHNG / 4</code> converts from the 4-subplot design to per-plot basis</li> <li>Forest type groups are formatted with zero-padded codes for consistent sorting</li> <li>Oak/hickory dominates Missouri's forests with ~11.8 million acres</li> <li>This query tracks net forest area by type group, capturing both gains and losses</li> </ul>"},{"location":"queries/forest_change/missouri_forest_type_change/#query-translation-notes","title":"Query Translation Notes","text":""},{"location":"queries/forest_change/missouri_forest_type_change/#oracle-to-duckdb-changes","title":"Oracle to DuckDB changes:","text":"<ul> <li><code>LPAD(value, 4, '0')</code> \u2192 <code>printf('%04d', value)</code></li> <li><code>NVL()</code> \u2192 <code>COALESCE()</code></li> <li>Table aliases maintained for clarity</li> <li>Schema prefix <code>FS_FIADB.</code> removed for DuckDB</li> </ul>"},{"location":"queries/mortality/","title":"Growth and Mortality Queries","text":"<p>This directory contains SQL queries for estimating forest growth, mortality, and removals using FIA data.</p>"},{"location":"queries/mortality/#available-queries","title":"Available Queries","text":""},{"location":"queries/mortality/#mortality-queries","title":"Mortality Queries","text":"<ul> <li>Colorado Merchantable Volume Mortality - Annual mortality of merchantable bole wood volume of growing-stock trees</li> <li>North Carolina Tree Mortality Rate - Simple mortality rate in trees per acre per year on forest land</li> <li>Georgia Growing-Stock Mortality by Damage Agent - Annual mortality by tree-level cause of death and species</li> <li>Georgia Growing-Stock Mortality by Disturbance Type - Annual mortality by condition-level disturbance and species</li> </ul>"},{"location":"queries/mortality/#key-concepts","title":"Key Concepts","text":""},{"location":"queries/mortality/#growthremovalmortality-grm-evaluations","title":"Growth/Removal/Mortality (GRM) Evaluations","text":"<p>Unlike volume or area estimates, growth and mortality calculations require special evaluation types:</p> <ul> <li>GRM Evaluations: Use remeasurement data from plots visited multiple times</li> <li>TREE_GRM Tables: Contain component-based calculations for growth, mortality, and removals</li> <li>Annual Rates: Values are already annualized based on remeasurement period</li> </ul>"},{"location":"queries/mortality/#important-tables","title":"Important Tables","text":"<ul> <li>TREE_GRM_BEGIN: Tree attributes at start of remeasurement period</li> <li>TREE_GRM_COMPONENT: Pre-calculated annual rates by component type</li> <li>TREE_GRM_MIDPT: Tree attributes at midpoint (for growth calculations)</li> </ul>"},{"location":"queries/mortality/#component-types","title":"Component Types","text":"<ul> <li>MORTALITY1, MORTALITY2: Different mortality events</li> <li>SURVIVOR: Trees that survived the remeasurement period</li> <li>INGROWTH: New trees entering the inventory</li> <li>REMOVAL1, REMOVAL2: Harvest or other removals</li> </ul>"},{"location":"queries/mortality/#tree-classifications","title":"Tree Classifications","text":"<ul> <li>All Live (AL): All live trees regardless of merchantability</li> <li>Growing Stock (GS): Merchantable timber trees only</li> </ul>"},{"location":"queries/mortality/#query-patterns","title":"Query Patterns","text":""},{"location":"queries/mortality/#basic-mortality-query-structure","title":"Basic Mortality Query Structure","text":"<pre><code>SELECT\n    SUM(\n        tgc.SUBP_COMPONENT_GS_FOREST * t.VOLCFNET *\n        [adjustment_factors] * ps.EXPNS\n    ) as annual_mortality\nFROM POP_STRATUM ps\nJOIN [standard FIA joins]\nJOIN TREE_GRM_COMPONENT tgc ON tgc.PLT_CN = p.CN\nJOIN TREE_GRM_BEGIN t ON t.TRE_CN = tgc.TRE_CN\nWHERE\n    tgc.COMPONENT LIKE 'MORTALITY%'\n    AND [other filters]\n</code></pre>"},{"location":"queries/mortality/#coming-soon","title":"Coming Soon","text":"<ul> <li>Growth rate queries</li> <li>Removals (harvest) estimation</li> <li>Net change calculations</li> <li>Mortality by cause</li> <li>Growth by species group</li> </ul>"},{"location":"queries/mortality/colorado_mortality_merchantable_volume/","title":"Colorado Annual Mortality of Merchantable Volume","text":"<p>This query demonstrates mortality estimation using EVALIDator methodology, calculating the average annual mortality of merchantable bole wood volume of growing-stock trees on forest land in Colorado.</p>"},{"location":"queries/mortality/colorado_mortality_merchantable_volume/#query-overview","title":"Query Overview","text":"<ul> <li>EVALID: 82003 (Colorado 2020 Growth/Removal/Mortality evaluation)</li> <li>Expected Result: ~9.7 million cubic feet per year of merchantable volume mortality</li> <li>Key Metric: Annual mortality rate of growing-stock merchantable volume</li> </ul>"},{"location":"queries/mortality/colorado_mortality_merchantable_volume/#key-features","title":"Key Features","text":"<ul> <li>Growing-stock tree mortality (merchantable timber only)</li> <li>Uses TREE_GRM_COMPONENT tables for remeasurement data</li> <li>Proper COMPONENT filtering for mortality events</li> <li>Annual rate calculation from remeasurement period</li> </ul>"},{"location":"queries/mortality/colorado_mortality_merchantable_volume/#query","title":"Query","text":"<pre><code>SELECT\n    ps.evalid,\n    SUM(\n        tgc.SUBP_COMPONENT_GS_FOREST * t.VOLCFNET *\n        CASE\n            WHEN t.DIA &lt; 5.0 THEN ps.ADJ_FACTOR_MICR\n            WHEN t.DIA &lt; COALESCE(CAST(p.MACRO_BREAKPOINT_DIA AS DOUBLE), 9999.0) THEN ps.ADJ_FACTOR_SUBP\n            ELSE ps.ADJ_FACTOR_MACR\n        END * ps.EXPNS\n    ) as annual_mortality_cuft,\n\n    COUNT(DISTINCT p.CN) as plot_count,\n    MIN(p.REMPER) as min_remper,\n    MAX(p.REMPER) as max_remper\n\nFROM POP_STRATUM ps\nJOIN POP_PLOT_STRATUM_ASSGN ppsa ON ppsa.STRATUM_CN = ps.CN\nJOIN PLOT p ON ppsa.PLT_CN = p.CN\nJOIN COND c ON c.PLT_CN = p.CN\nJOIN TREE_GRM_COMPONENT tgc ON tgc.PLT_CN = p.CN\nJOIN TREE_GRM_BEGIN t ON t.TRE_CN = tgc.TRE_CN\n\nWHERE\n    -- Forest land only\n    c.COND_STATUS_CD = 1\n    -- Mortality components only\n    AND tgc.COMPONENT LIKE 'MORTALITY%'\n    -- Growing stock trees only (have merchantable volume)\n    AND t.VOLCFNET IS NOT NULL\n    AND t.VOLCFNET &gt; 0\n    -- Colorado state\n    AND ps.rscd = 8\n    -- GRM evaluation for mortality\n    AND ps.evalid = 82003\n\nGROUP BY ps.evalid;\n</code></pre>"},{"location":"queries/mortality/colorado_mortality_merchantable_volume/#alternative-query-per-acre-estimates","title":"Alternative Query - Per Acre Estimates","text":"<pre><code>WITH mortality_totals AS (\n    SELECT\n        ps.evalid,\n        SUM(\n            tgc.SUBP_COMPONENT_GS_FOREST * t.VOLCFNET *\n            CASE\n                WHEN t.DIA &lt; 5.0 THEN ps.ADJ_FACTOR_MICR\n                WHEN t.DIA &lt; COALESCE(CAST(p.MACRO_BREAKPOINT_DIA AS DOUBLE), 9999.0) THEN ps.ADJ_FACTOR_SUBP\n                ELSE ps.ADJ_FACTOR_MACR\n            END * ps.EXPNS\n        ) as annual_mortality_cuft,\n        COUNT(DISTINCT p.CN) as plot_count\n    FROM POP_STRATUM ps\n    JOIN POP_PLOT_STRATUM_ASSGN ppsa ON ppsa.STRATUM_CN = ps.CN\n    JOIN PLOT p ON ppsa.PLT_CN = p.CN\n    JOIN COND c ON c.PLT_CN = p.CN\n    JOIN TREE_GRM_COMPONENT tgc ON tgc.PLT_CN = p.CN\n    JOIN TREE_GRM_BEGIN t ON t.TRE_CN = tgc.TRE_CN\n    WHERE\n        c.COND_STATUS_CD = 1\n        AND tgc.COMPONENT LIKE 'MORTALITY%'\n        AND t.VOLCFNET IS NOT NULL\n        AND t.VOLCFNET &gt; 0\n        AND ps.rscd = 8\n        AND ps.evalid = 82003\n    GROUP BY ps.evalid\n),\nforest_area AS (\n    SELECT\n        ps.evalid,\n        SUM(\n            c.CONDPROP_UNADJ *\n            CASE c.PROP_BASIS\n                WHEN 'MACR' THEN ps.ADJ_FACTOR_MACR\n                ELSE ps.ADJ_FACTOR_SUBP\n            END * ps.EXPNS\n        ) as total_forest_acres\n    FROM POP_STRATUM ps\n    JOIN POP_PLOT_STRATUM_ASSGN ppsa ON ppsa.STRATUM_CN = ps.CN\n    JOIN PLOT p ON ppsa.PLT_CN = p.CN\n    JOIN COND c ON c.PLT_CN = p.CN\n    WHERE\n        c.COND_STATUS_CD = 1\n        AND ps.rscd = 8\n        AND ps.evalid = 82003\n    GROUP BY ps.evalid\n)\nSELECT\n    m.evalid,\n    m.annual_mortality_cuft as total_annual_mortality_cuft,\n    f.total_forest_acres,\n    m.annual_mortality_cuft / f.total_forest_acres as mortality_cuft_per_acre_per_year,\n    m.plot_count\nFROM mortality_totals m\nJOIN forest_area f ON m.evalid = f.evalid;\n</code></pre>"},{"location":"queries/mortality/colorado_mortality_merchantable_volume/#expected-results","title":"Expected Results","text":"<p>Total Annual Mortality: - Total Volume: ~9.7 million cubic feet per year - Per Acre: ~4.2 cubic feet per acre per year - Forest Area: ~2.3 million acres - Plot Count: ~1,200 plots</p>"},{"location":"queries/mortality/colorado_mortality_merchantable_volume/#key-insights","title":"Key Insights","text":"<ul> <li>\ud83c\udf32 Merchantable Loss: Represents timber volume lost to mortality annually</li> <li>\ud83d\udcca Growing Stock Focus: Only includes trees with merchantable volume (VOLCFNET &gt; 0)</li> <li>\u23f1\ufe0f Annual Rate: SUBP_COMPONENT_GS_FOREST values are already annualized</li> <li>\ud83d\udd0d Component Filtering: MORTALITY1 and MORTALITY2 capture different mortality events</li> </ul>"},{"location":"queries/mortality/colorado_mortality_merchantable_volume/#evalidator-methodology","title":"EVALIDator Methodology","text":"<ul> <li>GRM Evaluations: Use Growth/Removal/Mortality evaluations (not Volume evaluations)</li> <li>TREE_GRM Tables: Contains remeasurement data for growth and mortality</li> <li>Component Values: Pre-calculated annual rates in TREE_GRM_COMPONENT</li> <li>Growing Stock: Uses _GS_FOREST columns for merchantable timber</li> <li>Tree Basis: Proper adjustment factors based on tree diameter and plot design</li> </ul>"},{"location":"queries/mortality/colorado_mortality_merchantable_volume/#important-notes","title":"Important Notes","text":"<ol> <li>Evaluation Type: Must use GRM (Growth/Removal/Mortality) evaluation, not VOL</li> <li>Annual Rates: COMPONENT values are already annualized - do NOT divide by REMPER</li> <li>Growing Stock: Only trees with VOLCFNET &gt; 0 are included</li> <li>Component Filter: Use LIKE 'MORTALITY%' to capture all mortality events</li> </ol>"},{"location":"queries/mortality/colorado_mortality_merchantable_volume/#download","title":"Download","text":"<p>  Download SQL File </p>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_agent/","title":"Georgia Growing-Stock Mortality by Damage Agent and Species","text":""},{"location":"queries/mortality/georgia_growing_stock_mortality_by_agent/#overview","title":"Overview","text":"<p>This query calculates average annual mortality of growing-stock trees (at least 5 inches d.b.h.) on timberland in Georgia, grouped by damage agent and species. It uses the growing stock timber components from TREE_GRM_COMPONENT table to focus on merchantable timber mortality.</p>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_agent/#key-components","title":"Key Components","text":""},{"location":"queries/mortality/georgia_growing_stock_mortality_by_agent/#tables-used","title":"Tables Used","text":"<ul> <li><code>POP_STRATUM</code> - Statistical strata and expansion factors</li> <li><code>POP_PLOT_STRATUM_ASSGN</code> - Links plots to strata</li> <li><code>PLOT</code> - Plot locations with previous plot linkages</li> <li><code>PLOTGEOM</code> - Plot geometry (required for join)</li> <li><code>COND</code> - Condition data</li> <li><code>TREE</code> - Tree measurements with damage agent codes</li> <li><code>TREE_GRM_BEGIN</code>, <code>TREE_GRM_MIDPT</code> - Growth period tree data</li> <li><code>TREE_GRM_COMPONENT</code> - Mortality components with growing stock focus</li> <li><code>REF_SPECIES</code> - Species reference data</li> </ul>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_agent/#key-fields","title":"Key Fields","text":"<ul> <li><code>AGENTCD</code> - Damage agent code (0-99)</li> <li><code>SUBP_TPAMORT_UNADJ_GS_TIMBER</code> - Unadjusted mortality for growing stock timber</li> <li><code>SUBP_SUBPTYP_GRM_GS_TIMBER</code> - Subplot type for growing stock</li> <li><code>SUBP_COMPONENT_GS_TIMBER</code> - Component type (filtered for MORTALITY%)</li> </ul>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_agent/#damage-agent-categories","title":"Damage Agent Categories","text":"<ul> <li>0: No serious damage</li> <li>1-19: Insect</li> <li>20-29: Disease</li> <li>30-39: Fire</li> <li>40-49: Animal</li> <li>50-59: Weather</li> <li>60-69: Vegetation (competition)</li> <li>70-79: Unknown/other</li> <li>80-89: Logging/human</li> <li>90-99: Physical</li> </ul>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_agent/#filters","title":"Filters","text":"<ul> <li>Growing stock timber components only (_GS_TIMBER columns)</li> <li>Mortality components only (COMPONENT LIKE 'MORTALITY%')</li> <li>Georgia state (<code>rscd = 33</code>)</li> <li>2023 GRM evaluation (<code>evalid = 132303</code>)</li> </ul>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_agent/#results-summary","title":"Results Summary","text":""},{"location":"queries/mortality/georgia_growing_stock_mortality_by_agent/#total-annual-growing-stock-mortality-by-damage-agent","title":"Total Annual Growing Stock Mortality by Damage Agent","text":"Damage Agent Trees per Year Species Count % of Total Insect 12,456,468 23 35.1% Disease 8,584,680 49 24.2% Vegetation 7,880,108 50 22.2% Weather 5,516,640 45 15.6% Fire 1,474,835 26 4.2% Animal 344,485 10 1.0% Unknown/other 74,005 3 0.2% <p>Total: ~36.3 million growing stock trees per year</p>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_agent/#key-species-mortality-insect-damage","title":"Key Species Mortality (Insect damage)","text":"<ul> <li>Loblolly pine (SPCD 131): 7.9 million trees/year - dominant mortality</li> <li>Slash pine (SPCD 111): 2.4 million trees/year</li> <li>Shortleaf pine (SPCD 110): 601,286 trees/year</li> <li>Longleaf pine (SPCD 121): 525,138 trees/year</li> </ul>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_agent/#notes","title":"Notes","text":"<ul> <li>Insect damage is the leading cause of growing stock mortality (35.1%)</li> <li>Pine species dominate insect mortality, particularly southern pine beetle impacts</li> <li>Disease affects more species (49) but lower total mortality than insects</li> <li>Vegetation competition is significant (22.2%), reflecting dense forest conditions</li> <li>Weather-related mortality (15.6%) includes drought, wind, and ice damage</li> <li>The query uses growing stock specific columns (_GS_TIMBER) to focus on merchantable timber</li> </ul>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_agent/#query-translation-notes","title":"Query Translation Notes","text":""},{"location":"queries/mortality/georgia_growing_stock_mortality_by_agent/#oracle-to-duckdb-changes","title":"Oracle to DuckDB changes:","text":"<ul> <li><code>LPAD(SPCD, 4, '0')</code> \u2192 <code>printf('%04d', SPCD)</code></li> <li><code>LEAST()</code> function adapted for range comparisons</li> <li>Complex nested joins maintained for GRM table relationships</li> <li>Schema prefix <code>FS_FIADB.</code> removed for DuckDB</li> </ul>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_disturbance/","title":"Georgia Growing-Stock Mortality by Disturbance Type and Species","text":""},{"location":"queries/mortality/georgia_growing_stock_mortality_by_disturbance/#overview","title":"Overview","text":"<p>This query calculates average annual mortality of growing-stock trees (at least 5 inches d.b.h.) on timberland in Georgia, grouped by disturbance type and species. Unlike the damage agent query which uses tree-level AGENTCD, this uses condition-level DSTRBCD1 to identify disturbances affecting the forest condition.</p>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_disturbance/#key-components","title":"Key Components","text":""},{"location":"queries/mortality/georgia_growing_stock_mortality_by_disturbance/#tables-used","title":"Tables Used","text":"<ul> <li><code>POP_STRATUM</code> - Statistical strata and expansion factors</li> <li><code>POP_PLOT_STRATUM_ASSGN</code> - Links plots to strata</li> <li><code>PLOT</code> - Plot locations with previous plot linkages</li> <li><code>PLOTGEOM</code> - Plot geometry (required for join)</li> <li><code>COND</code> - Condition data with disturbance codes</li> <li><code>TREE</code> - Tree measurements</li> <li><code>TREE_GRM_BEGIN</code>, <code>TREE_GRM_MIDPT</code> - Growth period tree data</li> <li><code>TREE_GRM_COMPONENT</code> - Mortality components with growing stock focus</li> <li><code>REF_SPECIES</code> - Species reference data</li> </ul>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_disturbance/#key-fields","title":"Key Fields","text":"<ul> <li><code>DSTRBCD1</code> - Primary disturbance code at condition level (0-95)</li> <li><code>SUBP_TPAMORT_UNADJ_GS_TIMBER</code> - Unadjusted mortality for growing stock timber</li> <li><code>SUBP_SUBPTYP_GRM_GS_TIMBER</code> - Subplot type for growing stock</li> <li><code>SUBP_COMPONENT_GS_TIMBER</code> - Component type (filtered for MORTALITY%)</li> </ul>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_disturbance/#disturbance-categories","title":"Disturbance Categories","text":"<p>The query includes 32 specific disturbance types: - 0: No visible disturbance - 10-12: Insect damage (general, understory, trees) - 20-22: Disease damage (general, understory, trees) - 30-32: Fire damage (general, ground, crown) - 40-46: Animal damage (general, beaver, porcupine, deer, bear, rabbit, livestock) - 50-54: Weather damage (general, ice, wind, flooding, drought) - 60: Vegetation competition - 70: Unknown/other - 80: Human-caused damage - 90-95: Geologic disturbances</p>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_disturbance/#filters","title":"Filters","text":"<ul> <li>Growing stock timber components only (_GS_TIMBER columns)</li> <li>Mortality components only (COMPONENT LIKE 'MORTALITY%')</li> <li>Georgia state (<code>rscd = 33</code>)</li> <li>2023 GRM evaluation (<code>evalid = 132303</code>)</li> </ul>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_disturbance/#results-summary","title":"Results Summary","text":""},{"location":"queries/mortality/georgia_growing_stock_mortality_by_disturbance/#total-annual-growing-stock-mortality-by-disturbance-type","title":"Total Annual Growing Stock Mortality by Disturbance Type","text":"Disturbance Type Trees per Year Species Count % of Total No visible disturbance 22,520,652 62 61.9% Insect damage to trees 2,675,919 26 7.3% Wind damage 2,637,548 29 7.2% Ground fire damage 2,454,826 31 6.7% Disease damage to trees 1,237,966 22 3.4% Insect damage (general) 1,183,199 14 3.2% Fire (general) 995,907 4 2.7% Human-caused damage 944,404 6 2.6% Beaver damage 504,575 10 1.4% <p>Total: ~36.3 million growing stock trees per year (same as damage agent total)</p>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_disturbance/#key-differences-from-damage-agent-analysis","title":"Key Differences from Damage Agent Analysis","text":"<ul> <li>No visible disturbance dominates (61.9%) - many trees die without condition-level disturbance</li> <li>Wind damage appears significant at condition level (7.2%)</li> <li>Fire damage is more prominent (ground fire 6.7%, general fire 2.7%)</li> <li>Insect and disease show lower percentages than tree-level analysis</li> </ul>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_disturbance/#notes","title":"Notes","text":"<ul> <li>Condition-level disturbances (DSTRBCD1) capture area-wide impacts</li> <li>Tree-level damage agents (AGENTCD) capture individual tree mortality causes</li> <li>The difference explains why \"No visible disturbance\" is so high - individual trees can die from specific agents in undisturbed conditions</li> <li>Wind, fire, and beaver create visible condition-level changes</li> <li>Total mortality matches the damage agent query (36.3M trees/year)</li> </ul>"},{"location":"queries/mortality/georgia_growing_stock_mortality_by_disturbance/#query-translation-notes","title":"Query Translation Notes","text":""},{"location":"queries/mortality/georgia_growing_stock_mortality_by_disturbance/#oracle-to-duckdb-changes","title":"Oracle to DuckDB changes:","text":"<ul> <li><code>LPAD(SPCD, 4, '0')</code> \u2192 <code>printf('%04d', SPCD)</code></li> <li>Extensive CASE statement for 32 disturbance types maintained</li> <li>Complex nested joins maintained for GRM table relationships</li> <li>Schema prefix <code>FS_FIADB.</code> removed for DuckDB</li> </ul>"},{"location":"queries/mortality/north_carolina_mortality_trees_per_acre/","title":"North Carolina Annual Tree Mortality Rate","text":"<p>This query demonstrates mortality estimation using EVALIDator methodology, calculating the average annual mortality rate in trees per acre on forest land in North Carolina.</p>"},{"location":"queries/mortality/north_carolina_mortality_trees_per_acre/#query-overview","title":"Query Overview","text":"<ul> <li>EVALID: 372303 (North Carolina 2023 Growth/Removal/Mortality evaluation)</li> <li>Expected Result: ~0.080 trees per acre per year mortality rate</li> <li>Key Metric: Annual mortality rate for all live trees</li> </ul>"},{"location":"queries/mortality/north_carolina_mortality_trees_per_acre/#key-features","title":"Key Features","text":"<ul> <li>All live tree mortality (not just growing stock)</li> <li>Simple trees per acre calculation</li> <li>Demonstrates basic GRM query structure</li> <li>Annual rate calculation from remeasurement data</li> </ul>"},{"location":"queries/mortality/north_carolina_mortality_trees_per_acre/#query","title":"Query","text":"<pre><code>-- Simple mortality rate in trees per acre per year\nSELECT\n    ps.evalid,\n    ps.rscd as state_code,\n    rs.RS_NAME as state_name,\n\n    -- Total annual mortality (trees)\n    SUM(\n        tgc.SUBP_TPAMORT_UNADJ_AL_FOREST *\n        CASE\n            WHEN t.DIA &lt; 5.0 THEN ps.ADJ_FACTOR_MICR\n            WHEN t.DIA &lt; COALESCE(CAST(p.MACRO_BREAKPOINT_DIA AS DOUBLE), 9999.0) THEN ps.ADJ_FACTOR_SUBP\n            ELSE ps.ADJ_FACTOR_MACR\n        END * ps.EXPNS\n    ) as total_annual_mortality_trees,\n\n    -- Forest area for per-acre calculation\n    SUM(\n        c.CONDPROP_UNADJ *\n        CASE c.PROP_BASIS\n            WHEN 'MACR' THEN ps.ADJ_FACTOR_MACR\n            ELSE ps.ADJ_FACTOR_SUBP\n        END * ps.EXPNS\n    ) as total_forest_acres,\n\n    -- Per acre mortality rate\n    SUM(\n        tgc.SUBP_TPAMORT_UNADJ_AL_FOREST *\n        CASE\n            WHEN t.DIA &lt; 5.0 THEN ps.ADJ_FACTOR_MICR\n            WHEN t.DIA &lt; COALESCE(CAST(p.MACRO_BREAKPOINT_DIA AS DOUBLE), 9999.0) THEN ps.ADJ_FACTOR_SUBP\n            ELSE ps.ADJ_FACTOR_MACR\n        END * ps.EXPNS\n    ) / NULLIF(SUM(\n        c.CONDPROP_UNADJ *\n        CASE c.PROP_BASIS\n            WHEN 'MACR' THEN ps.ADJ_FACTOR_MACR\n            ELSE ps.ADJ_FACTOR_SUBP\n        END * ps.EXPNS\n    ), 0) as mortality_trees_per_acre_per_year,\n\n    COUNT(DISTINCT p.CN) as plot_count\n\nFROM POP_STRATUM ps\nJOIN REF_RESEARCH_STATION rs ON ps.rscd = rs.RSCD\nJOIN POP_PLOT_STRATUM_ASSGN ppsa ON ppsa.STRATUM_CN = ps.CN\nJOIN PLOT p ON ppsa.PLT_CN = p.CN\nJOIN COND c ON c.PLT_CN = p.CN\nJOIN TREE_GRM_COMPONENT tgc ON tgc.PLT_CN = p.CN\nJOIN TREE_GRM_BEGIN t ON t.TRE_CN = tgc.TRE_CN\n\nWHERE\n    -- Forest land only\n    c.COND_STATUS_CD = 1\n    -- Mortality components only\n    AND tgc.COMPONENT LIKE 'MORTALITY%'\n    -- Has mortality data\n    AND tgc.SUBP_TPAMORT_UNADJ_AL_FOREST &gt; 0\n    -- North Carolina\n    AND ps.rscd = 33\n    -- GRM evaluation for mortality\n    AND ps.evalid = 372303\n\nGROUP BY ps.evalid, ps.rscd, rs.RS_NAME;\n</code></pre>"},{"location":"queries/mortality/north_carolina_mortality_trees_per_acre/#expected-results","title":"Expected Results","text":"<p>Annual Mortality Rate: - Total Trees: ~1,485,000 trees per year - Forest Area: 18,560,000 acres - Mortality Rate: 0.080 trees per acre per year - Plot Count: 5,673 plots - Coefficient of Variation: ~3.37%</p>"},{"location":"queries/mortality/north_carolina_mortality_trees_per_acre/#key-insights","title":"Key Insights","text":"<ul> <li>\ud83d\udcca Low Mortality Rate: Less than 0.1 trees per acre annually indicates healthy forests</li> <li>\ud83c\udf32 All Trees Included: Uses _AL_FOREST columns for all live trees</li> <li>\u23f1\ufe0f Annual Rate: Values are pre-calculated annual rates, not totals</li> <li>\ud83d\udd0d Large Sample: Over 5,600 plots provide robust statistical estimates</li> </ul>"},{"location":"queries/mortality/north_carolina_mortality_trees_per_acre/#alternative-query-by-species-group","title":"Alternative Query - By Species Group","text":"<pre><code>-- Mortality rate by species group\nSELECT\n    CASE\n        WHEN rs.SPECIES_GROUP = 1 THEN 'Softwoods'\n        WHEN rs.SPECIES_GROUP = 2 THEN 'Hardwoods'\n        ELSE 'Unknown'\n    END as species_group,\n\n    SUM(\n        tgc.SUBP_TPAMORT_UNADJ_AL_FOREST *\n        CASE\n            WHEN t.DIA &lt; 5.0 THEN ps.ADJ_FACTOR_MICR\n            WHEN t.DIA &lt; COALESCE(CAST(p.MACRO_BREAKPOINT_DIA AS DOUBLE), 9999.0) THEN ps.ADJ_FACTOR_SUBP\n            ELSE ps.ADJ_FACTOR_MACR\n        END * ps.EXPNS\n    ) as annual_mortality_trees,\n\n    COUNT(DISTINCT t.SPCD) as species_count\n\nFROM POP_STRATUM ps\nJOIN POP_PLOT_STRATUM_ASSGN ppsa ON ppsa.STRATUM_CN = ps.CN\nJOIN PLOT p ON ppsa.PLT_CN = p.CN\nJOIN COND c ON c.PLT_CN = p.CN\nJOIN TREE_GRM_COMPONENT tgc ON tgc.PLT_CN = p.CN\nJOIN TREE_GRM_BEGIN t ON t.TRE_CN = tgc.TRE_CN\nJOIN REF_SPECIES rs ON t.SPCD = rs.SPCD\n\nWHERE\n    c.COND_STATUS_CD = 1\n    AND tgc.COMPONENT LIKE 'MORTALITY%'\n    AND tgc.SUBP_TPAMORT_UNADJ_AL_FOREST &gt; 0\n    AND ps.rscd = 33\n    AND ps.evalid = 372303\n\nGROUP BY rs.SPECIES_GROUP\nORDER BY annual_mortality_trees DESC;\n</code></pre>"},{"location":"queries/mortality/north_carolina_mortality_trees_per_acre/#evalidator-methodology","title":"EVALIDator Methodology","text":"<ul> <li>Component-Based: Uses pre-calculated values from TREE_GRM_COMPONENT</li> <li>Tree Basis Adjustment: Applies correct factors based on subplot design</li> <li>Annual Rates: TPAMORT_UNADJ values are already annualized</li> <li>Ratio Estimation: Divides total mortality by total area for per-acre rates</li> </ul>"},{"location":"queries/mortality/north_carolina_mortality_trees_per_acre/#download","title":"Download","text":"<p>  Download SQL File </p>"},{"location":"queries/ratio_estimation/","title":"ratio estimation Queries","text":"<p>Coming soon...</p>"},{"location":"queries/tree_density/","title":"tree density Queries","text":"<p>Coming soon...</p>"},{"location":"queries/volume/","title":"volume Queries","text":"<p>Coming soon...</p>"},{"location":"queries/volume/california_volume_by_diameter/","title":"California Net Merchantable Volume by Diameter Class","text":"<p>This query demonstrates advanced volume analysis using EVALIDator methodology, showing how merchantable timber volume is distributed across different diameter classes in California.</p>"},{"location":"queries/volume/california_volume_by_diameter/#query-overview","title":"Query Overview","text":"<ul> <li>EVALID: 62101 (California 2021 Current Volume)</li> <li>Expected Result: 67.05 billion cubic feet total volume (4,188.7 cu ft/acre)</li> <li>Key Insight: Large trees (29.0+ inches) contain 35.6% of total volume</li> </ul>"},{"location":"queries/volume/california_volume_by_diameter/#key-features","title":"Key Features","text":"<ul> <li>Diameter class grouping for volume analysis</li> <li>Net merchantable bole wood volume calculations</li> <li>Timber species filtering (non-woodland species)</li> <li>Timberland site class restrictions</li> </ul>"},{"location":"queries/volume/california_volume_by_diameter/#query","title":"Query","text":"<pre><code>SELECT\n    CASE\n        WHEN tree.dia &lt;= 6.99 THEN '5.0-6.9'\n        WHEN tree.dia &lt;= 8.99 THEN '7.0-8.9'\n        WHEN tree.dia &lt;= 10.99 THEN '9.0-10.9'\n        WHEN tree.dia &lt;= 12.99 THEN '11.0-12.9'\n        WHEN tree.dia &lt;= 14.99 THEN '13.0-14.9'\n        WHEN tree.dia &lt;= 16.99 THEN '15.0-16.9'\n        WHEN tree.dia &lt;= 18.99 THEN '17.0-18.9'\n        WHEN tree.dia &lt;= 20.99 THEN '19.0-20.9'\n        WHEN tree.dia &lt;= 28.99 THEN '21.0-28.9'\n        ELSE '29.0+'\n    END as diameter_class,\n\n    SUM(\n        TREE.TPA_UNADJ * TREE.VOLCFNET *\n        CASE\n            WHEN TREE.DIA &lt; 5.0 THEN POP_STRATUM.ADJ_FACTOR_MICR\n            WHEN TREE.DIA &lt; COALESCE(CAST(PLOT.MACRO_BREAKPOINT_DIA AS DOUBLE), 9999.0) THEN POP_STRATUM.ADJ_FACTOR_SUBP\n            ELSE POP_STRATUM.ADJ_FACTOR_MACR\n        END * POP_STRATUM.EXPNS\n    ) AS total_volume_cuft\n\nFROM POP_STRATUM\nJOIN POP_PLOT_STRATUM_ASSGN ON (POP_PLOT_STRATUM_ASSGN.STRATUM_CN = POP_STRATUM.CN)\nJOIN PLOT ON (POP_PLOT_STRATUM_ASSGN.PLT_CN = PLOT.CN)\nJOIN COND ON (COND.PLT_CN = PLOT.CN)\nJOIN TREE ON (TREE.PLT_CN = COND.PLT_CN AND TREE.CONDID = COND.CONDID)\nJOIN REF_SPECIES ON (TREE.SPCD = REF_SPECIES.SPCD)\n\nWHERE\n    TREE.STATUSCD = 1  -- Live trees\n    AND COND.RESERVCD = 0  -- Unreserved\n    AND COND.SITECLCD IN (1, 2, 3, 4, 5, 6)  -- Timberland site classes\n    AND COND.COND_STATUS_CD = 1  -- Forest conditions\n    AND TREE.TPA_UNADJ IS NOT NULL\n    AND TREE.VOLCFNET IS NOT NULL\n    AND TREE.DIA &gt;= 5.0  -- At least 5 inches DBH for merchantable timber\n    AND REF_SPECIES.WOODLAND = 'N'  -- Non-woodland species (timber species)\n    AND pop_stratum.rscd = 26  -- California (RSCD 26)\n    AND pop_stratum.evalid = 62101\n\nGROUP BY\n    CASE\n        WHEN tree.dia &lt;= 6.99 THEN '5.0-6.9'\n        WHEN tree.dia &lt;= 8.99 THEN '7.0-8.9'\n        WHEN tree.dia &lt;= 10.99 THEN '9.0-10.9'\n        WHEN tree.dia &lt;= 12.99 THEN '11.0-12.9'\n        WHEN tree.dia &lt;= 14.99 THEN '13.0-14.9'\n        WHEN tree.dia &lt;= 16.99 THEN '15.0-16.9'\n        WHEN tree.dia &lt;= 18.99 THEN '17.0-18.9'\n        WHEN tree.dia &lt;= 20.99 THEN '19.0-20.9'\n        WHEN tree.dia &lt;= 28.99 THEN '21.0-28.9'\n        ELSE '29.0+'\n    END\n\nORDER BY\n    MIN(tree.dia);\n</code></pre>"},{"location":"queries/volume/california_volume_by_diameter/#expected-results","title":"Expected Results","text":"<p>Volume Distribution by Diameter Class:</p> <ul> <li>5.0-6.9 inches: 1.29 billion cu ft (1.9%)</li> <li>7.0-8.9 inches: 2.32 billion cu ft (3.5%)</li> <li>9.0-10.9 inches: 3.22 billion cu ft (4.8%)</li> <li>11.0-12.9 inches: 3.85 billion cu ft (5.7%)</li> <li>13.0-14.9 inches: 4.21 billion cu ft (6.3%)</li> <li>15.0-16.9 inches: 4.34 billion cu ft (6.5%)</li> <li>17.0-18.9 inches: 4.68 billion cu ft (7.0%)</li> <li>19.0-20.9 inches: 4.62 billion cu ft (6.9%)</li> <li>21.0-28.9 inches: 14.63 billion cu ft (21.8%)</li> <li>29.0+ inches: 23.90 billion cu ft (35.6%)</li> </ul>"},{"location":"queries/volume/california_volume_by_diameter/#key-insights","title":"Key Insights","text":"<ul> <li>Large Tree Dominance: Trees 29.0+ inches contain 35.6% of total volume</li> <li>Combined Large Classes: 21.0+ inch trees contain 57.4% of total volume</li> <li>Small Tree Contribution: 5.0-12.9 inch trees contain only 15.9% of volume</li> <li>Critical Importance: Demonstrates the vital role of large trees for timber volume</li> </ul>"},{"location":"queries/volume/california_volume_by_diameter/#evalidator-methodology","title":"EVALIDator Methodology","text":"<ul> <li>Volume Calculations: Uses VOLCFNET (net merchantable cubic foot volume)</li> <li>Adjustment Factors: Proper MICR/SUBP/MACR based on tree diameter</li> <li>Timber Focus: Filters for non-woodland species only (WOODLAND = 'N')</li> <li>Timberland Restriction: Limited to timberland site classes (SITECLCD 1-6)</li> <li>Unreserved Land: Includes only unreserved forest conditions (RESERVCD = 0)</li> </ul>"},{"location":"queries/volume/california_volume_by_diameter/#download","title":"Download","text":"<p>  Download SQL File </p>"}]}